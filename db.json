{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","path":"js/copy-codeblock.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/lax.min.js","path":"lib/lax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/preset/plain.styl","path":"preset/plain.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","path":"lib/fancybox/fancybox.umd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","path":"lib/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","path":"lib/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","path":"lib/mdui_043tiny/mdui.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","path":"lib/mdui_043tiny/mdui.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/archive.md","hash":"56c0a7fd2e237a999bf1d33a254a9af4ab09bff0","modified":1724763227165},{"_id":"source/custom.css","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1724763227165},{"_id":"source/_posts/2023_10_problems.md","hash":"070df2eb3185e19f4e315eab764274dcd35e9ac5","modified":1724764045125},{"_id":"source/_posts/2023_11_problems.md","hash":"bd7a1520c2dc73e31086832caf8671fd7f4f4271","modified":1724763227161},{"_id":"source/_posts/2024_3_problems.md","hash":"130c5297ca57bb92895990d63d4655bf7b68c7ec","modified":1724803793158},{"_id":"source/_posts/2024_8_problems.md","hash":"8836903a2209bfced1b146bba5b0fdd04eab26c2","modified":1725626308709},{"_id":"source/_posts/ARC140B.md","hash":"900ef0dcebb9dc15e708e7e5627044e3553ff8bd","modified":1725626501637},{"_id":"source/_posts/AT_abc310_d.md","hash":"76c50453e7882e85afcc1be86e36c5fdd0d734f0","modified":1725626504785},{"_id":"source/_posts/AT_abc339_e.md","hash":"68751bed6739fcbcd2e6bed75ff965206745ad25","modified":1725626507341},{"_id":"source/_posts/AT_arc174_a.md","hash":"2dcda706ce3e4f347b3bbeb3ed133160967324c1","modified":1725626490037},{"_id":"source/_posts/CF1851D.md","hash":"9197a15d14ccca63390b1fdf00e57de11f2d5d52","modified":1724764101561},{"_id":"source/_posts/CF1875D.md","hash":"e60006e50308518e2e1a4d6eaf47e0d9daf935ae","modified":1724764104425},{"_id":"source/_posts/CF467B.md","hash":"f270072b7008839695d4ff65b6854141c927bbca","modified":1725626463461},{"_id":"source/_posts/CF755F.md","hash":"81a904566833926371bf891ad53bc265b2adeab1","modified":1725626458965},{"_id":"source/_posts/P6491.md","hash":"e61f9b3eff420de4b5492a637653f32c881599b8","modified":1725626477133},{"_id":"source/_posts/UVA1328.md","hash":"068d38288d51cf6bf08d92b72b27537ae25a8794","modified":1725626442941},{"_id":"source/_posts/about_me.md","hash":"1128c7a67a2c9d684583be511161d91bbb4e06df","modified":1724763227165},{"_id":"source/_posts/lg_P6883.md","hash":"000e1c787de27d57007f75702666b018329016f0","modified":1724763227165},{"_id":"node_modules/hexo-theme-nexmoe/.eslintignore","hash":"1d606028dff10b1a8c635142235182379dc3c64e","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/.eslintrc.json","hash":"ca45d8e5d80ad6b7004cddacae7fc7d8040b2d6f","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/README.md","hash":"7e77fc64595bc4afe6a56ebe0fe525a874b4f017","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/crowdin.yml","hash":"f9f02a9cab975c7de721c5dc4179b77870019cc6","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/index.js","hash":"f3d92ae5f32a9aee66f8b24083a2004d69a2b761","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/package.json","hash":"5f5c79d7fdaa58fa87142085f1f010762afdd643","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/.github/release-drafter.yml","hash":"9be21d7a486404050224d61415226e1ba321f169","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/demo/_config.nexmoe.yml","hash":"8f508665b4512954103e04e1e86f9ebfe30e7748","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/demo/_config.yml","hash":"f5a551599d83995e0dbc4719e7950fa889b3dc64","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/demo/package.json","hash":"883603a5be41686e89c26519e5bfe097343edcc6","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/include/README.md","hash":"912c1a78db7138e3ff6e1ce622dd00e3bfb1afab","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/include/config.js","hash":"f26ff9408ca6ce956ef40ac6c6996da36c9df67d","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/include/dependency.js","hash":"ed975738b982c19565bc2869a51277723fd23e6b","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/include/register.js","hash":"446119e7fbc44da8d0fc8c3628c14fadb225c558","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/default.yml","hash":"c76f93c3c0ac4582694e330647f2fe424930ec3a","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/en.yml","hash":"1a2ab324edb076988fa7a098d2b011d80738a047","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/it.yml","hash":"334afb6a7967d71ebd2fb32bdd1f8b20174c82bd","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/ja.yml","hash":"773c3b0464771c6d5149a2175bb9d7eaceb755ea","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-CN.yml","hash":"b30de168c5bc226cdb9dbd7358b7b0d33a34e1d5","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-HK.yml","hash":"6b6ada7b425c137cd51edc2f4890b96a21482558","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-TW.yml","hash":"e4ababddda52aa89f0fd51909c2211bcd10abb53","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh.yml","hash":"81aa48d1ada886cb10f5a195c3afb250f962f3ac","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/archives.ejs","hash":"93ffaf937dacf8f1b888ad20470ce2d8b8c6673b","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/index.jsx","hash":"20373ddf76f6d59dde51833e754c9f70cc804f77","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/layout.jsx","hash":"e347c8e933b3e496add81502c1a2e229b0042f73","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/post.ejs","hash":"c19844fccebbb7a1691847dbd3f725a06e409ee8","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/py.jsx","hash":"590216a1f66a2085d98544fe082c503ec3baa02e","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/scripts/index.js","hash":"c00aba78d38330728dbbdbb0bae57f1b00a7de5e","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/_config.yml","hash":"c09a5a5a10889ef15cbfad988474527ccad19546","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_en.md","hash":"557484415c610222b16b58df470c2a768782c4fc","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"d6c77dbb2a3d638d748280fb37dd29375aebe98c","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_en.md","hash":"803f6736473a122ed78867e64681defcd2edd954","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"843abf5e1d7b06cb1feddd75f7025150d46a91c2","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/npm-publish.yml","hash":"b57ce794238f61bb8223752e516970cd1b7732c9","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/release-drafter.yml","hash":"ccbe1e1ae6ee3b2a7d32362791aa006afa95e94d","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/demo/.github/dependabot.yml","hash":"25b0257a0db2c5b6a5756d8990bc2cba12f54fc5","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/draft.md","hash":"204ab550ddffa92051ea0eb2484a78d84dac3693","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/demo/scaffolds/post.md","hash":"e7169dab8ce62d41e3734e30706fa786cc7d46f4","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/head.ejs","hash":"c14cec07f778dbf643e51671e47c2e6e711045b8","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/paginator.jsx","hash":"9b1f26c6f899b1c66c65d7213137f02796b56236","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/right.ejs","hash":"e4db789fcf7f7dfe58e22c78ae30a5db2355cc47","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/archive.ejs","hash":"2c8c5ee017bfdd56cbb80c7796ef9393aea16d52","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/category.ejs","hash":"99113b9f2cb4ffefdda3e3a343647ac6a5083091","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/hitokoto.ejs","hash":"2c9c3567d2b5a99cdbca90673c638409529881db","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/link.ejs","hash":"61bc7a6018309f5b3525b451ccdd62e6664f7e74","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/recent_posts.ejs","hash":"7d9eaf8228eda803aa4956e55432f78e056d6a01","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/search.ejs","hash":"9771d5e03623a8892c23dab9b24360edbaf87233","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/social.ejs","hash":"133927c64cbe6f9cf6601e32be0b03ed576dfbf5","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tag.ejs","hash":"ddf844f08124454bea2a30f8349b63f3cb63ac16","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tagcloud.ejs","hash":"25e1af5116bd5cbf6c1d1e259a8564e21a3a28d5","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/css_auto_version.js","hash":"354700a113aca785c82bd59a16901a2dff2a2580","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/image_filter.js","hash":"284c3f15eaba3ff6db42fe12f921fada5c6f24b4","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/js_auto_version.js","hash":"96e6d7d0dadd39198e33ec8d5f0331e4a600ca37","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/gallery.js","hash":"bc07b003bd405138ff4bca5fb03ba180fc29b92e","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/links.js","hash":"3676a23bdf32e0c1a933ccb8a79da6c5880a2e19","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","hash":"2021dacedfe0f6f2ed6fdf6a9e9c067fe792cde0","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","hash":"965c3befaa26a06484204b34f20b8770e186866a","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","hash":"51f1b526133258db1080826574c50a683a34c559","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","hash":"eb69cd78f6ab8d3e83576dae29f09c9af0ffe8b9","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/lax.min.js","hash":"1de100aa90834f1f4fae9a4deb44a73048fefff0","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/preset/plain.styl","hash":"0413a4e36642110f0a23738d10f2874e6e43ed6d","modified":1724763226729},{"_id":"node_modules/hexo-theme-nexmoe/demo/source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/body.jsx","hash":"7e63a37bcd01a67950fb4f52895bf9e6cf9f955b","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/content.jsx","hash":"4bfadb1ce4e732289f43f81cfce41fb35a3f2f89","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/footer.jsx","hash":"167f67e30cdb15576c9cd9dd7cc6aafb4625e069","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/header.ejs","hash":"24ebcbd15daee1b6b1ede4ffaffa9b86f7154167","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/nexmoe/mathjax.ejs","hash":"2fab168b181e2d5bc6ac079f13152ff0177128cb","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/body.jsx","hash":"1d8210e9968298440a1da0cc86c3e3454dba4427","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/content.jsx","hash":"13a868d0b70283aaaa49770ad530261eda7a750d","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/footer.jsx","hash":"3ede4910be7915854ee06a545aa8ee04bd216031","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/xiaoshu/header.jsx","hash":"3ede4910be7915854ee06a545aa8ee04bd216031","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/copyright.ejs","hash":"bf2cb43d66842b4bc51eb6908c588044a68d1364","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/meta.ejs","hash":"be2fdf6732f49d5d3277b4e4b0a4f9fc85fa4643","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/tag.ejs","hash":"5934bcb1b256642708c97f61da85fbdbd959a078","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/word-count.ejs","hash":"5415f792394b364fcbc1502971874dac6ea54de4","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/searchbox.jsx","hash":"83714b79399e0bef913bef8c4dbef58e9dd875f2","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/archives.styl","hash":"3f401f6caf7e7ed6c0b7fe622ed02a25cc9e5237","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/article.styl","hash":"726d9837026a4979dae3d9d790feba952de98b48","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/copy-codeblock.styl","hash":"83372948cb098a8ad1da8bde17963701b8e39409","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/pagination.styl","hash":"aa22dd62542d69f07ce5178cd3f94cf20c9f1bca","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/py.styl","hash":"53c72cb99593d83523559013713fc25b4ae5957c","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/searchbox.styl","hash":"b25cefb269bb7188ed9d6ab0b530f30e138b33d1","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/hitokoto.styl","hash":"0086bb5a3f250439be64588fca075ee3326a6ad1","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/index.styl","hash":"465acffbe8cc98c3b275cc286c0991f422930b60","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","hash":"53456972a11d52af67187fc17999e6665f9f06fe","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","hash":"a82acbfeabc50a6668ebf6115b5c5c3d308079b6","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","hash":"3566d949bdc045cd816be382d180b796e0a78748","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","hash":"0dd0193f6f400e5da6d3aef89f76c22c79e0f396","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","hash":"a536d4780220f9cd7fc5126d9ec1108b19afb6b9","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","hash":"2af6d26577c3ae2ca126351f0be764cbae9da6ff","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/nexmoe/content.styl","hash":"718c99320e6862a020e2652d8259c980283a6ac0","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/nexmoe/header.styl","hash":"b1c905f3a6089936aa6740546c266c03a99a8169","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/content.styl","hash":"0e382da59dfe8bb1451b115e1c32f40ed126174f","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/footer.styl","hash":"bebef911fb8030bbfed418492e6c1c0eae2306a7","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_layout/xiaoshu/header.styl","hash":"fb047e449d0a3f37f8beffc31af0ed9ffa2da9d3","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_index/list.styl","hash":"6ce0e88126225e582c4d788c4c88a30c11fee8fb","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/background.styl","hash":"a4c012e17734de0bf1a62bf5b5ebc98755b23bcb","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/background.jsx","hash":"05ee70bc00ddac592469a9e56cfdb9f683f130ef","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/layout/_index/list.ejs","hash":"e98a95f50d6f9042302ec4fad62ac85c5336ba26","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1724763226701},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","hash":"f2126b3e96721606a2ba20e0f148404814262171","modified":1724763226725},{"_id":"node_modules/hexo-theme-nexmoe/demo/package-lock.json","hash":"37e07fd906a664c3706e684e8efcb4d86f31e3e9","modified":1724763226697},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","hash":"5c0bced25b23773e764338ae4581f366f984cb6c","modified":1724763226729},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","hash":"1500b5d27b8ce2e7c543bb6d7205de43059378db","modified":1724763226729},{"_id":"public/custom.css","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1725626761633},{"_id":"public/content.json","hash":"3dab385fb96390556e9e6408cbf320cf058044b2","modified":1725626761633},{"_id":"public/sitemap.xml","hash":"a0d0f3abb371eba5398828bc4b08145f419979ad","modified":1725626761633},{"_id":"public/sitemap.txt","hash":"da82f4f7b1042cd177abc6af9f1e5072292e4db5","modified":1725626761633},{"_id":"public/archive.html","hash":"e308ddf7f345d73b06ccf5299ad4b4a3398e6d64","modified":1725626761633},{"_id":"public/2024/08/27/AT_arc174_a/index.html","hash":"cc94ff1cc688dcfd40215abbb439cdf79cbe0891","modified":1724763551084},{"_id":"public/2024/08/27/CF1851D/index.html","hash":"edfe0baadbd9952639f81519d4045f1f7485cdde","modified":1725626761633},{"_id":"public/2024/08/27/CF1875D/index.html","hash":"2d047838755aa6ddf6db05b7a68a631382ebeac4","modified":1725626761633},{"_id":"public/2024/08/27/CF467B/index.html","hash":"b3984e079459095f3fc26440ead1466571c2a2aa","modified":1724763551084},{"_id":"public/2024/08/27/CF755F/index.html","hash":"95e9a9043e5df10938cce74c6443f843ddab7533","modified":1724763551084},{"_id":"public/2024/08/27/P6491/index.html","hash":"f8672e7fb584184e8ae40c88ad258d3a5893de68","modified":1724763551084},{"_id":"public/2024/08/27/UVA1328/index.html","hash":"c85b4c101ebfeca5cfe91311823f2be4f5bbaae1","modified":1724763551084},{"_id":"public/2024/08/27/about_me/index.html","hash":"a9701e87e86467e224204e25c3e37a989d979918","modified":1725626761633},{"_id":"public/2024/08/27/2024_3_problems/index.html","hash":"a5962dd9a5282d582c511cae4c085cf76cf79d0e","modified":1724763551084},{"_id":"public/2024/08/27/2024_8_problems/index.html","hash":"0bea51079df5a065efc532441d0e0cdc20f5d346","modified":1724763551084},{"_id":"public/2024/08/27/ARC140B/index.html","hash":"a0a4fa38a6bd611bf583e2d1796628c5ba1e55a8","modified":1724763551084},{"_id":"public/2024/08/27/AT_abc310_d/index.html","hash":"3798b9ea017bb7d50a0f40da6b9c7bd6b9e09ca2","modified":1724763551084},{"_id":"public/2024/08/27/AT_abc339_e/index.html","hash":"ceeeb532eeb818771c20d6fd1ff06733bc82b2f9","modified":1724763551084},{"_id":"public/2023/11/11/lg_P6883/index.html","hash":"71a4f756c2548aa885cc1bd813912730fc0ee235","modified":1725626761633},{"_id":"public/2023/11/01/2023_11_problems/index.html","hash":"c66453ed5aae90bd72621f9e3a90bfe4ae7786f9","modified":1725626761633},{"_id":"public/2023/10/01/2023_10_problems/index.html","hash":"cd08dcd08f081ce9018c3d739cb158a42905c21d","modified":1725626761633},{"_id":"public/archives/index.html","hash":"be58359084e7f97161f17cfeca9d898bc69b8314","modified":1725626761633},{"_id":"public/archives/page/2/index.html","hash":"05e97c1b0be419a18878f6d9bd35bb35b2a9619e","modified":1725626761633},{"_id":"public/archives/2023/index.html","hash":"559eeabf32c577730b8d6a373a30eab26faef6ec","modified":1725626761633},{"_id":"public/archives/2023/10/index.html","hash":"95c3b9495fe3e02ea48a8f263577335b659f8b3f","modified":1725626761633},{"_id":"public/archives/2023/11/index.html","hash":"dcec5b8d5ade00d544adf8f4571374584a66609a","modified":1725626761633},{"_id":"public/archives/2024/index.html","hash":"6fb3b13d1ffaaaa8812bc0e33c78c00f2a714f0c","modified":1725626761633},{"_id":"public/archives/2024/page/2/index.html","hash":"6425a4895d502e05afc30cbff75bd2be1957a653","modified":1724763551084},{"_id":"public/archives/2024/08/index.html","hash":"46fb19d13f627ca1620c551a61db3b3ca571540c","modified":1725626761633},{"_id":"public/archives/2024/08/page/2/index.html","hash":"856480a30170ba0ddf19d123aa586d51122aa995","modified":1724763551084},{"_id":"public/categories/杂题/index.html","hash":"69b66f8d46e6f55825070883601afc017a822b16","modified":1725626761633},{"_id":"public/categories/题解/index.html","hash":"efbd927543b498b75da1a0665875d21582fae309","modified":1725626761633},{"_id":"public/categories/题解/page/2/index.html","hash":"5cf8380efefcea40ddb2287aef0fae7002c113ff","modified":1725626761633},{"_id":"public/categories/生活/index.html","hash":"1a53cb310ef0eb35d7d0eab184f067fcb2fea41c","modified":1725626761633},{"_id":"public/index.html","hash":"db3886a01b7b67538e7782ca32e864d6e7329fa1","modified":1725626761633},{"_id":"public/page/2/index.html","hash":"4374d9ce9aacbd09ea49bc3f858aae0c4e057070","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.svg","hash":"2af6d26577c3ae2ca126351f0be764cbae9da6ff","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1725626761633},{"_id":"public/css/prism.css","hash":"f1f64f4a26b715edbd65391def53322611df75cf","modified":1725626761633},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1725626761633},{"_id":"public/js/prism.js","hash":"cc4a0863a7381b09d369ab5c495563814e4424e2","modified":1725626761633},{"_id":"public/js/prism-line-numbers.min.js","hash":"47a334d25e6977341ab4334d774921a1495eff9c","modified":1725626761633},{"_id":"public/css/style.css","hash":"2986810eeaa90c45dce6d38f4b6ff845f39a2f0a","modified":1725626761633},{"_id":"public/js/app.js","hash":"965c3befaa26a06484204b34f20b8770e186866a","modified":1725626761633},{"_id":"public/js/copy-codeblock.js","hash":"51f1b526133258db1080826574c50a683a34c559","modified":1725626761633},{"_id":"public/js/search.js","hash":"eb69cd78f6ab8d3e83576dae29f09c9af0ffe8b9","modified":1725626761633},{"_id":"public/lib/lax.min.js","hash":"1de100aa90834f1f4fae9a4deb44a73048fefff0","modified":1725626761633},{"_id":"public/preset/plain.css","hash":"368322b6cc3b448ed92d2cadd0fb3abc421d8ab4","modified":1725626761633},{"_id":"public/lib/fancybox/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1725626761633},{"_id":"public/lib/fancybox/fancybox.umd.js","hash":"f2126b3e96721606a2ba20e0f148404814262171","modified":1725626761633},{"_id":"public/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1725626761633},{"_id":"public/lib/iconfont/demo_index.html","hash":"df3f126af2695d3dd839edcfda49b951b02f701e","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.css","hash":"01952f8f10c716cbb463b589a345e46f1b8cc101","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.js","hash":"a536d4780220f9cd7fc5126d9ec1108b19afb6b9","modified":1725626761633},{"_id":"public/lib/iconfont/iconfont.json","hash":"8fbdca1d1886c8c6d9bfe1fb105595c65050a175","modified":1725626761633},{"_id":"public/lib/mdui_043tiny/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1725626761633},{"_id":"public/lib/mdui_043tiny/mdui.js","hash":"0bd653abb12272e4ed2122dbdc8ca1c2b140a363","modified":1725626761633},{"_id":"public/2024/07/31/2024_8_problems/index.html","hash":"a23a5a00e0dffd5d274b61714d973f09875ef4d6","modified":1725626761633},{"_id":"public/2024/02/29/2024_3_problems/index.html","hash":"578dc0f4dcc63c737f3a80416d3190d9836f90d0","modified":1725626761633},{"_id":"public/2023/10/01/ARC140B/index.html","hash":"6fd7a7769bcb065d2537e20e7f02d8fceff60d72","modified":1725626761633},{"_id":"public/2023/10/01/AT_abc310_d/index.html","hash":"288c156976b0ac591e92c99b7e4c508a5f34e25b","modified":1725626761633},{"_id":"public/2023/10/01/AT_abc339_e/index.html","hash":"8088d58b355b1b2f8888f9b57ec33a86a6bfbbc3","modified":1725626761633},{"_id":"public/2023/10/01/AT_arc174_a/index.html","hash":"0cf2945679d50d10fe441f98f470ac1521e9feaa","modified":1725626761633},{"_id":"public/2023/10/01/CF467B/index.html","hash":"b9eee419a1fe6fb5c53630d6fc45601f9152d576","modified":1725626761633},{"_id":"public/2023/10/01/CF755F/index.html","hash":"41ec50cf93014418a2e9cf0ebd44951c8e6537e5","modified":1725626761633},{"_id":"public/2023/10/01/P6491/index.html","hash":"b3c2838b375c570854c5de6365c6f0f264393bd8","modified":1725626761633},{"_id":"public/1969/12/31/UVA1328/index.html","hash":"e1873d895862c1de97d9e3fa100cd3384bbc5910","modified":1725626761633},{"_id":"public/archives/1969/index.html","hash":"0336af8544d3ce443241a4bbfd96e4e8a7a0c383","modified":1725626761633},{"_id":"public/archives/1969/12/index.html","hash":"64f450151b85a9839ad18615b3b2b850b78a3929","modified":1725626761633},{"_id":"public/archives/2024/02/index.html","hash":"ff989f1c3dc9dbb5bace1d72fa44fe2fbbf302d2","modified":1725626761633},{"_id":"public/archives/2024/07/index.html","hash":"3dfc904a214d0c68d42f5f1f6e9dc815c83c96dc","modified":1725626761633}],"Category":[{"name":"杂题","_id":"cm0cfoqfp0004358k17797ldr"},{"name":"题解","_id":"cm0cfoqfx000g358k7ft1ff9w"},{"name":"生活","_id":"cm0cfoqg60011358k94fzfqsc"}],"Data":[],"Page":[{"title":"文章归档","layout":"archives","_content":"\n","source":"archive.md","raw":"---\ntitle: 文章归档\nlayout: archives\n---\n\n","date":"2024-08-27T12:54:13.113Z","updated":"2024-08-27T12:53:47.165Z","path":"archive.html","comments":1,"_id":"cm0cfoqfi0000358keoe84xpm","content":"","excerpt":"","more":""},{"_content":"\n","source":"custom.css","raw":"\n","date":"2024-08-27T12:54:13.113Z","updated":"2024-08-27T12:53:47.165Z","path":"custom.css","layout":"false","title":"","comments":1,"_id":"cm0cfoqfn0002358kazms7mtj","content":"\n"}],"Post":[{"title":"2023 10月杂题记","date":"2023-10-01T16:00:00.000Z","cover":"https://lucky-cloud09.github.io/img/b3.jpg","_content":"\n\n# [CF1875D](https://www.luogu.com.cn/problem/CF1875D)\n\n我们经过思考，容易得出以下结论：\n\n1. 如果当前 $mex = x$，则下一个删的数一定小于 $x$。\n1. 如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。\n\n我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。\n\n则有：\n\n$$f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])$$\n\n其中 $j > i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。\n\n因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。\n\n设没删任何数的 $mex = first$。\n\n根据定义，初始化 $f[first] = 0$。\n\n根据上述结论，与定义，答案即为 $f[0]$。\n\n# [CF755F](https://www.luogu.com.cn/problem/CF755F)\n\n不想腾 markdown 了，[点这里吧](https://www.luogu.com.cn/blog/712506/solution-cf755f)。\n\n# [P2816](https://www.luogu.com.cn/problem/P2816)\n\n我认为不值得绿，如果没有加强数据，黄就差不多得了。\n\n很简单的贪心。与导弹拦截差不多相同。就是枚举当前有多少堆，再判断一下取最小值。当然判断即为贪心。每一堆新加一个一定要尽可能大。\n\n时间复杂度为 $O(n^2)$，考虑优化，想一下，明显的有单调性，可以选择二分答案，时间复杂度 $O(n \\log n)$，瓶颈在于排序与二分。\n\n代码：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, a[5100], ans = 1e9, cnt, v[5100];\n\nbool check(int x) {\n\tfor (int i = 0; i <= x; i++) v[i] = 1e9;\n\tfor (int i = 1; i <= n; i++) v[i % x] = min(v[i % x] - 1, a[i]);\n\tfor (int i = 0; i <= x; i++)\n\t\tif (v[i] < 0) return 0;\n\treturn 1;\n}\n\nint main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> a[i];\n\t}\n\tsort(a + 1, a + 1 + n, [](int x, int y){return x > y;});\n\tint l = 1, r = n;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(mid)) {\n\t\t\tans = min(ans, mid);\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```","source":"_posts/2023_10_problems.md","raw":"---\ntitle: 2023 10月杂题记\ncategories: 杂题\ndate: 2023/10/02\ncover: https://lucky-cloud09.github.io/img/b3.jpg\n---\n\n\n# [CF1875D](https://www.luogu.com.cn/problem/CF1875D)\n\n我们经过思考，容易得出以下结论：\n\n1. 如果当前 $mex = x$，则下一个删的数一定小于 $x$。\n1. 如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。\n\n我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。\n\n则有：\n\n$$f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])$$\n\n其中 $j > i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。\n\n因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。\n\n设没删任何数的 $mex = first$。\n\n根据定义，初始化 $f[first] = 0$。\n\n根据上述结论，与定义，答案即为 $f[0]$。\n\n# [CF755F](https://www.luogu.com.cn/problem/CF755F)\n\n不想腾 markdown 了，[点这里吧](https://www.luogu.com.cn/blog/712506/solution-cf755f)。\n\n# [P2816](https://www.luogu.com.cn/problem/P2816)\n\n我认为不值得绿，如果没有加强数据，黄就差不多得了。\n\n很简单的贪心。与导弹拦截差不多相同。就是枚举当前有多少堆，再判断一下取最小值。当然判断即为贪心。每一堆新加一个一定要尽可能大。\n\n时间复杂度为 $O(n^2)$，考虑优化，想一下，明显的有单调性，可以选择二分答案，时间复杂度 $O(n \\log n)$，瓶颈在于排序与二分。\n\n代码：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, a[5100], ans = 1e9, cnt, v[5100];\n\nbool check(int x) {\n\tfor (int i = 0; i <= x; i++) v[i] = 1e9;\n\tfor (int i = 1; i <= n; i++) v[i % x] = min(v[i % x] - 1, a[i]);\n\tfor (int i = 0; i <= x; i++)\n\t\tif (v[i] < 0) return 0;\n\treturn 1;\n}\n\nint main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> a[i];\n\t}\n\tsort(a + 1, a + 1 + n, [](int x, int y){return x > y;});\n\tint l = 1, r = n;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(mid)) {\n\t\t\tans = min(ans, mid);\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```","slug":"2023_10_problems","published":1,"updated":"2024-08-27T13:07:25.125Z","_id":"cm0cfoqfl0001358k9whx24qg","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"CF1875D\"><a href=\"#CF1875D\" class=\"headerlink\" title=\"CF1875D\"></a><a href=\"https://www.luogu.com.cn/problem/CF1875D\">CF1875D</a></h1><p>我们经过思考，容易得出以下结论：</p>\n<ol>\n<li>如果当前 $mex = x$，则下一个删的数一定小于 $x$。</li>\n<li>如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。</li>\n</ol>\n<p>我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。</p>\n<p>则有：</p>\n<script type=\"math/tex; mode=display\">f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])</script><p>其中 $j &gt; i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。</p>\n<p>因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。</p>\n<p>设没删任何数的 $mex = first$。</p>\n<p>根据定义，初始化 $f[first] = 0$。</p>\n<p>根据上述结论，与定义，答案即为 $f[0]$。</p>\n<h1 id=\"CF755F\"><a href=\"#CF755F\" class=\"headerlink\" title=\"CF755F\"></a><a href=\"https://www.luogu.com.cn/problem/CF755F\">CF755F</a></h1><p>不想腾 markdown 了，<a href=\"https://www.luogu.com.cn/blog/712506/solution-cf755f\">点这里吧</a>。</p>\n<h1 id=\"P2816\"><a href=\"#P2816\" class=\"headerlink\" title=\"P2816\"></a><a href=\"https://www.luogu.com.cn/problem/P2816\">P2816</a></h1><p>我认为不值得绿，如果没有加强数据，黄就差不多得了。</p>\n<p>很简单的贪心。与导弹拦截差不多相同。就是枚举当前有多少堆，再判断一下取最小值。当然判断即为贪心。每一堆新加一个一定要尽可能大。</p>\n<p>时间复杂度为 $O(n^2)$，考虑优化，想一下，明显的有单调性，可以选择二分答案，时间复杂度 $O(n \\log n)$，瓶颈在于排序与二分。</p>\n<p>代码：<br><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">5100</span><span style=\"color: #D4D4D4\">], ans = </span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">, cnt, </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">5100</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">check</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= x; i++) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i % x] = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i % x] - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= x; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i] &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcin &gt;&gt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(a + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, a + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + n, [](</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">){</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> x &gt; y;});</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r = n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (l &lt;= r) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">check</span><span style=\"color: #D4D4D4\">(mid)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, mid);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tr = mid - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> l = mid + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure></p>\n","excerpt":"","more":"<h1 id=\"CF1875D\"><a href=\"#CF1875D\" class=\"headerlink\" title=\"CF1875D\"></a><a href=\"https://www.luogu.com.cn/problem/CF1875D\">CF1875D</a></h1><p>我们经过思考，容易得出以下结论：</p>\n<ol>\n<li>如果当前 $mex = x$，则下一个删的数一定小于 $x$。</li>\n<li>如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。</li>\n</ol>\n<p>我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。</p>\n<p>则有：</p>\n<script type=\"math/tex; mode=display\">f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])</script><p>其中 $j &gt; i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。</p>\n<p>因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。</p>\n<p>设没删任何数的 $mex = first$。</p>\n<p>根据定义，初始化 $f[first] = 0$。</p>\n<p>根据上述结论，与定义，答案即为 $f[0]$。</p>\n<h1 id=\"CF755F\"><a href=\"#CF755F\" class=\"headerlink\" title=\"CF755F\"></a><a href=\"https://www.luogu.com.cn/problem/CF755F\">CF755F</a></h1><p>不想腾 markdown 了，<a href=\"https://www.luogu.com.cn/blog/712506/solution-cf755f\">点这里吧</a>。</p>\n<h1 id=\"P2816\"><a href=\"#P2816\" class=\"headerlink\" title=\"P2816\"></a><a href=\"https://www.luogu.com.cn/problem/P2816\">P2816</a></h1><p>我认为不值得绿，如果没有加强数据，黄就差不多得了。</p>\n<p>很简单的贪心。与导弹拦截差不多相同。就是枚举当前有多少堆，再判断一下取最小值。当然判断即为贪心。每一堆新加一个一定要尽可能大。</p>\n<p>时间复杂度为 $O(n^2)$，考虑优化，想一下，明显的有单调性，可以选择二分答案，时间复杂度 $O(n \\log n)$，瓶颈在于排序与二分。</p>\n<p>代码：<br><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">5100</span><span style=\"color: #D4D4D4\">], ans = </span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">, cnt, </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">5100</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">check</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= x; i++) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i % x] = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i % x] - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= x; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i] &lt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcin &gt;&gt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(a + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, a + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + n, [](</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">){</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> x &gt; y;});</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r = n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (l &lt;= r) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">check</span><span style=\"color: #D4D4D4\">(mid)) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, mid);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tr = mid - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> l = mid + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure></p>\n"},{"title":"2023 11月杂题记","date":"2023-11-01T16:00:00.000Z","cover":"https://lucky-cloud09.github.io/img/b2.jpg","_content":"\n## [P7974](https://www.luogu.com.cn/problem/P7974)\n\n**注意**：花费只跟行有关。\n\n简单的，我们一定是先上升，然后斜着到达 $[l,r]$ 中最大的 $h_i$ 然后平着走一段，斜着向下，最后垂直向下到达 $r$。\n\n如下图：\n\n![图片走丢力（悲](https://images.cnblogs.com/cnblogs_com/blogs/807386/galleries/2357156/o_231108054412_11%20%E6%9C%88%E6%9D%82%E9%A2%98%E8%AE%B01.png)\n\n我们可以证明这样是正确的。\n\n问题就在于如何看上升了多少。\n\n可以推出是 $\\max(h_i - (h_l + (i - l)))$。拆一下就是 $\\max(h_i - i) - (h_l - l)$。碍于篇幅，就不详细讲了~~就是懒得写了，没时间（逃~~。\n\n同理 $r$ 就是维护 $\\max(h_i + i)$。\n\n这就是相当于维护三个 St 表。\n\n若:\n\n```cpp\nint g(int l, int r, int op) {\n\tint len = lg[(r - l + 1)];\n\treturn max(f[op][l][len], f[op][r - (1 << len) + 1][len]);\n}\n```\n\n那么答案即为 $g(s, t, 1) - 4 \\times h_s - h_t + 2 \\times (g(s, t, 3) + g(s, t, 2))$。\n\n$l >= r$ 也就差不多了。\n\n那就只放处理答案和 St 的部分代码了。\n\n```cpp\nfor (int j = 1; j <= lg[n]; j++) {\n\tfor (int i = 1; i + (1 << j) - 1 <= n; i++) {\n\t\tf[1][i][j] = max(f[1][i][j - 1], f[1][(i + (1 << (j - 1)))][j - 1]);\n\t\tf[2][i][j] = max(f[2][i][j - 1], f[2][(i + (1 << (j - 1)))][j - 1]);\n\t\tf[3][i][j] = max(f[3][i][j - 1], f[3][(i + (1 << (j - 1)))][j - 1]);\n\t}\n}\nwhile (q--) {\n\tcin >> s >> t;\n\tint s1 = s, t1 = t;\n\tif (t < s) swap(s, t);\n\tcout << g(s, t, 1) - 4LL * h[s1] - h[t1] + 2LL * (g(s, t, 3) + g(s, t, 2)) << '\\n';\n}\n```\n\n注意开 long long。\n\n## [CF543B](https://www.luogu.com.cn/problem/CF543B)\n\n我们先设 $dis[i][j]$ 表示从 $i$ 到 $j$ 的路径长度，因为每条边权均为 $1$ 所以跑 $n$ 遍 BFS 就出来了。\n\n首先考虑没两条最短路没重叠的情况。显而易见，答案为 $m - dis[s1][t1] - dis[s2][t2]$。\n\n再思考有重叠。我们可以枚举重叠的部分，只用枚举重叠部分两端的端点，设为 $i$ 与 $j$。那么，此时答案分两种情况：\n\n$$m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][i] + dis[j][t2])$$\n\n$$m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][j] + dis[i][t2])$$\n\n但是，我们需要判断最短路是否合法。可以自己画图理解一下。\n\n最终答案就是在上面两者取最小值。\n\n主代码：\n\n```cpp\nfor (int i = 1; i <= n; i++) BFS(i);\nint ans = -dis[s1][t1] - dis[s2][t2] + m;\nfor (int i = 1; i <= n; i++) {\n\tfor (int j = 1; j <= n; j++) {\n\t\tif (dis[s1][i] + dis[i][j] + dis[j][t1] <= l1 && \n           dis[s2][i] + dis[i][j] + dis[j][t2] <= l2)\n           ans = max(ans, m - dis[s1][i] - dis[i][j] - dis[j][t1] - dis[s2][i] - dis[j][t2]);\n\t\tif (dis[s1][j] + dis[j][i] + dis[i][t1] <= l1 && \n           dis[s2][i] + dis[i][j] + dis[j][t2] <= l2) \n           ans = max(ans, m - dis[s1][j] - dis[i][j] - dis[i][t1] - dis[s2][i] - dis[j][t2]);\n\t}\n}\nif (dis[s1][t1] > l1 || dis[s2][t2] > l2) cout << -1;\nelse cout << ans;\n```\n","source":"_posts/2023_11_problems.md","raw":"---\ntitle: 2023 11月杂题记\ncategories: 杂题\ndate: 2023/11/02\ncover: https://lucky-cloud09.github.io/img/b2.jpg\n---\n\n## [P7974](https://www.luogu.com.cn/problem/P7974)\n\n**注意**：花费只跟行有关。\n\n简单的，我们一定是先上升，然后斜着到达 $[l,r]$ 中最大的 $h_i$ 然后平着走一段，斜着向下，最后垂直向下到达 $r$。\n\n如下图：\n\n![图片走丢力（悲](https://images.cnblogs.com/cnblogs_com/blogs/807386/galleries/2357156/o_231108054412_11%20%E6%9C%88%E6%9D%82%E9%A2%98%E8%AE%B01.png)\n\n我们可以证明这样是正确的。\n\n问题就在于如何看上升了多少。\n\n可以推出是 $\\max(h_i - (h_l + (i - l)))$。拆一下就是 $\\max(h_i - i) - (h_l - l)$。碍于篇幅，就不详细讲了~~就是懒得写了，没时间（逃~~。\n\n同理 $r$ 就是维护 $\\max(h_i + i)$。\n\n这就是相当于维护三个 St 表。\n\n若:\n\n```cpp\nint g(int l, int r, int op) {\n\tint len = lg[(r - l + 1)];\n\treturn max(f[op][l][len], f[op][r - (1 << len) + 1][len]);\n}\n```\n\n那么答案即为 $g(s, t, 1) - 4 \\times h_s - h_t + 2 \\times (g(s, t, 3) + g(s, t, 2))$。\n\n$l >= r$ 也就差不多了。\n\n那就只放处理答案和 St 的部分代码了。\n\n```cpp\nfor (int j = 1; j <= lg[n]; j++) {\n\tfor (int i = 1; i + (1 << j) - 1 <= n; i++) {\n\t\tf[1][i][j] = max(f[1][i][j - 1], f[1][(i + (1 << (j - 1)))][j - 1]);\n\t\tf[2][i][j] = max(f[2][i][j - 1], f[2][(i + (1 << (j - 1)))][j - 1]);\n\t\tf[3][i][j] = max(f[3][i][j - 1], f[3][(i + (1 << (j - 1)))][j - 1]);\n\t}\n}\nwhile (q--) {\n\tcin >> s >> t;\n\tint s1 = s, t1 = t;\n\tif (t < s) swap(s, t);\n\tcout << g(s, t, 1) - 4LL * h[s1] - h[t1] + 2LL * (g(s, t, 3) + g(s, t, 2)) << '\\n';\n}\n```\n\n注意开 long long。\n\n## [CF543B](https://www.luogu.com.cn/problem/CF543B)\n\n我们先设 $dis[i][j]$ 表示从 $i$ 到 $j$ 的路径长度，因为每条边权均为 $1$ 所以跑 $n$ 遍 BFS 就出来了。\n\n首先考虑没两条最短路没重叠的情况。显而易见，答案为 $m - dis[s1][t1] - dis[s2][t2]$。\n\n再思考有重叠。我们可以枚举重叠的部分，只用枚举重叠部分两端的端点，设为 $i$ 与 $j$。那么，此时答案分两种情况：\n\n$$m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][i] + dis[j][t2])$$\n\n$$m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][j] + dis[i][t2])$$\n\n但是，我们需要判断最短路是否合法。可以自己画图理解一下。\n\n最终答案就是在上面两者取最小值。\n\n主代码：\n\n```cpp\nfor (int i = 1; i <= n; i++) BFS(i);\nint ans = -dis[s1][t1] - dis[s2][t2] + m;\nfor (int i = 1; i <= n; i++) {\n\tfor (int j = 1; j <= n; j++) {\n\t\tif (dis[s1][i] + dis[i][j] + dis[j][t1] <= l1 && \n           dis[s2][i] + dis[i][j] + dis[j][t2] <= l2)\n           ans = max(ans, m - dis[s1][i] - dis[i][j] - dis[j][t1] - dis[s2][i] - dis[j][t2]);\n\t\tif (dis[s1][j] + dis[j][i] + dis[i][t1] <= l1 && \n           dis[s2][i] + dis[i][j] + dis[j][t2] <= l2) \n           ans = max(ans, m - dis[s1][j] - dis[i][j] - dis[i][t1] - dis[s2][i] - dis[j][t2]);\n\t}\n}\nif (dis[s1][t1] > l1 || dis[s2][t2] > l2) cout << -1;\nelse cout << ans;\n```\n","slug":"2023_11_problems","published":1,"updated":"2024-08-27T12:53:47.161Z","comments":1,"layout":"post","photos":[],"_id":"cm0cfoqfn0003358k48i1c9ka","content":"<h2 id=\"P7974\"><a href=\"#P7974\" class=\"headerlink\" title=\"P7974\"></a><a href=\"https://www.luogu.com.cn/problem/P7974\">P7974</a></h2><p><strong>注意</strong>：花费只跟行有关。</p>\n<p>简单的，我们一定是先上升，然后斜着到达 $[l,r]$ 中最大的 $h_i$ 然后平着走一段，斜着向下，最后垂直向下到达 $r$。</p>\n<p>如下图：</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://images.cnblogs.com/cnblogs_com/blogs/807386/galleries/2357156/o_231108054412_11%20%E6%9C%88%E6%9D%82%E9%A2%98%E8%AE%B01.png\" alt=\"图片走丢力（悲\" data-caption=\"图片走丢力（悲\" loading=\"lazy\"></p>\n<p>我们可以证明这样是正确的。</p>\n<p>问题就在于如何看上升了多少。</p>\n<p>可以推出是 $\\max(h_i - (h_l + (i - l)))$。拆一下就是 $\\max(h_i - i) - (h_l - l)$。碍于篇幅，就不详细讲了<del>就是懒得写了，没时间（逃</del>。</p>\n<p>同理 $r$ 就是维护 $\\max(h_i + i)$。</p>\n<p>这就是相当于维护三个 St 表。</p>\n<p>若:</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">op</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> len = </span><span style=\"color: #9CDCFE\">lg</span><span style=\"color: #D4D4D4\">[(r - l + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[op][l][len], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[op][r - (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; len) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][len]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>那么答案即为 $g(s, t, 1) - 4 \\times h_s - h_t + 2 \\times (g(s, t, 3) + g(s, t, 2))$。</p>\n<p>$l &gt;= r$ 也就差不多了。</p>\n<p>那就只放处理答案和 St 的部分代码了。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= </span><span style=\"color: #9CDCFE\">lg</span><span style=\"color: #D4D4D4\">[n]; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; j) - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][i][j] = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][i][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][(i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; (j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)))][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">][i][j] = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">][i][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">][(i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; (j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)))][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">][i][j] = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">][i][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">][(i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; (j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)))][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (q--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; s &gt;&gt; t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> s1 = s, t1 = t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (t &lt; s) </span><span style=\"color: #DCDCAA\">swap</span><span style=\"color: #D4D4D4\">(s, t);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; </span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(s, t, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) - </span><span style=\"color: #B5CEA8\">4LL</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #9CDCFE\">h</span><span style=\"color: #D4D4D4\">[s1] - </span><span style=\"color: #9CDCFE\">h</span><span style=\"color: #D4D4D4\">[t1] + </span><span style=\"color: #B5CEA8\">2LL</span><span style=\"color: #D4D4D4\"> * (</span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(s, t, </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) + </span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(s, t, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">)) &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>注意开 long long。</p>\n<h2 id=\"CF543B\"><a href=\"#CF543B\" class=\"headerlink\" title=\"CF543B\"></a><a href=\"https://www.luogu.com.cn/problem/CF543B\">CF543B</a></h2><p>我们先设 $dis[i][j]$ 表示从 $i$ 到 $j$ 的路径长度，因为每条边权均为 $1$ 所以跑 $n$ 遍 BFS 就出来了。</p>\n<p>首先考虑没两条最短路没重叠的情况。显而易见，答案为 $m - dis[s1][t1] - dis[s2][t2]$。</p>\n<p>再思考有重叠。我们可以枚举重叠的部分，只用枚举重叠部分两端的端点，设为 $i$ 与 $j$。那么，此时答案分两种情况：</p>\n<script type=\"math/tex; mode=display\">m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][i] + dis[j][t2])</script><script type=\"math/tex; mode=display\">m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][j] + dis[i][t2])</script><p>但是，我们需要判断最短路是否合法。可以自己画图理解一下。</p>\n<p>最终答案就是在上面两者取最小值。</p>\n<p>主代码：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) </span><span style=\"color: #DCDCAA\">BFS</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = -</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][t1] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][t2] + m;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t1] &lt;= l1 &amp;&amp; </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2] &lt;= l2)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           ans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, m - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][i] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t1] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][t1] &lt;= l1 &amp;&amp; </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2] &lt;= l2) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           ans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, m - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][j] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][t1] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][t1] &gt; l1 || </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][t2] &gt; l2) cout &lt;&lt; -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> cout &lt;&lt; ans;</span></span></code></pre></div></div></figure>\n","excerpt":"","more":"<h2 id=\"P7974\"><a href=\"#P7974\" class=\"headerlink\" title=\"P7974\"></a><a href=\"https://www.luogu.com.cn/problem/P7974\">P7974</a></h2><p><strong>注意</strong>：花费只跟行有关。</p>\n<p>简单的，我们一定是先上升，然后斜着到达 $[l,r]$ 中最大的 $h_i$ 然后平着走一段，斜着向下，最后垂直向下到达 $r$。</p>\n<p>如下图：</p>\n<p><img src=\"https://images.cnblogs.com/cnblogs_com/blogs/807386/galleries/2357156/o_231108054412_11%20%E6%9C%88%E6%9D%82%E9%A2%98%E8%AE%B01.png\" alt=\"图片走丢力（悲\"></p>\n<p>我们可以证明这样是正确的。</p>\n<p>问题就在于如何看上升了多少。</p>\n<p>可以推出是 $\\max(h_i - (h_l + (i - l)))$。拆一下就是 $\\max(h_i - i) - (h_l - l)$。碍于篇幅，就不详细讲了<del>就是懒得写了，没时间（逃</del>。</p>\n<p>同理 $r$ 就是维护 $\\max(h_i + i)$。</p>\n<p>这就是相当于维护三个 St 表。</p>\n<p>若:</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">op</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> len = </span><span style=\"color: #9CDCFE\">lg</span><span style=\"color: #D4D4D4\">[(r - l + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[op][l][len], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[op][r - (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; len) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][len]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>那么答案即为 $g(s, t, 1) - 4 \\times h_s - h_t + 2 \\times (g(s, t, 3) + g(s, t, 2))$。</p>\n<p>$l &gt;= r$ 也就差不多了。</p>\n<p>那就只放处理答案和 St 的部分代码了。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= </span><span style=\"color: #9CDCFE\">lg</span><span style=\"color: #D4D4D4\">[n]; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; j) - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][i][j] = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][i][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">][(i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; (j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)))][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">][i][j] = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">][i][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">][(i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; (j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)))][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">][i][j] = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">][i][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">][(i + (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; (j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)))][j - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (q--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; s &gt;&gt; t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> s1 = s, t1 = t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (t &lt; s) </span><span style=\"color: #DCDCAA\">swap</span><span style=\"color: #D4D4D4\">(s, t);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; </span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(s, t, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) - </span><span style=\"color: #B5CEA8\">4LL</span><span style=\"color: #D4D4D4\"> * </span><span style=\"color: #9CDCFE\">h</span><span style=\"color: #D4D4D4\">[s1] - </span><span style=\"color: #9CDCFE\">h</span><span style=\"color: #D4D4D4\">[t1] + </span><span style=\"color: #B5CEA8\">2LL</span><span style=\"color: #D4D4D4\"> * (</span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(s, t, </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) + </span><span style=\"color: #DCDCAA\">g</span><span style=\"color: #D4D4D4\">(s, t, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">)) &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>注意开 long long。</p>\n<h2 id=\"CF543B\"><a href=\"#CF543B\" class=\"headerlink\" title=\"CF543B\"></a><a href=\"https://www.luogu.com.cn/problem/CF543B\">CF543B</a></h2><p>我们先设 $dis[i][j]$ 表示从 $i$ 到 $j$ 的路径长度，因为每条边权均为 $1$ 所以跑 $n$ 遍 BFS 就出来了。</p>\n<p>首先考虑没两条最短路没重叠的情况。显而易见，答案为 $m - dis[s1][t1] - dis[s2][t2]$。</p>\n<p>再思考有重叠。我们可以枚举重叠的部分，只用枚举重叠部分两端的端点，设为 $i$ 与 $j$。那么，此时答案分两种情况：</p>\n<script type=\"math/tex; mode=display\">m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][i] + dis[j][t2])</script><script type=\"math/tex; mode=display\">m - (dis[i][j] + dis[s1][i] + dis[j][t1] + dis[s2][j] + dis[i][t2])</script><p>但是，我们需要判断最短路是否合法。可以自己画图理解一下。</p>\n<p>最终答案就是在上面两者取最小值。</p>\n<p>主代码：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) </span><span style=\"color: #DCDCAA\">BFS</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = -</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][t1] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][t2] + m;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t1] &lt;= l1 &amp;&amp; </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2] &lt;= l2)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           ans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, m - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][i] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t1] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][t1] &lt;= l1 &amp;&amp; </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] + </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2] &lt;= l2) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">           ans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, m - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][j] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][j] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[i][t1] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][i] - </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[j][t2]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s1][t1] &gt; l1 || </span><span style=\"color: #9CDCFE\">dis</span><span style=\"color: #D4D4D4\">[s2][t2] &gt; l2) cout &lt;&lt; -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> cout &lt;&lt; ans;</span></span></code></pre></div></div></figure>\n"},{"title":"2024 3月杂题记","cover":"https://lucky-cloud09.github.io/img/b7.jpg","date":"2024-02-29T16:00:00.000Z","_content":"\n\n过了几个月，又回来了，3.7 之前的懒得补了。\n\n## 3.7\n\n### P2487 [SDOI2011] 拦截导弹\n\n最近在学 CDQ。花了我好久调试。\n\nCDQ 优化 DP 模板。\n\n将转移条件转化成三维偏序。在 CDQ 中求。至于每个点在最长的二维最长升子序列的出现次数，多开一个数组 $f[0/1][i]$ 存，转移还是使用树状数组顺带做了。$0/1$，表示以此点为开头或结尾。\n\n最后如果 $dp[0][i] + dp[1][i] = len + 1$ 则这个点答案为 $f[0][i] * f[1][i] / sum$。\n\n\n### P3834 可持久化线段树 2\n\n顺带用整体二分做了一个板子题。感觉这个算法好 NB。\n\n### P4093 [HEOI2016/TJOI2016] 序列\n\n一开始连题都看错了。~~描述不清的题面，SM 的出题人。~~或许是我是个 SB。\n\n开了题解才明白题目。~~是我大意了。~~\n\n也是一道很板的 CDQ 优化 DP。但以后一定要注意，转移时是 `dp[a[i].id]` 而不是 `dp[i]`。（-1h。\n\n### P3364 Cool loves touli\n\n板子 +1。\n\n注意开 `long long`，然后再离散化。树状数组与离散化数组大小开 $3 \\times N$。我在这里 WA 了一发。\n\n### P4390 [BalkanOI2007] Mokia 摩基亚\n\n简单板子。将查询分为四个点每次求 0,0 到 x,y 的一个矩形中的总权值。\n\n相当于求 $x_i \\le x_j \\land y_i \\le y_j \\land t_i \\le t_j$ 的 $a_i$ 总和。三维偏序，可以使用 CDQ 维护它。\n\n注意树状数组上界一定要开大，不然会少加上数！\n\n## 3.8\n\n### CF1045G AI robots\n\n完蛋，板子题做多了，脑袋不灵了。。。\n\n在处理中间部分时利用尺取法维护能满足智商条件的 bot。\n\n先按 $r$，再按 $q$ 排。\n\n注意离散化和数组大小。\n\n### P3769 [CH弱省胡策R2] TATT\n\n四维偏序板子。CDQ 套 CDQ 套 树状数组即可。\n\n每一个均维护一种偏序。最外层其实也有排序保证。\n\n## 3.11\n\n### P3527 [POI2011] MET-Meteors\n\n整体二分板子。尽量不要下传数组。还有要将目前的空间站离散。\n\n### P4870 [BalticOI 2009 Day1] 甲虫\n\n区间 DP。设 $f[i][j][0/1]$ 表示，$i\\sim j$ 全吃，当前在左/右。随便转移一下即可。\n\n### P4158 [SCOI2009] 粉刷匠\n\n要预处理出每一块木板用不同次粉刷最多粉刷多少。\n\n$$f[i][j][k] = \\max(f[i][j][k], f[i][l][k - 1] + \\max(sum[i][j] - sum[i][l], j - l - sum[i][j] + sum[i][l]));$$\n\n$sum$ 存颜色的前缀和。\n\n$dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + f[i][m][k]);$。前 $i$ 个板刷 $j$ 次。\n\n### P3174 [HAOI2009] 毛毛虫\n\n简单去处理当前最大的毛毛虫与次大的毛毛虫，并简单的将他们两个合并。\n\n### P1131 [ZJOI2007] 时态同步\n\n找到当前子树最深的一个点。并使其他的叶子节点的深度与他相同，再计算贡献即可。\n\n### P1272 重建道路\n\n利用树上的背包去做即可。\n\n$$f[x][s] = min(f[x][s] + 1, f[x][s - sy] + f[y][sy]);$$\n\n$f$ 表示在 $x$ 的子树中留下 $s$ 个点的最少操作次数。\n\n最后对所有 $f[i][p]$ 取 $min$ 就行。\n\n### P3554 [POI2013] LUK-Triumphal arch\n\n二分答案。利用树形 DP check 就可。\n\n$f[i]$ 表示在 $i$ 的子树中还需从上面的节点借的个数。\n\n### P6419 [COCI2014-2015#1] Kamp\n\n换根 DP。先去处理出以 $1$ 为根。然后再计算其他的即可。答案为送完所有人走回根的答案减去含家的最长链即可。\n\n\n## 3.12\n\n### P4657 [CEOI2017] Chase\n\n做了有两天了。还是得开题解。其实就是换根 DP。\n\n考虑在当前节点放一个磁铁。那么贡献即为 $\\sum f_{son_x}$。\n\n$dp[x][i][1] = dp[x][i - 1][0] + sum[x]$。$dp[x][i][0] = \\max(dp[son_x][i][0])$。\n\n同时记录下儿子节点答案的最大值与次大值。\n\n在换根时，套路的去做就可以了（如果他是父亲的最大值，就次大值更新此类）。\n\n### P2495 [SDOI2011] 消耗战\n\n使用虚树，再进行 DP 即可。\n\n### P2986 [USACO10MAR] Great Cow Gathering G\n\n换根 DP 板子。很容易想到，根作为聚集点。那么，我们先处理 $f[1]$。\n\n$$f[1] = \\sum_{1 < y \\le n} dep[y] * c[y]$$\n\n顺便处理 $sum_i$ 表示 $i$ 为根的子树内的牛数。\n\n答案 $f[y] = f[x] + (sum[1] - sum[y]) \\times w - sum[y] \\times w;$。$w$ 为边权。\n\n答案在 $f$ 中取 $\\min$ 即可。\n\n\n## 3.13\n\n### P5665 [CSP-S2019] 划分\n\n简单题，不知道为什么是紫。自然想到段数越多越好，也是最后一段越短越好。至于题面，很容易就想到 DP 了吧。\n\n我们就只需要维护一个单调队列即可，注意要保存上一个转移而来的数。\n\n## 3.14\n\n### P7424 [THUPC2017] 天天爱射击\n\n与这道题有点像：P3527 [POI2011] MET-Meteors。\n\n就按照这么做即可。\n\n### P1527 [国家集训队] 矩阵乘法\n\n矩阵中的第 K 小。将一维第 K 小的树状数组换成二维树状数组，求前缀和变为求二维前缀和即可。\n\n### P2839 [国家集训队] middle\n\n二分 + 主席树板子。\n\n二分 $mid$ 为中位数。$> mid$ 的标为 $1$，否则标为 $-1$。\n\n建立主席树进行维护区间和，若和 $\\ge 0$ 则 $mid$ 可以尝试变得更大。\n\n考虑左右端点，那么对于 $a\\sim b$ 我们要找到最大后缀和，$c\\sim d$ 找到最大前缀和。\n\n相加判断即可。\n\n### P3899 [湖南集训] 更为厉害\n\n线段树合并。考虑对每一个点建一个线段树，其中以深度为下标。\n\n分析可得 $a,b$ 存在祖先关系。\n\n$a,b$ 分为两种情况：\n\n1. $a$ 在 $b$ 上。\n1. $a$ 在 $b$ 下。\n\n$a$ 在 $b$ 上 simple 求。\n\n$a$ 在 $b$ 下就在线段树中找到符合条件的 $b$，当 $b$ 确定后，$c$ 就有 $b$ 的子树大小减一中可能。\n\n最后两种情况答案相加即可。\n\n## 3.15\n\n### P8028 [COCI2021-2022#3] Cijanobakterije\n\n模拟赛 T1。\n\n刚开题发现就是求若干个树的直径总和。\n\n写了半个小时发现自己不会写 DP。（汗\n\n于是打了两次 BFS。\n\n### P9032 [COCI2022-2023#1] Neboderi\n\n模拟赛 T2。\n\n赛时差点没做出来，后面又因为常数大了，T 掉了。（汗\n\n利用倍增求一段区间的 gcd。\n\n贪心地。很明显，固定 $r$，$l \\sim r$ 的 gcd 单调不减。那么我们肯定是去第一次出现一个 gcd 的区间求值。\n\n### P8313 [COCI2021-2022#4] Izbori\n\n模拟赛 T3。\n\n说实话，很妙。\n\n根据简单地推导，满足 $2\\times S_i - i > 2 \\times S_j - j$ 的 $i$ 与 $j$ 即可有一个区间，其中 $S$ 为某种颜色出现的次数和。\n\n很容易想到拿一个数据结构去维护。选择树状数组，但由于 $2\\times S_i - i$ 可能为负，所以要加一个偏移量。\n\n我们将 $2\\times S_i - i$ 称为 $C_i$。\n\n手玩一下容易发现：对于一种颜色在前缀中的 $C_i$ 在没有遇到相同颜色时，$C_i = C_{i - 1} - 1$ 否则 $C_i = C_{i - 1} + 1$。\n\n那么我们枚举同一种颜色，相邻的可以视为一个区间，我们考虑计算与加上一个区间的贡献。\n\n可以推出一个区间的贡献可以通过求每个 $C_i$ 贡献的前缀和再相减的方式求出。\n\n用树状数组维护，我们支持加上区间的贡献，区间修改。再询问——单点查询。\n\n那么再将所有区间贡献相加，即为答案。\n\n## 3.28\n\n### C0504 C 距离之和\n\n> 题目大意：给一棵树。每次操作可以删一条边并再加一条边。求使的每个点到其余点距离之和在当前这棵树最小的最少操作次数。\n\n点到其余点距离之和在当前这棵树最小，明显就是要使这个点成为一个中心。\n\n我们先求出初始的重心 $rt$。\n\n因为重心的每一棵子树大小 $\\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor $。\n\n那么我们假设考虑到一个点 $u$，并且我们再定义 $b_u$ 为距离 $u$ 最近的 $rt$ 的儿子（包括 $u$），我们可以得到 $siz_u \\le siz_{b_u} \\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor$，$siz_i$ 是在以 $rt$ 为根的树中 $i$ 为根的子树大小。\n\n我们将点 $u$ 视为当前的根节点，那么除了它在原树中的子树，还有一个大小为 $n - siz_u$ 的子树。\n\n因为 $siz_u \\le \\left\\lfloor\\frac{n}{2}\\right\\rfloor$ 所以 $n - siz_u \\ge \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，我们就要去调整它的大小。\n\n我们选择叫 $n - siz_u$ 这棵子树为大子树。\n\n我们设 $now = n - siz_u - \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，这个就是要从大子树中至少要减去子树的大小的下界。\n\n我们要减的子树一定是以 $rt$ 儿子为根的子树，我们可以减去 $rt$ 到它儿子的边，然后可以连向 $u$。\n\n当然 $b_u$ 为根的子树大小要变为 $size_{b_u} - siz_u$。\n\n我们考虑将他们加入一个数据结构，并找到子树大小的和刚好大于等于 $now$ 的最小个数。\n\n在这里我选择使用权值树状数组 + 二分。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read() {\n\tint res = 0, f = 1; char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tres = (res << 1) + (res << 3) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn f == 1 ? res : -res;\n}\nconst int N = 1e6 + 5;\nint n, root, siz[N];\nint b[N], ans[N], sum1[N], sum2[N];\nvector<int> g[N];\n\nvoid get_rt(int x, int fa) {\n\tsiz[x] = 1;\n\tbool flag = 1;\n\tfor (int y : g[x]) {\n\t\tif (y == fa) continue;\n\t\tget_rt(y, x);\n\t\tif (siz[y] > n / 2) flag = 0;\n\t\tsiz[x] += siz[y];\n\t}\n\tif (n - siz[x] > n / 2) flag = 0;\n\tif (flag) root = x;\n}\n\n//void build(in)\n\nvoid dfs1(int x, int fa, int tag) {\n\tb[x] = tag;\n\tsiz[x] = 1;\n\tfor (int y : g[x]) {\n\t\tif (y == fa) continue;\n\t\tdfs1(y, x, tag);\n\t\tsiz[x] += siz[y];\n\t}\n}\n\nvoid upd(int x, int v1, int v2) {\n\tx++;\n\tfor (; x <= n + 1; x += x & -x) \n\t\tsum1[x] += v1, sum2[x] += v2;\n}\n\nint ask1(int x) {\n\tx++;\n\tint res = 0;\n\tfor (; x; x -= x & -x)\n\t\tres += sum2[x];\n\treturn res;\n}\nint ask(int x) {\n\tx++;\n\tint res = 0;\n\tfor (; x; x -= x & -x)\n\t\tres += sum1[x];\n\treturn res;\n}\n\nint getans(int x) {\n\tupd(siz[b[x]], -siz[b[x]], -1);\n\tupd(siz[b[x]] - siz[x], siz[b[x]] - siz[x], 1);\n\tint now = (n - siz[x] - (n >> 1));\n\tif (now <= 0 && siz[x] <= (n >> 1)) return 0;\n\tint l = 1, r = n, res = 0, all = ask(n);\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (all - ask(mid - 1) >= now) l = mid + 1, res = mid;\n\t\telse r = mid - 1;\n\t}\n\tint a1 = ask(res);\n\tint t = now - (all - a1);\n\tint t1 = (t - 1) / res + 1;\n//\tcout << b[x] << ' '<< x << ' ' << res << ' ' << now << ' ' << ask(n) - ask(res - 1) << ' ';\n\n\tres = t1 + ask1(n) - ask1(res);\n\t\n\tupd(siz[b[x]], siz[b[x]], 1);\n\tupd(siz[b[x]] - siz[x], - siz[b[x]] + siz[x], -1);\n\treturn res;\n}\n\nint main() {\n\tn = read();\n\tfor (int i = 1; i < n; ++i) {\n\t\tint u = read(), v = read();\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n//\tputs(\"\");\n\tget_rt(1, 0);\n\tfor (int x : g[root]) dfs1(x, root, x);\n\t\n\tfor (int x : g[root]) \n\t\tupd(siz[x], siz[x], 1);\n\t\n\tfor (int i = 1; i <= n; ++i) \n\t\tif (i != root) \n\t\t\tans[i] = getans(i);\n\tfor (int i = 1; i <= n; ++i) cout << ans[i] << '\\n';\n\treturn 0;\n}\n\n\n```","source":"_posts/2024_3_problems.md","raw":"---\ntitle: 2024 3月杂题记\ncover: https://lucky-cloud09.github.io/img/b7.jpg\ncategories: 杂题\ndate: 2024/3\n---\n\n\n过了几个月，又回来了，3.7 之前的懒得补了。\n\n## 3.7\n\n### P2487 [SDOI2011] 拦截导弹\n\n最近在学 CDQ。花了我好久调试。\n\nCDQ 优化 DP 模板。\n\n将转移条件转化成三维偏序。在 CDQ 中求。至于每个点在最长的二维最长升子序列的出现次数，多开一个数组 $f[0/1][i]$ 存，转移还是使用树状数组顺带做了。$0/1$，表示以此点为开头或结尾。\n\n最后如果 $dp[0][i] + dp[1][i] = len + 1$ 则这个点答案为 $f[0][i] * f[1][i] / sum$。\n\n\n### P3834 可持久化线段树 2\n\n顺带用整体二分做了一个板子题。感觉这个算法好 NB。\n\n### P4093 [HEOI2016/TJOI2016] 序列\n\n一开始连题都看错了。~~描述不清的题面，SM 的出题人。~~或许是我是个 SB。\n\n开了题解才明白题目。~~是我大意了。~~\n\n也是一道很板的 CDQ 优化 DP。但以后一定要注意，转移时是 `dp[a[i].id]` 而不是 `dp[i]`。（-1h。\n\n### P3364 Cool loves touli\n\n板子 +1。\n\n注意开 `long long`，然后再离散化。树状数组与离散化数组大小开 $3 \\times N$。我在这里 WA 了一发。\n\n### P4390 [BalkanOI2007] Mokia 摩基亚\n\n简单板子。将查询分为四个点每次求 0,0 到 x,y 的一个矩形中的总权值。\n\n相当于求 $x_i \\le x_j \\land y_i \\le y_j \\land t_i \\le t_j$ 的 $a_i$ 总和。三维偏序，可以使用 CDQ 维护它。\n\n注意树状数组上界一定要开大，不然会少加上数！\n\n## 3.8\n\n### CF1045G AI robots\n\n完蛋，板子题做多了，脑袋不灵了。。。\n\n在处理中间部分时利用尺取法维护能满足智商条件的 bot。\n\n先按 $r$，再按 $q$ 排。\n\n注意离散化和数组大小。\n\n### P3769 [CH弱省胡策R2] TATT\n\n四维偏序板子。CDQ 套 CDQ 套 树状数组即可。\n\n每一个均维护一种偏序。最外层其实也有排序保证。\n\n## 3.11\n\n### P3527 [POI2011] MET-Meteors\n\n整体二分板子。尽量不要下传数组。还有要将目前的空间站离散。\n\n### P4870 [BalticOI 2009 Day1] 甲虫\n\n区间 DP。设 $f[i][j][0/1]$ 表示，$i\\sim j$ 全吃，当前在左/右。随便转移一下即可。\n\n### P4158 [SCOI2009] 粉刷匠\n\n要预处理出每一块木板用不同次粉刷最多粉刷多少。\n\n$$f[i][j][k] = \\max(f[i][j][k], f[i][l][k - 1] + \\max(sum[i][j] - sum[i][l], j - l - sum[i][j] + sum[i][l]));$$\n\n$sum$ 存颜色的前缀和。\n\n$dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + f[i][m][k]);$。前 $i$ 个板刷 $j$ 次。\n\n### P3174 [HAOI2009] 毛毛虫\n\n简单去处理当前最大的毛毛虫与次大的毛毛虫，并简单的将他们两个合并。\n\n### P1131 [ZJOI2007] 时态同步\n\n找到当前子树最深的一个点。并使其他的叶子节点的深度与他相同，再计算贡献即可。\n\n### P1272 重建道路\n\n利用树上的背包去做即可。\n\n$$f[x][s] = min(f[x][s] + 1, f[x][s - sy] + f[y][sy]);$$\n\n$f$ 表示在 $x$ 的子树中留下 $s$ 个点的最少操作次数。\n\n最后对所有 $f[i][p]$ 取 $min$ 就行。\n\n### P3554 [POI2013] LUK-Triumphal arch\n\n二分答案。利用树形 DP check 就可。\n\n$f[i]$ 表示在 $i$ 的子树中还需从上面的节点借的个数。\n\n### P6419 [COCI2014-2015#1] Kamp\n\n换根 DP。先去处理出以 $1$ 为根。然后再计算其他的即可。答案为送完所有人走回根的答案减去含家的最长链即可。\n\n\n## 3.12\n\n### P4657 [CEOI2017] Chase\n\n做了有两天了。还是得开题解。其实就是换根 DP。\n\n考虑在当前节点放一个磁铁。那么贡献即为 $\\sum f_{son_x}$。\n\n$dp[x][i][1] = dp[x][i - 1][0] + sum[x]$。$dp[x][i][0] = \\max(dp[son_x][i][0])$。\n\n同时记录下儿子节点答案的最大值与次大值。\n\n在换根时，套路的去做就可以了（如果他是父亲的最大值，就次大值更新此类）。\n\n### P2495 [SDOI2011] 消耗战\n\n使用虚树，再进行 DP 即可。\n\n### P2986 [USACO10MAR] Great Cow Gathering G\n\n换根 DP 板子。很容易想到，根作为聚集点。那么，我们先处理 $f[1]$。\n\n$$f[1] = \\sum_{1 < y \\le n} dep[y] * c[y]$$\n\n顺便处理 $sum_i$ 表示 $i$ 为根的子树内的牛数。\n\n答案 $f[y] = f[x] + (sum[1] - sum[y]) \\times w - sum[y] \\times w;$。$w$ 为边权。\n\n答案在 $f$ 中取 $\\min$ 即可。\n\n\n## 3.13\n\n### P5665 [CSP-S2019] 划分\n\n简单题，不知道为什么是紫。自然想到段数越多越好，也是最后一段越短越好。至于题面，很容易就想到 DP 了吧。\n\n我们就只需要维护一个单调队列即可，注意要保存上一个转移而来的数。\n\n## 3.14\n\n### P7424 [THUPC2017] 天天爱射击\n\n与这道题有点像：P3527 [POI2011] MET-Meteors。\n\n就按照这么做即可。\n\n### P1527 [国家集训队] 矩阵乘法\n\n矩阵中的第 K 小。将一维第 K 小的树状数组换成二维树状数组，求前缀和变为求二维前缀和即可。\n\n### P2839 [国家集训队] middle\n\n二分 + 主席树板子。\n\n二分 $mid$ 为中位数。$> mid$ 的标为 $1$，否则标为 $-1$。\n\n建立主席树进行维护区间和，若和 $\\ge 0$ 则 $mid$ 可以尝试变得更大。\n\n考虑左右端点，那么对于 $a\\sim b$ 我们要找到最大后缀和，$c\\sim d$ 找到最大前缀和。\n\n相加判断即可。\n\n### P3899 [湖南集训] 更为厉害\n\n线段树合并。考虑对每一个点建一个线段树，其中以深度为下标。\n\n分析可得 $a,b$ 存在祖先关系。\n\n$a,b$ 分为两种情况：\n\n1. $a$ 在 $b$ 上。\n1. $a$ 在 $b$ 下。\n\n$a$ 在 $b$ 上 simple 求。\n\n$a$ 在 $b$ 下就在线段树中找到符合条件的 $b$，当 $b$ 确定后，$c$ 就有 $b$ 的子树大小减一中可能。\n\n最后两种情况答案相加即可。\n\n## 3.15\n\n### P8028 [COCI2021-2022#3] Cijanobakterije\n\n模拟赛 T1。\n\n刚开题发现就是求若干个树的直径总和。\n\n写了半个小时发现自己不会写 DP。（汗\n\n于是打了两次 BFS。\n\n### P9032 [COCI2022-2023#1] Neboderi\n\n模拟赛 T2。\n\n赛时差点没做出来，后面又因为常数大了，T 掉了。（汗\n\n利用倍增求一段区间的 gcd。\n\n贪心地。很明显，固定 $r$，$l \\sim r$ 的 gcd 单调不减。那么我们肯定是去第一次出现一个 gcd 的区间求值。\n\n### P8313 [COCI2021-2022#4] Izbori\n\n模拟赛 T3。\n\n说实话，很妙。\n\n根据简单地推导，满足 $2\\times S_i - i > 2 \\times S_j - j$ 的 $i$ 与 $j$ 即可有一个区间，其中 $S$ 为某种颜色出现的次数和。\n\n很容易想到拿一个数据结构去维护。选择树状数组，但由于 $2\\times S_i - i$ 可能为负，所以要加一个偏移量。\n\n我们将 $2\\times S_i - i$ 称为 $C_i$。\n\n手玩一下容易发现：对于一种颜色在前缀中的 $C_i$ 在没有遇到相同颜色时，$C_i = C_{i - 1} - 1$ 否则 $C_i = C_{i - 1} + 1$。\n\n那么我们枚举同一种颜色，相邻的可以视为一个区间，我们考虑计算与加上一个区间的贡献。\n\n可以推出一个区间的贡献可以通过求每个 $C_i$ 贡献的前缀和再相减的方式求出。\n\n用树状数组维护，我们支持加上区间的贡献，区间修改。再询问——单点查询。\n\n那么再将所有区间贡献相加，即为答案。\n\n## 3.28\n\n### C0504 C 距离之和\n\n> 题目大意：给一棵树。每次操作可以删一条边并再加一条边。求使的每个点到其余点距离之和在当前这棵树最小的最少操作次数。\n\n点到其余点距离之和在当前这棵树最小，明显就是要使这个点成为一个中心。\n\n我们先求出初始的重心 $rt$。\n\n因为重心的每一棵子树大小 $\\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor $。\n\n那么我们假设考虑到一个点 $u$，并且我们再定义 $b_u$ 为距离 $u$ 最近的 $rt$ 的儿子（包括 $u$），我们可以得到 $siz_u \\le siz_{b_u} \\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor$，$siz_i$ 是在以 $rt$ 为根的树中 $i$ 为根的子树大小。\n\n我们将点 $u$ 视为当前的根节点，那么除了它在原树中的子树，还有一个大小为 $n - siz_u$ 的子树。\n\n因为 $siz_u \\le \\left\\lfloor\\frac{n}{2}\\right\\rfloor$ 所以 $n - siz_u \\ge \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，我们就要去调整它的大小。\n\n我们选择叫 $n - siz_u$ 这棵子树为大子树。\n\n我们设 $now = n - siz_u - \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，这个就是要从大子树中至少要减去子树的大小的下界。\n\n我们要减的子树一定是以 $rt$ 儿子为根的子树，我们可以减去 $rt$ 到它儿子的边，然后可以连向 $u$。\n\n当然 $b_u$ 为根的子树大小要变为 $size_{b_u} - siz_u$。\n\n我们考虑将他们加入一个数据结构，并找到子树大小的和刚好大于等于 $now$ 的最小个数。\n\n在这里我选择使用权值树状数组 + 二分。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read() {\n\tint res = 0, f = 1; char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tres = (res << 1) + (res << 3) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn f == 1 ? res : -res;\n}\nconst int N = 1e6 + 5;\nint n, root, siz[N];\nint b[N], ans[N], sum1[N], sum2[N];\nvector<int> g[N];\n\nvoid get_rt(int x, int fa) {\n\tsiz[x] = 1;\n\tbool flag = 1;\n\tfor (int y : g[x]) {\n\t\tif (y == fa) continue;\n\t\tget_rt(y, x);\n\t\tif (siz[y] > n / 2) flag = 0;\n\t\tsiz[x] += siz[y];\n\t}\n\tif (n - siz[x] > n / 2) flag = 0;\n\tif (flag) root = x;\n}\n\n//void build(in)\n\nvoid dfs1(int x, int fa, int tag) {\n\tb[x] = tag;\n\tsiz[x] = 1;\n\tfor (int y : g[x]) {\n\t\tif (y == fa) continue;\n\t\tdfs1(y, x, tag);\n\t\tsiz[x] += siz[y];\n\t}\n}\n\nvoid upd(int x, int v1, int v2) {\n\tx++;\n\tfor (; x <= n + 1; x += x & -x) \n\t\tsum1[x] += v1, sum2[x] += v2;\n}\n\nint ask1(int x) {\n\tx++;\n\tint res = 0;\n\tfor (; x; x -= x & -x)\n\t\tres += sum2[x];\n\treturn res;\n}\nint ask(int x) {\n\tx++;\n\tint res = 0;\n\tfor (; x; x -= x & -x)\n\t\tres += sum1[x];\n\treturn res;\n}\n\nint getans(int x) {\n\tupd(siz[b[x]], -siz[b[x]], -1);\n\tupd(siz[b[x]] - siz[x], siz[b[x]] - siz[x], 1);\n\tint now = (n - siz[x] - (n >> 1));\n\tif (now <= 0 && siz[x] <= (n >> 1)) return 0;\n\tint l = 1, r = n, res = 0, all = ask(n);\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (all - ask(mid - 1) >= now) l = mid + 1, res = mid;\n\t\telse r = mid - 1;\n\t}\n\tint a1 = ask(res);\n\tint t = now - (all - a1);\n\tint t1 = (t - 1) / res + 1;\n//\tcout << b[x] << ' '<< x << ' ' << res << ' ' << now << ' ' << ask(n) - ask(res - 1) << ' ';\n\n\tres = t1 + ask1(n) - ask1(res);\n\t\n\tupd(siz[b[x]], siz[b[x]], 1);\n\tupd(siz[b[x]] - siz[x], - siz[b[x]] + siz[x], -1);\n\treturn res;\n}\n\nint main() {\n\tn = read();\n\tfor (int i = 1; i < n; ++i) {\n\t\tint u = read(), v = read();\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n//\tputs(\"\");\n\tget_rt(1, 0);\n\tfor (int x : g[root]) dfs1(x, root, x);\n\t\n\tfor (int x : g[root]) \n\t\tupd(siz[x], siz[x], 1);\n\t\n\tfor (int i = 1; i <= n; ++i) \n\t\tif (i != root) \n\t\t\tans[i] = getans(i);\n\tfor (int i = 1; i <= n; ++i) cout << ans[i] << '\\n';\n\treturn 0;\n}\n\n\n```","slug":"2024_3_problems","published":1,"updated":"2024-08-28T00:09:53.158Z","_id":"cm0cfoqfq0005358kdqb0hmtr","comments":1,"layout":"post","photos":[],"content":"<p>过了几个月，又回来了，3.7 之前的懒得补了。</p>\n<h2 id=\"3-7\"><a href=\"#3-7\" class=\"headerlink\" title=\"3.7\"></a>3.7</h2><h3 id=\"P2487-SDOI2011-拦截导弹\"><a href=\"#P2487-SDOI2011-拦截导弹\" class=\"headerlink\" title=\"P2487 [SDOI2011] 拦截导弹\"></a>P2487 [SDOI2011] 拦截导弹</h3><p>最近在学 CDQ。花了我好久调试。</p>\n<p>CDQ 优化 DP 模板。</p>\n<p>将转移条件转化成三维偏序。在 CDQ 中求。至于每个点在最长的二维最长升子序列的出现次数，多开一个数组 $f[0/1][i]$ 存，转移还是使用树状数组顺带做了。$0/1$，表示以此点为开头或结尾。</p>\n<p>最后如果 $dp[0][i] + dp[1][i] = len + 1$ 则这个点答案为 $f[0][i] * f[1][i] / sum$。</p>\n<h3 id=\"P3834-可持久化线段树-2\"><a href=\"#P3834-可持久化线段树-2\" class=\"headerlink\" title=\"P3834 可持久化线段树 2\"></a>P3834 可持久化线段树 2</h3><p>顺带用整体二分做了一个板子题。感觉这个算法好 NB。</p>\n<h3 id=\"P4093-HEOI2016-TJOI2016-序列\"><a href=\"#P4093-HEOI2016-TJOI2016-序列\" class=\"headerlink\" title=\"P4093 [HEOI2016/TJOI2016] 序列\"></a>P4093 [HEOI2016/TJOI2016] 序列</h3><p>一开始连题都看错了。<del>描述不清的题面，SM 的出题人。</del>或许是我是个 SB。</p>\n<p>开了题解才明白题目。<del>是我大意了。</del></p>\n<p>也是一道很板的 CDQ 优化 DP。但以后一定要注意，转移时是 <code>dp[a[i].id]</code> 而不是 <code>dp[i]</code>。（-1h。</p>\n<h3 id=\"P3364-Cool-loves-touli\"><a href=\"#P3364-Cool-loves-touli\" class=\"headerlink\" title=\"P3364 Cool loves touli\"></a>P3364 Cool loves touli</h3><p>板子 +1。</p>\n<p>注意开 <code>long long</code>，然后再离散化。树状数组与离散化数组大小开 $3 \\times N$。我在这里 WA 了一发。</p>\n<h3 id=\"P4390-BalkanOI2007-Mokia-摩基亚\"><a href=\"#P4390-BalkanOI2007-Mokia-摩基亚\" class=\"headerlink\" title=\"P4390 [BalkanOI2007] Mokia 摩基亚\"></a>P4390 [BalkanOI2007] Mokia 摩基亚</h3><p>简单板子。将查询分为四个点每次求 0,0 到 x,y 的一个矩形中的总权值。</p>\n<p>相当于求 $x_i \\le x_j \\land y_i \\le y_j \\land t_i \\le t_j$ 的 $a_i$ 总和。三维偏序，可以使用 CDQ 维护它。</p>\n<p>注意树状数组上界一定要开大，不然会少加上数！</p>\n<h2 id=\"3-8\"><a href=\"#3-8\" class=\"headerlink\" title=\"3.8\"></a>3.8</h2><h3 id=\"CF1045G-AI-robots\"><a href=\"#CF1045G-AI-robots\" class=\"headerlink\" title=\"CF1045G AI robots\"></a>CF1045G AI robots</h3><p>完蛋，板子题做多了，脑袋不灵了。。。</p>\n<p>在处理中间部分时利用尺取法维护能满足智商条件的 bot。</p>\n<p>先按 $r$，再按 $q$ 排。</p>\n<p>注意离散化和数组大小。</p>\n<h3 id=\"P3769-CH弱省胡策R2-TATT\"><a href=\"#P3769-CH弱省胡策R2-TATT\" class=\"headerlink\" title=\"P3769 [CH弱省胡策R2] TATT\"></a>P3769 [CH弱省胡策R2] TATT</h3><p>四维偏序板子。CDQ 套 CDQ 套 树状数组即可。</p>\n<p>每一个均维护一种偏序。最外层其实也有排序保证。</p>\n<h2 id=\"3-11\"><a href=\"#3-11\" class=\"headerlink\" title=\"3.11\"></a>3.11</h2><h3 id=\"P3527-POI2011-MET-Meteors\"><a href=\"#P3527-POI2011-MET-Meteors\" class=\"headerlink\" title=\"P3527 [POI2011] MET-Meteors\"></a>P3527 [POI2011] MET-Meteors</h3><p>整体二分板子。尽量不要下传数组。还有要将目前的空间站离散。</p>\n<h3 id=\"P4870-BalticOI-2009-Day1-甲虫\"><a href=\"#P4870-BalticOI-2009-Day1-甲虫\" class=\"headerlink\" title=\"P4870 [BalticOI 2009 Day1] 甲虫\"></a>P4870 [BalticOI 2009 Day1] 甲虫</h3><p>区间 DP。设 $f[i][j][0/1]$ 表示，$i\\sim j$ 全吃，当前在左/右。随便转移一下即可。</p>\n<h3 id=\"P4158-SCOI2009-粉刷匠\"><a href=\"#P4158-SCOI2009-粉刷匠\" class=\"headerlink\" title=\"P4158 [SCOI2009] 粉刷匠\"></a>P4158 [SCOI2009] 粉刷匠</h3><p>要预处理出每一块木板用不同次粉刷最多粉刷多少。</p>\n<script type=\"math/tex; mode=display\">f[i][j][k] = \\max(f[i][j][k], f[i][l][k - 1] + \\max(sum[i][j] - sum[i][l], j - l - sum[i][j] + sum[i][l]));</script><p>$sum$ 存颜色的前缀和。</p>\n<p>$dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + f[i][m][k]);$。前 $i$ 个板刷 $j$ 次。</p>\n<h3 id=\"P3174-HAOI2009-毛毛虫\"><a href=\"#P3174-HAOI2009-毛毛虫\" class=\"headerlink\" title=\"P3174 [HAOI2009] 毛毛虫\"></a>P3174 [HAOI2009] 毛毛虫</h3><p>简单去处理当前最大的毛毛虫与次大的毛毛虫，并简单的将他们两个合并。</p>\n<h3 id=\"P1131-ZJOI2007-时态同步\"><a href=\"#P1131-ZJOI2007-时态同步\" class=\"headerlink\" title=\"P1131 [ZJOI2007] 时态同步\"></a>P1131 [ZJOI2007] 时态同步</h3><p>找到当前子树最深的一个点。并使其他的叶子节点的深度与他相同，再计算贡献即可。</p>\n<h3 id=\"P1272-重建道路\"><a href=\"#P1272-重建道路\" class=\"headerlink\" title=\"P1272 重建道路\"></a>P1272 重建道路</h3><p>利用树上的背包去做即可。</p>\n<script type=\"math/tex; mode=display\">f[x][s] = min(f[x][s] + 1, f[x][s - sy] + f[y][sy]);</script><p>$f$ 表示在 $x$ 的子树中留下 $s$ 个点的最少操作次数。</p>\n<p>最后对所有 $f[i][p]$ 取 $min$ 就行。</p>\n<h3 id=\"P3554-POI2013-LUK-Triumphal-arch\"><a href=\"#P3554-POI2013-LUK-Triumphal-arch\" class=\"headerlink\" title=\"P3554 [POI2013] LUK-Triumphal arch\"></a>P3554 [POI2013] LUK-Triumphal arch</h3><p>二分答案。利用树形 DP check 就可。</p>\n<p>$f[i]$ 表示在 $i$ 的子树中还需从上面的节点借的个数。</p>\n<h3 id=\"P6419-COCI2014-2015-1-Kamp\"><a href=\"#P6419-COCI2014-2015-1-Kamp\" class=\"headerlink\" title=\"P6419 [COCI2014-2015#1] Kamp\"></a>P6419 [COCI2014-2015#1] Kamp</h3><p>换根 DP。先去处理出以 $1$ 为根。然后再计算其他的即可。答案为送完所有人走回根的答案减去含家的最长链即可。</p>\n<h2 id=\"3-12\"><a href=\"#3-12\" class=\"headerlink\" title=\"3.12\"></a>3.12</h2><h3 id=\"P4657-CEOI2017-Chase\"><a href=\"#P4657-CEOI2017-Chase\" class=\"headerlink\" title=\"P4657 [CEOI2017] Chase\"></a>P4657 [CEOI2017] Chase</h3><p>做了有两天了。还是得开题解。其实就是换根 DP。</p>\n<p>考虑在当前节点放一个磁铁。那么贡献即为 $\\sum f_{son_x}$。</p>\n<p>$dp[x][i][1] = dp[x][i - 1][0] + sum[x]$。$dp[x][i][0] = \\max(dp[son_x][i][0])$。</p>\n<p>同时记录下儿子节点答案的最大值与次大值。</p>\n<p>在换根时，套路的去做就可以了（如果他是父亲的最大值，就次大值更新此类）。</p>\n<h3 id=\"P2495-SDOI2011-消耗战\"><a href=\"#P2495-SDOI2011-消耗战\" class=\"headerlink\" title=\"P2495 [SDOI2011] 消耗战\"></a>P2495 [SDOI2011] 消耗战</h3><p>使用虚树，再进行 DP 即可。</p>\n<h3 id=\"P2986-USACO10MAR-Great-Cow-Gathering-G\"><a href=\"#P2986-USACO10MAR-Great-Cow-Gathering-G\" class=\"headerlink\" title=\"P2986 [USACO10MAR] Great Cow Gathering G\"></a>P2986 [USACO10MAR] Great Cow Gathering G</h3><p>换根 DP 板子。很容易想到，根作为聚集点。那么，我们先处理 $f[1]$。</p>\n<script type=\"math/tex; mode=display\">f[1] = \\sum_{1 < y \\le n} dep[y] * c[y]</script><p>顺便处理 $sum_i$ 表示 $i$ 为根的子树内的牛数。</p>\n<p>答案 $f[y] = f[x] + (sum[1] - sum[y]) \\times w - sum[y] \\times w;$。$w$ 为边权。</p>\n<p>答案在 $f$ 中取 $\\min$ 即可。</p>\n<h2 id=\"3-13\"><a href=\"#3-13\" class=\"headerlink\" title=\"3.13\"></a>3.13</h2><h3 id=\"P5665-CSP-S2019-划分\"><a href=\"#P5665-CSP-S2019-划分\" class=\"headerlink\" title=\"P5665 [CSP-S2019] 划分\"></a>P5665 [CSP-S2019] 划分</h3><p>简单题，不知道为什么是紫。自然想到段数越多越好，也是最后一段越短越好。至于题面，很容易就想到 DP 了吧。</p>\n<p>我们就只需要维护一个单调队列即可，注意要保存上一个转移而来的数。</p>\n<h2 id=\"3-14\"><a href=\"#3-14\" class=\"headerlink\" title=\"3.14\"></a>3.14</h2><h3 id=\"P7424-THUPC2017-天天爱射击\"><a href=\"#P7424-THUPC2017-天天爱射击\" class=\"headerlink\" title=\"P7424 [THUPC2017] 天天爱射击\"></a>P7424 [THUPC2017] 天天爱射击</h3><p>与这道题有点像：P3527 [POI2011] MET-Meteors。</p>\n<p>就按照这么做即可。</p>\n<h3 id=\"P1527-国家集训队-矩阵乘法\"><a href=\"#P1527-国家集训队-矩阵乘法\" class=\"headerlink\" title=\"P1527 [国家集训队] 矩阵乘法\"></a>P1527 [国家集训队] 矩阵乘法</h3><p>矩阵中的第 K 小。将一维第 K 小的树状数组换成二维树状数组，求前缀和变为求二维前缀和即可。</p>\n<h3 id=\"P2839-国家集训队-middle\"><a href=\"#P2839-国家集训队-middle\" class=\"headerlink\" title=\"P2839 [国家集训队] middle\"></a>P2839 [国家集训队] middle</h3><p>二分 + 主席树板子。</p>\n<p>二分 $mid$ 为中位数。$&gt; mid$ 的标为 $1$，否则标为 $-1$。</p>\n<p>建立主席树进行维护区间和，若和 $\\ge 0$ 则 $mid$ 可以尝试变得更大。</p>\n<p>考虑左右端点，那么对于 $a\\sim b$ 我们要找到最大后缀和，$c\\sim d$ 找到最大前缀和。</p>\n<p>相加判断即可。</p>\n<h3 id=\"P3899-湖南集训-更为厉害\"><a href=\"#P3899-湖南集训-更为厉害\" class=\"headerlink\" title=\"P3899 [湖南集训] 更为厉害\"></a>P3899 [湖南集训] 更为厉害</h3><p>线段树合并。考虑对每一个点建一个线段树，其中以深度为下标。</p>\n<p>分析可得 $a,b$ 存在祖先关系。</p>\n<p>$a,b$ 分为两种情况：</p>\n<ol>\n<li>$a$ 在 $b$ 上。</li>\n<li>$a$ 在 $b$ 下。</li>\n</ol>\n<p>$a$ 在 $b$ 上 simple 求。</p>\n<p>$a$ 在 $b$ 下就在线段树中找到符合条件的 $b$，当 $b$ 确定后，$c$ 就有 $b$ 的子树大小减一中可能。</p>\n<p>最后两种情况答案相加即可。</p>\n<h2 id=\"3-15\"><a href=\"#3-15\" class=\"headerlink\" title=\"3.15\"></a>3.15</h2><h3 id=\"P8028-COCI2021-2022-3-Cijanobakterije\"><a href=\"#P8028-COCI2021-2022-3-Cijanobakterije\" class=\"headerlink\" title=\"P8028 [COCI2021-2022#3] Cijanobakterije\"></a>P8028 [COCI2021-2022#3] Cijanobakterije</h3><p>模拟赛 T1。</p>\n<p>刚开题发现就是求若干个树的直径总和。</p>\n<p>写了半个小时发现自己不会写 DP。（汗</p>\n<p>于是打了两次 BFS。</p>\n<h3 id=\"P9032-COCI2022-2023-1-Neboderi\"><a href=\"#P9032-COCI2022-2023-1-Neboderi\" class=\"headerlink\" title=\"P9032 [COCI2022-2023#1] Neboderi\"></a>P9032 [COCI2022-2023#1] Neboderi</h3><p>模拟赛 T2。</p>\n<p>赛时差点没做出来，后面又因为常数大了，T 掉了。（汗</p>\n<p>利用倍增求一段区间的 gcd。</p>\n<p>贪心地。很明显，固定 $r$，$l \\sim r$ 的 gcd 单调不减。那么我们肯定是去第一次出现一个 gcd 的区间求值。</p>\n<h3 id=\"P8313-COCI2021-2022-4-Izbori\"><a href=\"#P8313-COCI2021-2022-4-Izbori\" class=\"headerlink\" title=\"P8313 [COCI2021-2022#4] Izbori\"></a>P8313 [COCI2021-2022#4] Izbori</h3><p>模拟赛 T3。</p>\n<p>说实话，很妙。</p>\n<p>根据简单地推导，满足 $2\\times S_i - i &gt; 2 \\times S_j - j$ 的 $i$ 与 $j$ 即可有一个区间，其中 $S$ 为某种颜色出现的次数和。</p>\n<p>很容易想到拿一个数据结构去维护。选择树状数组，但由于 $2\\times S_i - i$ 可能为负，所以要加一个偏移量。</p>\n<p>我们将 $2\\times S_i - i$ 称为 $C_i$。</p>\n<p>手玩一下容易发现：对于一种颜色在前缀中的 $C_i$ 在没有遇到相同颜色时，$C_i = C_{i - 1} - 1$ 否则 $C_i = C_{i - 1} + 1$。</p>\n<p>那么我们枚举同一种颜色，相邻的可以视为一个区间，我们考虑计算与加上一个区间的贡献。</p>\n<p>可以推出一个区间的贡献可以通过求每个 $C_i$ 贡献的前缀和再相减的方式求出。</p>\n<p>用树状数组维护，我们支持加上区间的贡献，区间修改。再询问——单点查询。</p>\n<p>那么再将所有区间贡献相加，即为答案。</p>\n<h2 id=\"3-28\"><a href=\"#3-28\" class=\"headerlink\" title=\"3.28\"></a>3.28</h2><h3 id=\"C0504-C-距离之和\"><a href=\"#C0504-C-距离之和\" class=\"headerlink\" title=\"C0504 C 距离之和\"></a>C0504 C 距离之和</h3><blockquote>\n<p>题目大意：给一棵树。每次操作可以删一条边并再加一条边。求使的每个点到其余点距离之和在当前这棵树最小的最少操作次数。</p>\n</blockquote>\n<p>点到其余点距离之和在当前这棵树最小，明显就是要使这个点成为一个中心。</p>\n<p>我们先求出初始的重心 $rt$。</p>\n<p>因为重心的每一棵子树大小 $\\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor $。</p>\n<p>那么我们假设考虑到一个点 $u$，并且我们再定义 $b_u$ 为距离 $u$ 最近的 $rt$ 的儿子（包括 $u$），我们可以得到 $siz_u \\le siz_{b_u} \\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor$，$siz_i$ 是在以 $rt$ 为根的树中 $i$ 为根的子树大小。</p>\n<p>我们将点 $u$ 视为当前的根节点，那么除了它在原树中的子树，还有一个大小为 $n - siz_u$ 的子树。</p>\n<p>因为 $siz_u \\le \\left\\lfloor\\frac{n}{2}\\right\\rfloor$ 所以 $n - siz_u \\ge \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，我们就要去调整它的大小。</p>\n<p>我们选择叫 $n - siz_u$ 这棵子树为大子树。</p>\n<p>我们设 $now = n - siz_u - \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，这个就是要从大子树中至少要减去子树的大小的下界。</p>\n<p>我们要减的子树一定是以 $rt$ 儿子为根的子树，我们可以减去 $rt$ 到它儿子的边，然后可以连向 $u$。</p>\n<p>当然 $b_u$ 为根的子树大小要变为 $size_{b_u} - siz_u$。</p>\n<p>我们考虑将他们加入一个数据结构，并找到子树大小的和刚好大于等于 $now$ 的最小个数。</p>\n<p>在这里我选择使用权值树状数组 + 二分。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, f = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> c = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt; </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\"> || c &lt; </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c == </span><span style=\"color: #CE9178\">&#39;-&#39;</span><span style=\"color: #D4D4D4\">) f = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt;= </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\"> &amp;&amp; c &lt;= </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres = (res &lt;&lt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) + (res &lt;&lt; </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) + (c ^ </span><span style=\"color: #B5CEA8\">48</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> f == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> ? res : -res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">1e6</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, root, </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">sum1</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">sum2</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get_rt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fa</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> flag = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[x]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (y == fa) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">get_rt</span><span style=\"color: #D4D4D4\">(y, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[y] &gt; n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) flag = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] += </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[y];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (n - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] &gt; n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) flag = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (flag) root = x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//void build(in)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs1</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fa</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tag</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x] = tag;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[x]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (y == fa) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">dfs1</span><span style=\"color: #D4D4D4\">(y, x, tag);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] += </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[y];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (; x &lt;= n + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; x += x &amp; -x) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">sum1</span><span style=\"color: #D4D4D4\">[x] += v1, </span><span style=\"color: #9CDCFE\">sum2</span><span style=\"color: #D4D4D4\">[x] += v2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ask1</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (; x; x -= x &amp; -x)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres += </span><span style=\"color: #9CDCFE\">sum2</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (; x; x -= x &amp; -x)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres += </span><span style=\"color: #9CDCFE\">sum1</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getans</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], -</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> now = (n - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] - (n &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (now &lt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] &lt;= (n &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r = n, res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, all = </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(n);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (l &lt;= r) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (all - </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(mid - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) &gt;= now) l = mid + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, res = mid;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> r = mid - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a1 = </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(res);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t = now - (all - a1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t1 = (t - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) / res + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tcout &lt;&lt; b[x] &lt;&lt; &#39; &#39;&lt;&lt; x &lt;&lt; &#39; &#39; &lt;&lt; res &lt;&lt; &#39; &#39; &lt;&lt; now &lt;&lt; &#39; &#39; &lt;&lt; ask(n) - ask(res - 1) &lt;&lt; &#39; &#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tres = t1 + </span><span style=\"color: #DCDCAA\">ask1</span><span style=\"color: #D4D4D4\">(n) - </span><span style=\"color: #DCDCAA\">ask1</span><span style=\"color: #D4D4D4\">(res);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] + </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tn = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> u = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(), v = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[u].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(v);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[v].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(u);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tputs(&quot;&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">get_rt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[root]) </span><span style=\"color: #DCDCAA\">dfs1</span><span style=\"color: #D4D4D4\">(x, root, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[root]) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i != root) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #DCDCAA\">getans</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) cout &lt;&lt; </span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">[i] &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>","excerpt":"","more":"<p>过了几个月，又回来了，3.7 之前的懒得补了。</p>\n<h2 id=\"3-7\"><a href=\"#3-7\" class=\"headerlink\" title=\"3.7\"></a>3.7</h2><h3 id=\"P2487-SDOI2011-拦截导弹\"><a href=\"#P2487-SDOI2011-拦截导弹\" class=\"headerlink\" title=\"P2487 [SDOI2011] 拦截导弹\"></a>P2487 [SDOI2011] 拦截导弹</h3><p>最近在学 CDQ。花了我好久调试。</p>\n<p>CDQ 优化 DP 模板。</p>\n<p>将转移条件转化成三维偏序。在 CDQ 中求。至于每个点在最长的二维最长升子序列的出现次数，多开一个数组 $f[0/1][i]$ 存，转移还是使用树状数组顺带做了。$0/1$，表示以此点为开头或结尾。</p>\n<p>最后如果 $dp[0][i] + dp[1][i] = len + 1$ 则这个点答案为 $f[0][i] * f[1][i] / sum$。</p>\n<h3 id=\"P3834-可持久化线段树-2\"><a href=\"#P3834-可持久化线段树-2\" class=\"headerlink\" title=\"P3834 可持久化线段树 2\"></a>P3834 可持久化线段树 2</h3><p>顺带用整体二分做了一个板子题。感觉这个算法好 NB。</p>\n<h3 id=\"P4093-HEOI2016-TJOI2016-序列\"><a href=\"#P4093-HEOI2016-TJOI2016-序列\" class=\"headerlink\" title=\"P4093 [HEOI2016/TJOI2016] 序列\"></a>P4093 [HEOI2016/TJOI2016] 序列</h3><p>一开始连题都看错了。<del>描述不清的题面，SM 的出题人。</del>或许是我是个 SB。</p>\n<p>开了题解才明白题目。<del>是我大意了。</del></p>\n<p>也是一道很板的 CDQ 优化 DP。但以后一定要注意，转移时是 <code>dp[a[i].id]</code> 而不是 <code>dp[i]</code>。（-1h。</p>\n<h3 id=\"P3364-Cool-loves-touli\"><a href=\"#P3364-Cool-loves-touli\" class=\"headerlink\" title=\"P3364 Cool loves touli\"></a>P3364 Cool loves touli</h3><p>板子 +1。</p>\n<p>注意开 <code>long long</code>，然后再离散化。树状数组与离散化数组大小开 $3 \\times N$。我在这里 WA 了一发。</p>\n<h3 id=\"P4390-BalkanOI2007-Mokia-摩基亚\"><a href=\"#P4390-BalkanOI2007-Mokia-摩基亚\" class=\"headerlink\" title=\"P4390 [BalkanOI2007] Mokia 摩基亚\"></a>P4390 [BalkanOI2007] Mokia 摩基亚</h3><p>简单板子。将查询分为四个点每次求 0,0 到 x,y 的一个矩形中的总权值。</p>\n<p>相当于求 $x_i \\le x_j \\land y_i \\le y_j \\land t_i \\le t_j$ 的 $a_i$ 总和。三维偏序，可以使用 CDQ 维护它。</p>\n<p>注意树状数组上界一定要开大，不然会少加上数！</p>\n<h2 id=\"3-8\"><a href=\"#3-8\" class=\"headerlink\" title=\"3.8\"></a>3.8</h2><h3 id=\"CF1045G-AI-robots\"><a href=\"#CF1045G-AI-robots\" class=\"headerlink\" title=\"CF1045G AI robots\"></a>CF1045G AI robots</h3><p>完蛋，板子题做多了，脑袋不灵了。。。</p>\n<p>在处理中间部分时利用尺取法维护能满足智商条件的 bot。</p>\n<p>先按 $r$，再按 $q$ 排。</p>\n<p>注意离散化和数组大小。</p>\n<h3 id=\"P3769-CH弱省胡策R2-TATT\"><a href=\"#P3769-CH弱省胡策R2-TATT\" class=\"headerlink\" title=\"P3769 [CH弱省胡策R2] TATT\"></a>P3769 [CH弱省胡策R2] TATT</h3><p>四维偏序板子。CDQ 套 CDQ 套 树状数组即可。</p>\n<p>每一个均维护一种偏序。最外层其实也有排序保证。</p>\n<h2 id=\"3-11\"><a href=\"#3-11\" class=\"headerlink\" title=\"3.11\"></a>3.11</h2><h3 id=\"P3527-POI2011-MET-Meteors\"><a href=\"#P3527-POI2011-MET-Meteors\" class=\"headerlink\" title=\"P3527 [POI2011] MET-Meteors\"></a>P3527 [POI2011] MET-Meteors</h3><p>整体二分板子。尽量不要下传数组。还有要将目前的空间站离散。</p>\n<h3 id=\"P4870-BalticOI-2009-Day1-甲虫\"><a href=\"#P4870-BalticOI-2009-Day1-甲虫\" class=\"headerlink\" title=\"P4870 [BalticOI 2009 Day1] 甲虫\"></a>P4870 [BalticOI 2009 Day1] 甲虫</h3><p>区间 DP。设 $f[i][j][0/1]$ 表示，$i\\sim j$ 全吃，当前在左/右。随便转移一下即可。</p>\n<h3 id=\"P4158-SCOI2009-粉刷匠\"><a href=\"#P4158-SCOI2009-粉刷匠\" class=\"headerlink\" title=\"P4158 [SCOI2009] 粉刷匠\"></a>P4158 [SCOI2009] 粉刷匠</h3><p>要预处理出每一块木板用不同次粉刷最多粉刷多少。</p>\n<script type=\"math/tex; mode=display\">f[i][j][k] = \\max(f[i][j][k], f[i][l][k - 1] + \\max(sum[i][j] - sum[i][l], j - l - sum[i][j] + sum[i][l]));</script><p>$sum$ 存颜色的前缀和。</p>\n<p>$dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + f[i][m][k]);$。前 $i$ 个板刷 $j$ 次。</p>\n<h3 id=\"P3174-HAOI2009-毛毛虫\"><a href=\"#P3174-HAOI2009-毛毛虫\" class=\"headerlink\" title=\"P3174 [HAOI2009] 毛毛虫\"></a>P3174 [HAOI2009] 毛毛虫</h3><p>简单去处理当前最大的毛毛虫与次大的毛毛虫，并简单的将他们两个合并。</p>\n<h3 id=\"P1131-ZJOI2007-时态同步\"><a href=\"#P1131-ZJOI2007-时态同步\" class=\"headerlink\" title=\"P1131 [ZJOI2007] 时态同步\"></a>P1131 [ZJOI2007] 时态同步</h3><p>找到当前子树最深的一个点。并使其他的叶子节点的深度与他相同，再计算贡献即可。</p>\n<h3 id=\"P1272-重建道路\"><a href=\"#P1272-重建道路\" class=\"headerlink\" title=\"P1272 重建道路\"></a>P1272 重建道路</h3><p>利用树上的背包去做即可。</p>\n<script type=\"math/tex; mode=display\">f[x][s] = min(f[x][s] + 1, f[x][s - sy] + f[y][sy]);</script><p>$f$ 表示在 $x$ 的子树中留下 $s$ 个点的最少操作次数。</p>\n<p>最后对所有 $f[i][p]$ 取 $min$ 就行。</p>\n<h3 id=\"P3554-POI2013-LUK-Triumphal-arch\"><a href=\"#P3554-POI2013-LUK-Triumphal-arch\" class=\"headerlink\" title=\"P3554 [POI2013] LUK-Triumphal arch\"></a>P3554 [POI2013] LUK-Triumphal arch</h3><p>二分答案。利用树形 DP check 就可。</p>\n<p>$f[i]$ 表示在 $i$ 的子树中还需从上面的节点借的个数。</p>\n<h3 id=\"P6419-COCI2014-2015-1-Kamp\"><a href=\"#P6419-COCI2014-2015-1-Kamp\" class=\"headerlink\" title=\"P6419 [COCI2014-2015#1] Kamp\"></a>P6419 [COCI2014-2015#1] Kamp</h3><p>换根 DP。先去处理出以 $1$ 为根。然后再计算其他的即可。答案为送完所有人走回根的答案减去含家的最长链即可。</p>\n<h2 id=\"3-12\"><a href=\"#3-12\" class=\"headerlink\" title=\"3.12\"></a>3.12</h2><h3 id=\"P4657-CEOI2017-Chase\"><a href=\"#P4657-CEOI2017-Chase\" class=\"headerlink\" title=\"P4657 [CEOI2017] Chase\"></a>P4657 [CEOI2017] Chase</h3><p>做了有两天了。还是得开题解。其实就是换根 DP。</p>\n<p>考虑在当前节点放一个磁铁。那么贡献即为 $\\sum f_{son_x}$。</p>\n<p>$dp[x][i][1] = dp[x][i - 1][0] + sum[x]$。$dp[x][i][0] = \\max(dp[son_x][i][0])$。</p>\n<p>同时记录下儿子节点答案的最大值与次大值。</p>\n<p>在换根时，套路的去做就可以了（如果他是父亲的最大值，就次大值更新此类）。</p>\n<h3 id=\"P2495-SDOI2011-消耗战\"><a href=\"#P2495-SDOI2011-消耗战\" class=\"headerlink\" title=\"P2495 [SDOI2011] 消耗战\"></a>P2495 [SDOI2011] 消耗战</h3><p>使用虚树，再进行 DP 即可。</p>\n<h3 id=\"P2986-USACO10MAR-Great-Cow-Gathering-G\"><a href=\"#P2986-USACO10MAR-Great-Cow-Gathering-G\" class=\"headerlink\" title=\"P2986 [USACO10MAR] Great Cow Gathering G\"></a>P2986 [USACO10MAR] Great Cow Gathering G</h3><p>换根 DP 板子。很容易想到，根作为聚集点。那么，我们先处理 $f[1]$。</p>\n<script type=\"math/tex; mode=display\">f[1] = \\sum_{1 < y \\le n} dep[y] * c[y]</script><p>顺便处理 $sum_i$ 表示 $i$ 为根的子树内的牛数。</p>\n<p>答案 $f[y] = f[x] + (sum[1] - sum[y]) \\times w - sum[y] \\times w;$。$w$ 为边权。</p>\n<p>答案在 $f$ 中取 $\\min$ 即可。</p>\n<h2 id=\"3-13\"><a href=\"#3-13\" class=\"headerlink\" title=\"3.13\"></a>3.13</h2><h3 id=\"P5665-CSP-S2019-划分\"><a href=\"#P5665-CSP-S2019-划分\" class=\"headerlink\" title=\"P5665 [CSP-S2019] 划分\"></a>P5665 [CSP-S2019] 划分</h3><p>简单题，不知道为什么是紫。自然想到段数越多越好，也是最后一段越短越好。至于题面，很容易就想到 DP 了吧。</p>\n<p>我们就只需要维护一个单调队列即可，注意要保存上一个转移而来的数。</p>\n<h2 id=\"3-14\"><a href=\"#3-14\" class=\"headerlink\" title=\"3.14\"></a>3.14</h2><h3 id=\"P7424-THUPC2017-天天爱射击\"><a href=\"#P7424-THUPC2017-天天爱射击\" class=\"headerlink\" title=\"P7424 [THUPC2017] 天天爱射击\"></a>P7424 [THUPC2017] 天天爱射击</h3><p>与这道题有点像：P3527 [POI2011] MET-Meteors。</p>\n<p>就按照这么做即可。</p>\n<h3 id=\"P1527-国家集训队-矩阵乘法\"><a href=\"#P1527-国家集训队-矩阵乘法\" class=\"headerlink\" title=\"P1527 [国家集训队] 矩阵乘法\"></a>P1527 [国家集训队] 矩阵乘法</h3><p>矩阵中的第 K 小。将一维第 K 小的树状数组换成二维树状数组，求前缀和变为求二维前缀和即可。</p>\n<h3 id=\"P2839-国家集训队-middle\"><a href=\"#P2839-国家集训队-middle\" class=\"headerlink\" title=\"P2839 [国家集训队] middle\"></a>P2839 [国家集训队] middle</h3><p>二分 + 主席树板子。</p>\n<p>二分 $mid$ 为中位数。$&gt; mid$ 的标为 $1$，否则标为 $-1$。</p>\n<p>建立主席树进行维护区间和，若和 $\\ge 0$ 则 $mid$ 可以尝试变得更大。</p>\n<p>考虑左右端点，那么对于 $a\\sim b$ 我们要找到最大后缀和，$c\\sim d$ 找到最大前缀和。</p>\n<p>相加判断即可。</p>\n<h3 id=\"P3899-湖南集训-更为厉害\"><a href=\"#P3899-湖南集训-更为厉害\" class=\"headerlink\" title=\"P3899 [湖南集训] 更为厉害\"></a>P3899 [湖南集训] 更为厉害</h3><p>线段树合并。考虑对每一个点建一个线段树，其中以深度为下标。</p>\n<p>分析可得 $a,b$ 存在祖先关系。</p>\n<p>$a,b$ 分为两种情况：</p>\n<ol>\n<li>$a$ 在 $b$ 上。</li>\n<li>$a$ 在 $b$ 下。</li>\n</ol>\n<p>$a$ 在 $b$ 上 simple 求。</p>\n<p>$a$ 在 $b$ 下就在线段树中找到符合条件的 $b$，当 $b$ 确定后，$c$ 就有 $b$ 的子树大小减一中可能。</p>\n<p>最后两种情况答案相加即可。</p>\n<h2 id=\"3-15\"><a href=\"#3-15\" class=\"headerlink\" title=\"3.15\"></a>3.15</h2><h3 id=\"P8028-COCI2021-2022-3-Cijanobakterije\"><a href=\"#P8028-COCI2021-2022-3-Cijanobakterije\" class=\"headerlink\" title=\"P8028 [COCI2021-2022#3] Cijanobakterije\"></a>P8028 [COCI2021-2022#3] Cijanobakterije</h3><p>模拟赛 T1。</p>\n<p>刚开题发现就是求若干个树的直径总和。</p>\n<p>写了半个小时发现自己不会写 DP。（汗</p>\n<p>于是打了两次 BFS。</p>\n<h3 id=\"P9032-COCI2022-2023-1-Neboderi\"><a href=\"#P9032-COCI2022-2023-1-Neboderi\" class=\"headerlink\" title=\"P9032 [COCI2022-2023#1] Neboderi\"></a>P9032 [COCI2022-2023#1] Neboderi</h3><p>模拟赛 T2。</p>\n<p>赛时差点没做出来，后面又因为常数大了，T 掉了。（汗</p>\n<p>利用倍增求一段区间的 gcd。</p>\n<p>贪心地。很明显，固定 $r$，$l \\sim r$ 的 gcd 单调不减。那么我们肯定是去第一次出现一个 gcd 的区间求值。</p>\n<h3 id=\"P8313-COCI2021-2022-4-Izbori\"><a href=\"#P8313-COCI2021-2022-4-Izbori\" class=\"headerlink\" title=\"P8313 [COCI2021-2022#4] Izbori\"></a>P8313 [COCI2021-2022#4] Izbori</h3><p>模拟赛 T3。</p>\n<p>说实话，很妙。</p>\n<p>根据简单地推导，满足 $2\\times S_i - i &gt; 2 \\times S_j - j$ 的 $i$ 与 $j$ 即可有一个区间，其中 $S$ 为某种颜色出现的次数和。</p>\n<p>很容易想到拿一个数据结构去维护。选择树状数组，但由于 $2\\times S_i - i$ 可能为负，所以要加一个偏移量。</p>\n<p>我们将 $2\\times S_i - i$ 称为 $C_i$。</p>\n<p>手玩一下容易发现：对于一种颜色在前缀中的 $C_i$ 在没有遇到相同颜色时，$C_i = C_{i - 1} - 1$ 否则 $C_i = C_{i - 1} + 1$。</p>\n<p>那么我们枚举同一种颜色，相邻的可以视为一个区间，我们考虑计算与加上一个区间的贡献。</p>\n<p>可以推出一个区间的贡献可以通过求每个 $C_i$ 贡献的前缀和再相减的方式求出。</p>\n<p>用树状数组维护，我们支持加上区间的贡献，区间修改。再询问——单点查询。</p>\n<p>那么再将所有区间贡献相加，即为答案。</p>\n<h2 id=\"3-28\"><a href=\"#3-28\" class=\"headerlink\" title=\"3.28\"></a>3.28</h2><h3 id=\"C0504-C-距离之和\"><a href=\"#C0504-C-距离之和\" class=\"headerlink\" title=\"C0504 C 距离之和\"></a>C0504 C 距离之和</h3><blockquote>\n<p>题目大意：给一棵树。每次操作可以删一条边并再加一条边。求使的每个点到其余点距离之和在当前这棵树最小的最少操作次数。</p>\n</blockquote>\n<p>点到其余点距离之和在当前这棵树最小，明显就是要使这个点成为一个中心。</p>\n<p>我们先求出初始的重心 $rt$。</p>\n<p>因为重心的每一棵子树大小 $\\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor $。</p>\n<p>那么我们假设考虑到一个点 $u$，并且我们再定义 $b_u$ 为距离 $u$ 最近的 $rt$ 的儿子（包括 $u$），我们可以得到 $siz_u \\le siz_{b_u} \\le \\left \\lfloor \\frac{n}{2} \\right \\rfloor$，$siz_i$ 是在以 $rt$ 为根的树中 $i$ 为根的子树大小。</p>\n<p>我们将点 $u$ 视为当前的根节点，那么除了它在原树中的子树，还有一个大小为 $n - siz_u$ 的子树。</p>\n<p>因为 $siz_u \\le \\left\\lfloor\\frac{n}{2}\\right\\rfloor$ 所以 $n - siz_u \\ge \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，我们就要去调整它的大小。</p>\n<p>我们选择叫 $n - siz_u$ 这棵子树为大子树。</p>\n<p>我们设 $now = n - siz_u - \\left\\lfloor\\frac{n}{2}\\right\\rfloor$，这个就是要从大子树中至少要减去子树的大小的下界。</p>\n<p>我们要减的子树一定是以 $rt$ 儿子为根的子树，我们可以减去 $rt$ 到它儿子的边，然后可以连向 $u$。</p>\n<p>当然 $b_u$ 为根的子树大小要变为 $size_{b_u} - siz_u$。</p>\n<p>我们考虑将他们加入一个数据结构，并找到子树大小的和刚好大于等于 $now$ 的最小个数。</p>\n<p>在这里我选择使用权值树状数组 + 二分。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, f = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> c = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt; </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\"> || c &lt; </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c == </span><span style=\"color: #CE9178\">&#39;-&#39;</span><span style=\"color: #D4D4D4\">) f = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt;= </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\"> &amp;&amp; c &lt;= </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres = (res &lt;&lt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) + (res &lt;&lt; </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) + (c ^ </span><span style=\"color: #B5CEA8\">48</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> f == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> ? res : -res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">1e6</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, root, </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">sum1</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">sum2</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">get_rt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fa</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> flag = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[x]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (y == fa) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">get_rt</span><span style=\"color: #D4D4D4\">(y, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[y] &gt; n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) flag = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] += </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[y];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (n - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] &gt; n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) flag = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (flag) root = x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//void build(in)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs1</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">fa</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tag</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x] = tag;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[x]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (y == fa) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">dfs1</span><span style=\"color: #D4D4D4\">(y, x, tag);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] += </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[y];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (; x &lt;= n + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; x += x &amp; -x) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">sum1</span><span style=\"color: #D4D4D4\">[x] += v1, </span><span style=\"color: #9CDCFE\">sum2</span><span style=\"color: #D4D4D4\">[x] += v2;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ask1</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (; x; x -= x &amp; -x)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres += </span><span style=\"color: #9CDCFE\">sum2</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (; x; x -= x &amp; -x)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres += </span><span style=\"color: #9CDCFE\">sum1</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">getans</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], -</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> now = (n - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] - (n &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (now &lt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x] &lt;= (n &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r = n, res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, all = </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(n);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (l &lt;= r) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (all - </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(mid - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) &gt;= now) l = mid + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, res = mid;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> r = mid - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> a1 = </span><span style=\"color: #DCDCAA\">ask</span><span style=\"color: #D4D4D4\">(res);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t = now - (all - a1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t1 = (t - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) / res + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tcout &lt;&lt; b[x] &lt;&lt; &#39; &#39;&lt;&lt; x &lt;&lt; &#39; &#39; &lt;&lt; res &lt;&lt; &#39; &#39; &lt;&lt; now &lt;&lt; &#39; &#39; &lt;&lt; ask(n) - ask(res - 1) &lt;&lt; &#39; &#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tres = t1 + </span><span style=\"color: #DCDCAA\">ask1</span><span style=\"color: #D4D4D4\">(n) - </span><span style=\"color: #DCDCAA\">ask1</span><span style=\"color: #D4D4D4\">(res);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], - </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[x]] + </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tn = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> u = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(), v = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[u].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(v);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[v].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(u);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tputs(&quot;&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">get_rt</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[root]) </span><span style=\"color: #DCDCAA\">dfs1</span><span style=\"color: #D4D4D4\">(x, root, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[root]) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">upd</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #9CDCFE\">siz</span><span style=\"color: #D4D4D4\">[x], </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i != root) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #DCDCAA\">getans</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) cout &lt;&lt; </span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">[i] &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>"},{"title":"2024 8月杂题记","cover":"https://lucky-cloud09.github.io/img/b5.jpg","date":"2024-07-31T16:00:00.000Z","_content":"\n### [AT_joisc2017_c](https://www.luogu.com.cn/problem/AT_joisc2017_c)\n\n> 题目描述：过于复杂，略。\n\n答案明显具有单调性。考虑二分答案。\n\n有一个很自然的想法，没点燃的要向正在燃的靠近，且一定以最大速度走 $T$ 秒。\n\n对于一个区间 $[L,R]$，满足让它能用一个点燃的互相点燃。有一个条件为 $X_r - X_l \\le 2 \\times (r - l) \\times v \\times T$，转变一下，即为 $X_r - 2 \\times r \\times v \\times T \\le X_l - 2 \\times l \\times v \\times T$。\n\n我们就设 $a_i = X_i - 2 \\times i \\times v \\times T$。\n\n利用归纳法，要使 $[L,R]$ 合法，$[L+1,R]$ 或 $[L,R-1]$ 就需要合法。\n\n我们找到一个性质最好的区间 $[L,R]$ 满足 $L \\le k \\le R$ 且 $a_L$ 最大，$a_R$ 最小。\n\n我们考虑 $[k,k]$ 扩展到 $[L,R]$。\n\n假设当前在 $[l,r]$，先考虑扩展 $l$，到[i,r]。\n\n- $L \\le i \\le l \\wedge a_l \\le a_i$。\n- $i \\le j \\le l \\wedge a_j \\ge a_r$\n\n其他情况同理。\n\n若不能到 $[L,R]$ 则返回 $0$。\n\n最后，我们将 $[1,n]$ 缩小到 $[L,R]$ 即可，与上面同理。\n\n### [[PKUWC2018] Minimax](https://www.luogu.com.cn/problem/P5298)\n\n> 题目大意：给你一棵树，保证一个结点至多有两个子节点。给你叶子结点的权值。其余结点的值为 $p_i$ 的概率为它子节点的最大值，$1 - p_i$ 的概率为它子节点的最小值。设 $1$ 号结点的权值有 $m$ 种，第 $i$ 小的值的概率为 $D_i(D_i > 0)$，求 $\\sum_{i = 1}^{m} i\\times D_i \\times Val_i$。\n\n设 $f_{i,j}$ 表示 $i$ 结点值为 $j$ 的概率。\n\n则 $f_{i,j} = f_{ls,j} \\times (\\sum_{k=1}^{j-1} f_{rs,k} \\times p_i + \\sum_{k=j+1}^{n} f_{rs,k} \\times (1 - p_i)) + f_{rs,j} \\times (\\sum_{k=1}^{j-1} f_{ls,k} \\times p_i + \\sum_{k=j+1}^{n} f_{ls,k} \\times (1 - p_i))$。\n\n我们可以在线段树合并中维护。\n\n细节比较多。\n\n### [[HEOI2016/TJOI2016] 排序](https://www.luogu.com.cn/problem/P2824)\n\n很有趣的题。\n\n> 题目大意：给你个排列。做 $m$ 次排序，给区间 $[l,r]$，让你按逆序或正序排，求最后 $q$ 上的位置。\n\n本身不好想。考虑简化，只有 $0|1$。设 $cnt1$ 为区间内 $1$ 的个数。则正序即为将 $l \\sim cnt1 - 1$ 变为 $0$，$cnt1 \\sim  r$ 变为 $1$。逆序同理。那么，使用线段树维护即可。\n\n回到本题。想办法，将序列变为 $0|1$。那么，枚举 $a_q$ 为多少。按大小转化为 $0|1$。若 $a_q$ 转化后最后为 $1$，则合法。\n\n可以注意到具有单调性，二分即可。\n\n### [[POI2011] ROT-Tree Rotations](https://www.luogu.com.cn/problem/P3521)\n\n> 题目大意：给一个 $n$ 个叶子结点的二叉树。叶子结点有权值 $p_i$，$p$ 是一个排列。保证一个结点有 $0|2$ 个儿子。你可以交换若干个结点的左右子树，求最后按先序排列后，叶子结点构成的序列逆序对的最小数量。\n\n容易发现，交换一个结点，只对子树内的逆序对产生影响。\n\n我们考虑交换一个结点后，逆序对的变化。设原来右子树对左子树的逆序对数量为 $a$，左子树大小 $sz_{ls}$，右子树大小 $sz_{rs}$。那么交换后，逆序对有 $b = sz_{ls} * sz_{rs} - a$ 个。我们只需求出 $a,b$，答案加上较小的一个即可。线段树合并就可以处理出逆序对数。只需在合并时求即可。\n\n### [[AGC002D] Stamp Rally](https://www.luogu.com.cn/problem/AT_agc002_d)\n\n> 题目大意：给一个连通图。$q$ 次询问。每次给 $x$，$y$。从两点出发，使得经过的点的数量等于 $z$。求经过的边最大编号最小是多少。\n\n看到最大值最小。考虑二分。若只有一个询问。我们可以将边权小于等于 $mid$ 的边领出来。然后用并查集合并。最后看 $x$，$y$ 是否在同一个连通块内。不在的话使得 $siz_{get(x)} + siz_{get(y)} \\ge z$，否则 $siz_{get(x)} \\ge z$ 就返回 $1$。\n\n多个询问。整体二分即可。\n\n### [[NOIP2012 提高组] 疫情控制](https://www.luogu.com.cn/problem/P1084)\n\n> 题目大意：给一棵有 $n$ 个点，以 $1$ 为根的树。有 $m$ 个军队。先给出军队的位置。可以移动军队，每过一条边花 $w_i$ 的时间。移动完毕军队所在的点不能走。军队最后不能在根。求使得 $1$ 不与任何叶子联通花费的最小时间。\n\n二分答案。\n\n二分给定一个时间限制 $lim$。考虑如何写 `check`。贪心的，除根以外，其他点均不会往下走。因为向上走（除走到根）一定能覆盖更多的叶子。\n\n那么，我们将所有军队尽量向上移动，到根的儿子为止。可以用倍增实现。若到了根的儿子，求出剩余时间 $more_i = lim - cnt - w_{1->i}$。若有剩余时间，将这个结点（移动后）和 $more_i$ 存下来。否则打上标记。\n\n然后，我们 dfs 即可求出哪些以根的儿子为根的子树需要从其他子树要来军队。\n\n但是，我们注意到，有剩余时间的我们并没有打上标记。所以我们需要求出那些点留在子树内即可。\n\n先给出结论：$more_i < w_{1->i}$ 的且这个子树的叶子没完全覆盖，这样的不用动这个点，同时，这个子树就被这个点覆盖。\n\n感性证明：有一个满足上述条件的点 $x$，和一个可以移动的点 $y$ 且满足 $more_y \\ge w_{1->i}$，那么 $x$ 之后可以移动到的点 $y$ 一定能到，$y$ 能到的，$x$ 不一定能到。那么就别浪费 $y$ 去 $x$，$x$ 去其他点。\n\n但是根据上面结论，$more_x$ 一定比其他在同一个点的 $more_x$ 小才行，所以要排序。\n\n最后使用双指针判断即可。\n\n### [[NOIP2015 提高组] 运输计划](https://www.luogu.com.cn/problem/P2680)\n\n> 题目大意：给一棵 $n$ 个点树。每过一条边的花费为 $w_i$。给你 $m$ 条 $u$ 到 $v$ 的**路径**。你可以将一条边的权值变为 $0$。求过 $m$ 条路径花费最多的最少是多少。\n\n最大值最小。二分答案。\n\n考虑先求出每个 $u$ 到 $v$ 的距离。然后枚举时间 $lim$。若 $dis_i > lim$，则说明 $u_i$ 到 $v_i$ 路径上需要减去一个 $dis_i - lim$ 的边权。放到链上，发现是区间覆盖问题。那么在树上，使用树上差分。若存在一条边被所有 $dis_i > lim$ 的路径覆盖，且每个 $dis_i$ 减去他的边权都 $\\le lim$ 则说明 $lim$ 可行。\n\n### [[JOI Open 2016] 销售基因链](https://www.luogu.com.cn/problem/P9196)\n\n> 题目大意：给 $n$ 个字符串。字符串由 `A`，`G`，`U`，`C` 组成（保证每个字符串都包含四种字母）。$m$ 组查询。每次给两个字符串 $p$，$q$，求有多少个字符串存在前缀 $p$，后缀 $q$。\n\n首先，前缀，后缀，字符串。容易想到 Trie。对 $n$ 个字符串，我们用两个 Trie，一个放前缀，一个放后缀（将原串 `reverse` 即可）。\n\n考虑查询。先简化，若只给前缀。那么找到 $p$ 对应的结点，其子树内存在的字符串个数即是答案。回到原问题，就是那些字符串同时存在在两个子树内。那么，我们可以使用 dfn 序转化成求二维数点。","source":"_posts/2024_8_problems.md","raw":"---\ntitle: 2024 8月杂题记\ncover: https://lucky-cloud09.github.io/img/b5.jpg\ncategories: 杂题\ndate: 2024/8\n---\n\n### [AT_joisc2017_c](https://www.luogu.com.cn/problem/AT_joisc2017_c)\n\n> 题目描述：过于复杂，略。\n\n答案明显具有单调性。考虑二分答案。\n\n有一个很自然的想法，没点燃的要向正在燃的靠近，且一定以最大速度走 $T$ 秒。\n\n对于一个区间 $[L,R]$，满足让它能用一个点燃的互相点燃。有一个条件为 $X_r - X_l \\le 2 \\times (r - l) \\times v \\times T$，转变一下，即为 $X_r - 2 \\times r \\times v \\times T \\le X_l - 2 \\times l \\times v \\times T$。\n\n我们就设 $a_i = X_i - 2 \\times i \\times v \\times T$。\n\n利用归纳法，要使 $[L,R]$ 合法，$[L+1,R]$ 或 $[L,R-1]$ 就需要合法。\n\n我们找到一个性质最好的区间 $[L,R]$ 满足 $L \\le k \\le R$ 且 $a_L$ 最大，$a_R$ 最小。\n\n我们考虑 $[k,k]$ 扩展到 $[L,R]$。\n\n假设当前在 $[l,r]$，先考虑扩展 $l$，到[i,r]。\n\n- $L \\le i \\le l \\wedge a_l \\le a_i$。\n- $i \\le j \\le l \\wedge a_j \\ge a_r$\n\n其他情况同理。\n\n若不能到 $[L,R]$ 则返回 $0$。\n\n最后，我们将 $[1,n]$ 缩小到 $[L,R]$ 即可，与上面同理。\n\n### [[PKUWC2018] Minimax](https://www.luogu.com.cn/problem/P5298)\n\n> 题目大意：给你一棵树，保证一个结点至多有两个子节点。给你叶子结点的权值。其余结点的值为 $p_i$ 的概率为它子节点的最大值，$1 - p_i$ 的概率为它子节点的最小值。设 $1$ 号结点的权值有 $m$ 种，第 $i$ 小的值的概率为 $D_i(D_i > 0)$，求 $\\sum_{i = 1}^{m} i\\times D_i \\times Val_i$。\n\n设 $f_{i,j}$ 表示 $i$ 结点值为 $j$ 的概率。\n\n则 $f_{i,j} = f_{ls,j} \\times (\\sum_{k=1}^{j-1} f_{rs,k} \\times p_i + \\sum_{k=j+1}^{n} f_{rs,k} \\times (1 - p_i)) + f_{rs,j} \\times (\\sum_{k=1}^{j-1} f_{ls,k} \\times p_i + \\sum_{k=j+1}^{n} f_{ls,k} \\times (1 - p_i))$。\n\n我们可以在线段树合并中维护。\n\n细节比较多。\n\n### [[HEOI2016/TJOI2016] 排序](https://www.luogu.com.cn/problem/P2824)\n\n很有趣的题。\n\n> 题目大意：给你个排列。做 $m$ 次排序，给区间 $[l,r]$，让你按逆序或正序排，求最后 $q$ 上的位置。\n\n本身不好想。考虑简化，只有 $0|1$。设 $cnt1$ 为区间内 $1$ 的个数。则正序即为将 $l \\sim cnt1 - 1$ 变为 $0$，$cnt1 \\sim  r$ 变为 $1$。逆序同理。那么，使用线段树维护即可。\n\n回到本题。想办法，将序列变为 $0|1$。那么，枚举 $a_q$ 为多少。按大小转化为 $0|1$。若 $a_q$ 转化后最后为 $1$，则合法。\n\n可以注意到具有单调性，二分即可。\n\n### [[POI2011] ROT-Tree Rotations](https://www.luogu.com.cn/problem/P3521)\n\n> 题目大意：给一个 $n$ 个叶子结点的二叉树。叶子结点有权值 $p_i$，$p$ 是一个排列。保证一个结点有 $0|2$ 个儿子。你可以交换若干个结点的左右子树，求最后按先序排列后，叶子结点构成的序列逆序对的最小数量。\n\n容易发现，交换一个结点，只对子树内的逆序对产生影响。\n\n我们考虑交换一个结点后，逆序对的变化。设原来右子树对左子树的逆序对数量为 $a$，左子树大小 $sz_{ls}$，右子树大小 $sz_{rs}$。那么交换后，逆序对有 $b = sz_{ls} * sz_{rs} - a$ 个。我们只需求出 $a,b$，答案加上较小的一个即可。线段树合并就可以处理出逆序对数。只需在合并时求即可。\n\n### [[AGC002D] Stamp Rally](https://www.luogu.com.cn/problem/AT_agc002_d)\n\n> 题目大意：给一个连通图。$q$ 次询问。每次给 $x$，$y$。从两点出发，使得经过的点的数量等于 $z$。求经过的边最大编号最小是多少。\n\n看到最大值最小。考虑二分。若只有一个询问。我们可以将边权小于等于 $mid$ 的边领出来。然后用并查集合并。最后看 $x$，$y$ 是否在同一个连通块内。不在的话使得 $siz_{get(x)} + siz_{get(y)} \\ge z$，否则 $siz_{get(x)} \\ge z$ 就返回 $1$。\n\n多个询问。整体二分即可。\n\n### [[NOIP2012 提高组] 疫情控制](https://www.luogu.com.cn/problem/P1084)\n\n> 题目大意：给一棵有 $n$ 个点，以 $1$ 为根的树。有 $m$ 个军队。先给出军队的位置。可以移动军队，每过一条边花 $w_i$ 的时间。移动完毕军队所在的点不能走。军队最后不能在根。求使得 $1$ 不与任何叶子联通花费的最小时间。\n\n二分答案。\n\n二分给定一个时间限制 $lim$。考虑如何写 `check`。贪心的，除根以外，其他点均不会往下走。因为向上走（除走到根）一定能覆盖更多的叶子。\n\n那么，我们将所有军队尽量向上移动，到根的儿子为止。可以用倍增实现。若到了根的儿子，求出剩余时间 $more_i = lim - cnt - w_{1->i}$。若有剩余时间，将这个结点（移动后）和 $more_i$ 存下来。否则打上标记。\n\n然后，我们 dfs 即可求出哪些以根的儿子为根的子树需要从其他子树要来军队。\n\n但是，我们注意到，有剩余时间的我们并没有打上标记。所以我们需要求出那些点留在子树内即可。\n\n先给出结论：$more_i < w_{1->i}$ 的且这个子树的叶子没完全覆盖，这样的不用动这个点，同时，这个子树就被这个点覆盖。\n\n感性证明：有一个满足上述条件的点 $x$，和一个可以移动的点 $y$ 且满足 $more_y \\ge w_{1->i}$，那么 $x$ 之后可以移动到的点 $y$ 一定能到，$y$ 能到的，$x$ 不一定能到。那么就别浪费 $y$ 去 $x$，$x$ 去其他点。\n\n但是根据上面结论，$more_x$ 一定比其他在同一个点的 $more_x$ 小才行，所以要排序。\n\n最后使用双指针判断即可。\n\n### [[NOIP2015 提高组] 运输计划](https://www.luogu.com.cn/problem/P2680)\n\n> 题目大意：给一棵 $n$ 个点树。每过一条边的花费为 $w_i$。给你 $m$ 条 $u$ 到 $v$ 的**路径**。你可以将一条边的权值变为 $0$。求过 $m$ 条路径花费最多的最少是多少。\n\n最大值最小。二分答案。\n\n考虑先求出每个 $u$ 到 $v$ 的距离。然后枚举时间 $lim$。若 $dis_i > lim$，则说明 $u_i$ 到 $v_i$ 路径上需要减去一个 $dis_i - lim$ 的边权。放到链上，发现是区间覆盖问题。那么在树上，使用树上差分。若存在一条边被所有 $dis_i > lim$ 的路径覆盖，且每个 $dis_i$ 减去他的边权都 $\\le lim$ 则说明 $lim$ 可行。\n\n### [[JOI Open 2016] 销售基因链](https://www.luogu.com.cn/problem/P9196)\n\n> 题目大意：给 $n$ 个字符串。字符串由 `A`，`G`，`U`，`C` 组成（保证每个字符串都包含四种字母）。$m$ 组查询。每次给两个字符串 $p$，$q$，求有多少个字符串存在前缀 $p$，后缀 $q$。\n\n首先，前缀，后缀，字符串。容易想到 Trie。对 $n$ 个字符串，我们用两个 Trie，一个放前缀，一个放后缀（将原串 `reverse` 即可）。\n\n考虑查询。先简化，若只给前缀。那么找到 $p$ 对应的结点，其子树内存在的字符串个数即是答案。回到原问题，就是那些字符串同时存在在两个子树内。那么，我们可以使用 dfn 序转化成求二维数点。","slug":"2024_8_problems","published":1,"updated":"2024-09-06T12:38:28.709Z","_id":"cm0cfoqfr0006358k26fmem8j","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"AT-joisc2017-c\"><a href=\"#AT-joisc2017-c\" class=\"headerlink\" title=\"AT_joisc2017_c\"></a><a href=\"https://www.luogu.com.cn/problem/AT_joisc2017_c\">AT_joisc2017_c</a></h3><blockquote>\n<p>题目描述：过于复杂，略。</p>\n</blockquote>\n<p>答案明显具有单调性。考虑二分答案。</p>\n<p>有一个很自然的想法，没点燃的要向正在燃的靠近，且一定以最大速度走 $T$ 秒。</p>\n<p>对于一个区间 $[L,R]$，满足让它能用一个点燃的互相点燃。有一个条件为 $X_r - X_l \\le 2 \\times (r - l) \\times v \\times T$，转变一下，即为 $X_r - 2 \\times r \\times v \\times T \\le X_l - 2 \\times l \\times v \\times T$。</p>\n<p>我们就设 $a_i = X_i - 2 \\times i \\times v \\times T$。</p>\n<p>利用归纳法，要使 $[L,R]$ 合法，$[L+1,R]$ 或 $[L,R-1]$ 就需要合法。</p>\n<p>我们找到一个性质最好的区间 $[L,R]$ 满足 $L \\le k \\le R$ 且 $a_L$ 最大，$a_R$ 最小。</p>\n<p>我们考虑 $[k,k]$ 扩展到 $[L,R]$。</p>\n<p>假设当前在 $[l,r]$，先考虑扩展 $l$，到[i,r]。</p>\n<ul>\n<li>$L \\le i \\le l \\wedge a_l \\le a_i$。</li>\n<li>$i \\le j \\le l \\wedge a_j \\ge a_r$</li>\n</ul>\n<p>其他情况同理。</p>\n<p>若不能到 $[L,R]$ 则返回 $0$。</p>\n<p>最后，我们将 $[1,n]$ 缩小到 $[L,R]$ 即可，与上面同理。</p>\n<h3 id=\"PKUWC2018-Minimax\"><a href=\"#PKUWC2018-Minimax\" class=\"headerlink\" title=\"[PKUWC2018] Minimax\"></a><a href=\"https://www.luogu.com.cn/problem/P5298\">[PKUWC2018] Minimax</a></h3><blockquote>\n<p>题目大意：给你一棵树，保证一个结点至多有两个子节点。给你叶子结点的权值。其余结点的值为 $p_i$ 的概率为它子节点的最大值，$1 - p_i$ 的概率为它子节点的最小值。设 $1$ 号结点的权值有 $m$ 种，第 $i$ 小的值的概率为 $D_i(D_i &gt; 0)$，求 $\\sum_{i = 1}^{m} i\\times D_i \\times Val_i$。</p>\n</blockquote>\n<p>设 $f_{i,j}$ 表示 $i$ 结点值为 $j$ 的概率。</p>\n<p>则 $f_{i,j} = f_{ls,j} \\times (\\sum_{k=1}^{j-1} f_{rs,k} \\times p_i + \\sum_{k=j+1}^{n} f_{rs,k} \\times (1 - p_i)) + f_{rs,j} \\times (\\sum_{k=1}^{j-1} f_{ls,k} \\times p_i + \\sum_{k=j+1}^{n} f_{ls,k} \\times (1 - p_i))$。</p>\n<p>我们可以在线段树合并中维护。</p>\n<p>细节比较多。</p>\n<h3 id=\"HEOI2016-TJOI2016-排序\"><a href=\"#HEOI2016-TJOI2016-排序\" class=\"headerlink\" title=\"[HEOI2016/TJOI2016] 排序\"></a><a href=\"https://www.luogu.com.cn/problem/P2824\">[HEOI2016/TJOI2016] 排序</a></h3><p>很有趣的题。</p>\n<blockquote>\n<p>题目大意：给你个排列。做 $m$ 次排序，给区间 $[l,r]$，让你按逆序或正序排，求最后 $q$ 上的位置。</p>\n</blockquote>\n<p>本身不好想。考虑简化，只有 $0|1$。设 $cnt1$ 为区间内 $1$ 的个数。则正序即为将 $l \\sim cnt1 - 1$ 变为 $0$，$cnt1 \\sim  r$ 变为 $1$。逆序同理。那么，使用线段树维护即可。</p>\n<p>回到本题。想办法，将序列变为 $0|1$。那么，枚举 $a_q$ 为多少。按大小转化为 $0|1$。若 $a_q$ 转化后最后为 $1$，则合法。</p>\n<p>可以注意到具有单调性，二分即可。</p>\n<h3 id=\"POI2011-ROT-Tree-Rotations\"><a href=\"#POI2011-ROT-Tree-Rotations\" class=\"headerlink\" title=\"[POI2011] ROT-Tree Rotations\"></a><a href=\"https://www.luogu.com.cn/problem/P3521\">[POI2011] ROT-Tree Rotations</a></h3><blockquote>\n<p>题目大意：给一个 $n$ 个叶子结点的二叉树。叶子结点有权值 $p_i$，$p$ 是一个排列。保证一个结点有 $0|2$ 个儿子。你可以交换若干个结点的左右子树，求最后按先序排列后，叶子结点构成的序列逆序对的最小数量。</p>\n</blockquote>\n<p>容易发现，交换一个结点，只对子树内的逆序对产生影响。</p>\n<p>我们考虑交换一个结点后，逆序对的变化。设原来右子树对左子树的逆序对数量为 $a$，左子树大小 $sz_{ls}$，右子树大小 $sz_{rs}$。那么交换后，逆序对有 $b = sz_{ls} * sz_{rs} - a$ 个。我们只需求出 $a,b$，答案加上较小的一个即可。线段树合并就可以处理出逆序对数。只需在合并时求即可。</p>\n<h3 id=\"AGC002D-Stamp-Rally\"><a href=\"#AGC002D-Stamp-Rally\" class=\"headerlink\" title=\"[AGC002D] Stamp Rally\"></a><a href=\"https://www.luogu.com.cn/problem/AT_agc002_d\">[AGC002D] Stamp Rally</a></h3><blockquote>\n<p>题目大意：给一个连通图。$q$ 次询问。每次给 $x$，$y$。从两点出发，使得经过的点的数量等于 $z$。求经过的边最大编号最小是多少。</p>\n</blockquote>\n<p>看到最大值最小。考虑二分。若只有一个询问。我们可以将边权小于等于 $mid$ 的边领出来。然后用并查集合并。最后看 $x$，$y$ 是否在同一个连通块内。不在的话使得 $siz_{get(x)} + siz_{get(y)} \\ge z$，否则 $siz_{get(x)} \\ge z$ 就返回 $1$。</p>\n<p>多个询问。整体二分即可。</p>\n<h3 id=\"NOIP2012-提高组-疫情控制\"><a href=\"#NOIP2012-提高组-疫情控制\" class=\"headerlink\" title=\"[NOIP2012 提高组] 疫情控制\"></a><a href=\"https://www.luogu.com.cn/problem/P1084\">[NOIP2012 提高组] 疫情控制</a></h3><blockquote>\n<p>题目大意：给一棵有 $n$ 个点，以 $1$ 为根的树。有 $m$ 个军队。先给出军队的位置。可以移动军队，每过一条边花 $w_i$ 的时间。移动完毕军队所在的点不能走。军队最后不能在根。求使得 $1$ 不与任何叶子联通花费的最小时间。</p>\n</blockquote>\n<p>二分答案。</p>\n<p>二分给定一个时间限制 $lim$。考虑如何写 <code>check</code>。贪心的，除根以外，其他点均不会往下走。因为向上走（除走到根）一定能覆盖更多的叶子。</p>\n<p>那么，我们将所有军队尽量向上移动，到根的儿子为止。可以用倍增实现。若到了根的儿子，求出剩余时间 $more_i = lim - cnt - w_{1-&gt;i}$。若有剩余时间，将这个结点（移动后）和 $more_i$ 存下来。否则打上标记。</p>\n<p>然后，我们 dfs 即可求出哪些以根的儿子为根的子树需要从其他子树要来军队。</p>\n<p>但是，我们注意到，有剩余时间的我们并没有打上标记。所以我们需要求出那些点留在子树内即可。</p>\n<p>先给出结论：$more_i &lt; w_{1-&gt;i}$ 的且这个子树的叶子没完全覆盖，这样的不用动这个点，同时，这个子树就被这个点覆盖。</p>\n<p>感性证明：有一个满足上述条件的点 $x$，和一个可以移动的点 $y$ 且满足 $more_y \\ge w_{1-&gt;i}$，那么 $x$ 之后可以移动到的点 $y$ 一定能到，$y$ 能到的，$x$ 不一定能到。那么就别浪费 $y$ 去 $x$，$x$ 去其他点。</p>\n<p>但是根据上面结论，$more_x$ 一定比其他在同一个点的 $more_x$ 小才行，所以要排序。</p>\n<p>最后使用双指针判断即可。</p>\n<h3 id=\"NOIP2015-提高组-运输计划\"><a href=\"#NOIP2015-提高组-运输计划\" class=\"headerlink\" title=\"[NOIP2015 提高组] 运输计划\"></a><a href=\"https://www.luogu.com.cn/problem/P2680\">[NOIP2015 提高组] 运输计划</a></h3><blockquote>\n<p>题目大意：给一棵 $n$ 个点树。每过一条边的花费为 $w_i$。给你 $m$ 条 $u$ 到 $v$ 的<strong>路径</strong>。你可以将一条边的权值变为 $0$。求过 $m$ 条路径花费最多的最少是多少。</p>\n</blockquote>\n<p>最大值最小。二分答案。</p>\n<p>考虑先求出每个 $u$ 到 $v$ 的距离。然后枚举时间 $lim$。若 $dis_i &gt; lim$，则说明 $u_i$ 到 $v_i$ 路径上需要减去一个 $dis_i - lim$ 的边权。放到链上，发现是区间覆盖问题。那么在树上，使用树上差分。若存在一条边被所有 $dis_i &gt; lim$ 的路径覆盖，且每个 $dis_i$ 减去他的边权都 $\\le lim$ 则说明 $lim$ 可行。</p>\n<h3 id=\"JOI-Open-2016-销售基因链\"><a href=\"#JOI-Open-2016-销售基因链\" class=\"headerlink\" title=\"[JOI Open 2016] 销售基因链\"></a><a href=\"https://www.luogu.com.cn/problem/P9196\">[JOI Open 2016] 销售基因链</a></h3><blockquote>\n<p>题目大意：给 $n$ 个字符串。字符串由 <code>A</code>，<code>G</code>，<code>U</code>，<code>C</code> 组成（保证每个字符串都包含四种字母）。$m$ 组查询。每次给两个字符串 $p$，$q$，求有多少个字符串存在前缀 $p$，后缀 $q$。</p>\n</blockquote>\n<p>首先，前缀，后缀，字符串。容易想到 Trie。对 $n$ 个字符串，我们用两个 Trie，一个放前缀，一个放后缀（将原串 <code>reverse</code> 即可）。</p>\n<p>考虑查询。先简化，若只给前缀。那么找到 $p$ 对应的结点，其子树内存在的字符串个数即是答案。回到原问题，就是那些字符串同时存在在两个子树内。那么，我们可以使用 dfn 序转化成求二维数点。</p>\n","excerpt":"","more":"<h3 id=\"AT-joisc2017-c\"><a href=\"#AT-joisc2017-c\" class=\"headerlink\" title=\"AT_joisc2017_c\"></a><a href=\"https://www.luogu.com.cn/problem/AT_joisc2017_c\">AT_joisc2017_c</a></h3><blockquote>\n<p>题目描述：过于复杂，略。</p>\n</blockquote>\n<p>答案明显具有单调性。考虑二分答案。</p>\n<p>有一个很自然的想法，没点燃的要向正在燃的靠近，且一定以最大速度走 $T$ 秒。</p>\n<p>对于一个区间 $[L,R]$，满足让它能用一个点燃的互相点燃。有一个条件为 $X_r - X_l \\le 2 \\times (r - l) \\times v \\times T$，转变一下，即为 $X_r - 2 \\times r \\times v \\times T \\le X_l - 2 \\times l \\times v \\times T$。</p>\n<p>我们就设 $a_i = X_i - 2 \\times i \\times v \\times T$。</p>\n<p>利用归纳法，要使 $[L,R]$ 合法，$[L+1,R]$ 或 $[L,R-1]$ 就需要合法。</p>\n<p>我们找到一个性质最好的区间 $[L,R]$ 满足 $L \\le k \\le R$ 且 $a_L$ 最大，$a_R$ 最小。</p>\n<p>我们考虑 $[k,k]$ 扩展到 $[L,R]$。</p>\n<p>假设当前在 $[l,r]$，先考虑扩展 $l$，到[i,r]。</p>\n<ul>\n<li>$L \\le i \\le l \\wedge a_l \\le a_i$。</li>\n<li>$i \\le j \\le l \\wedge a_j \\ge a_r$</li>\n</ul>\n<p>其他情况同理。</p>\n<p>若不能到 $[L,R]$ 则返回 $0$。</p>\n<p>最后，我们将 $[1,n]$ 缩小到 $[L,R]$ 即可，与上面同理。</p>\n<h3 id=\"PKUWC2018-Minimax\"><a href=\"#PKUWC2018-Minimax\" class=\"headerlink\" title=\"[PKUWC2018] Minimax\"></a><a href=\"https://www.luogu.com.cn/problem/P5298\">[PKUWC2018] Minimax</a></h3><blockquote>\n<p>题目大意：给你一棵树，保证一个结点至多有两个子节点。给你叶子结点的权值。其余结点的值为 $p_i$ 的概率为它子节点的最大值，$1 - p_i$ 的概率为它子节点的最小值。设 $1$ 号结点的权值有 $m$ 种，第 $i$ 小的值的概率为 $D_i(D_i &gt; 0)$，求 $\\sum_{i = 1}^{m} i\\times D_i \\times Val_i$。</p>\n</blockquote>\n<p>设 $f_{i,j}$ 表示 $i$ 结点值为 $j$ 的概率。</p>\n<p>则 $f_{i,j} = f_{ls,j} \\times (\\sum_{k=1}^{j-1} f_{rs,k} \\times p_i + \\sum_{k=j+1}^{n} f_{rs,k} \\times (1 - p_i)) + f_{rs,j} \\times (\\sum_{k=1}^{j-1} f_{ls,k} \\times p_i + \\sum_{k=j+1}^{n} f_{ls,k} \\times (1 - p_i))$。</p>\n<p>我们可以在线段树合并中维护。</p>\n<p>细节比较多。</p>\n<h3 id=\"HEOI2016-TJOI2016-排序\"><a href=\"#HEOI2016-TJOI2016-排序\" class=\"headerlink\" title=\"[HEOI2016/TJOI2016] 排序\"></a><a href=\"https://www.luogu.com.cn/problem/P2824\">[HEOI2016/TJOI2016] 排序</a></h3><p>很有趣的题。</p>\n<blockquote>\n<p>题目大意：给你个排列。做 $m$ 次排序，给区间 $[l,r]$，让你按逆序或正序排，求最后 $q$ 上的位置。</p>\n</blockquote>\n<p>本身不好想。考虑简化，只有 $0|1$。设 $cnt1$ 为区间内 $1$ 的个数。则正序即为将 $l \\sim cnt1 - 1$ 变为 $0$，$cnt1 \\sim  r$ 变为 $1$。逆序同理。那么，使用线段树维护即可。</p>\n<p>回到本题。想办法，将序列变为 $0|1$。那么，枚举 $a_q$ 为多少。按大小转化为 $0|1$。若 $a_q$ 转化后最后为 $1$，则合法。</p>\n<p>可以注意到具有单调性，二分即可。</p>\n<h3 id=\"POI2011-ROT-Tree-Rotations\"><a href=\"#POI2011-ROT-Tree-Rotations\" class=\"headerlink\" title=\"[POI2011] ROT-Tree Rotations\"></a><a href=\"https://www.luogu.com.cn/problem/P3521\">[POI2011] ROT-Tree Rotations</a></h3><blockquote>\n<p>题目大意：给一个 $n$ 个叶子结点的二叉树。叶子结点有权值 $p_i$，$p$ 是一个排列。保证一个结点有 $0|2$ 个儿子。你可以交换若干个结点的左右子树，求最后按先序排列后，叶子结点构成的序列逆序对的最小数量。</p>\n</blockquote>\n<p>容易发现，交换一个结点，只对子树内的逆序对产生影响。</p>\n<p>我们考虑交换一个结点后，逆序对的变化。设原来右子树对左子树的逆序对数量为 $a$，左子树大小 $sz_{ls}$，右子树大小 $sz_{rs}$。那么交换后，逆序对有 $b = sz_{ls} * sz_{rs} - a$ 个。我们只需求出 $a,b$，答案加上较小的一个即可。线段树合并就可以处理出逆序对数。只需在合并时求即可。</p>\n<h3 id=\"AGC002D-Stamp-Rally\"><a href=\"#AGC002D-Stamp-Rally\" class=\"headerlink\" title=\"[AGC002D] Stamp Rally\"></a><a href=\"https://www.luogu.com.cn/problem/AT_agc002_d\">[AGC002D] Stamp Rally</a></h3><blockquote>\n<p>题目大意：给一个连通图。$q$ 次询问。每次给 $x$，$y$。从两点出发，使得经过的点的数量等于 $z$。求经过的边最大编号最小是多少。</p>\n</blockquote>\n<p>看到最大值最小。考虑二分。若只有一个询问。我们可以将边权小于等于 $mid$ 的边领出来。然后用并查集合并。最后看 $x$，$y$ 是否在同一个连通块内。不在的话使得 $siz_{get(x)} + siz_{get(y)} \\ge z$，否则 $siz_{get(x)} \\ge z$ 就返回 $1$。</p>\n<p>多个询问。整体二分即可。</p>\n<h3 id=\"NOIP2012-提高组-疫情控制\"><a href=\"#NOIP2012-提高组-疫情控制\" class=\"headerlink\" title=\"[NOIP2012 提高组] 疫情控制\"></a><a href=\"https://www.luogu.com.cn/problem/P1084\">[NOIP2012 提高组] 疫情控制</a></h3><blockquote>\n<p>题目大意：给一棵有 $n$ 个点，以 $1$ 为根的树。有 $m$ 个军队。先给出军队的位置。可以移动军队，每过一条边花 $w_i$ 的时间。移动完毕军队所在的点不能走。军队最后不能在根。求使得 $1$ 不与任何叶子联通花费的最小时间。</p>\n</blockquote>\n<p>二分答案。</p>\n<p>二分给定一个时间限制 $lim$。考虑如何写 <code>check</code>。贪心的，除根以外，其他点均不会往下走。因为向上走（除走到根）一定能覆盖更多的叶子。</p>\n<p>那么，我们将所有军队尽量向上移动，到根的儿子为止。可以用倍增实现。若到了根的儿子，求出剩余时间 $more_i = lim - cnt - w_{1-&gt;i}$。若有剩余时间，将这个结点（移动后）和 $more_i$ 存下来。否则打上标记。</p>\n<p>然后，我们 dfs 即可求出哪些以根的儿子为根的子树需要从其他子树要来军队。</p>\n<p>但是，我们注意到，有剩余时间的我们并没有打上标记。所以我们需要求出那些点留在子树内即可。</p>\n<p>先给出结论：$more_i &lt; w_{1-&gt;i}$ 的且这个子树的叶子没完全覆盖，这样的不用动这个点，同时，这个子树就被这个点覆盖。</p>\n<p>感性证明：有一个满足上述条件的点 $x$，和一个可以移动的点 $y$ 且满足 $more_y \\ge w_{1-&gt;i}$，那么 $x$ 之后可以移动到的点 $y$ 一定能到，$y$ 能到的，$x$ 不一定能到。那么就别浪费 $y$ 去 $x$，$x$ 去其他点。</p>\n<p>但是根据上面结论，$more_x$ 一定比其他在同一个点的 $more_x$ 小才行，所以要排序。</p>\n<p>最后使用双指针判断即可。</p>\n<h3 id=\"NOIP2015-提高组-运输计划\"><a href=\"#NOIP2015-提高组-运输计划\" class=\"headerlink\" title=\"[NOIP2015 提高组] 运输计划\"></a><a href=\"https://www.luogu.com.cn/problem/P2680\">[NOIP2015 提高组] 运输计划</a></h3><blockquote>\n<p>题目大意：给一棵 $n$ 个点树。每过一条边的花费为 $w_i$。给你 $m$ 条 $u$ 到 $v$ 的<strong>路径</strong>。你可以将一条边的权值变为 $0$。求过 $m$ 条路径花费最多的最少是多少。</p>\n</blockquote>\n<p>最大值最小。二分答案。</p>\n<p>考虑先求出每个 $u$ 到 $v$ 的距离。然后枚举时间 $lim$。若 $dis_i &gt; lim$，则说明 $u_i$ 到 $v_i$ 路径上需要减去一个 $dis_i - lim$ 的边权。放到链上，发现是区间覆盖问题。那么在树上，使用树上差分。若存在一条边被所有 $dis_i &gt; lim$ 的路径覆盖，且每个 $dis_i$ 减去他的边权都 $\\le lim$ 则说明 $lim$ 可行。</p>\n<h3 id=\"JOI-Open-2016-销售基因链\"><a href=\"#JOI-Open-2016-销售基因链\" class=\"headerlink\" title=\"[JOI Open 2016] 销售基因链\"></a><a href=\"https://www.luogu.com.cn/problem/P9196\">[JOI Open 2016] 销售基因链</a></h3><blockquote>\n<p>题目大意：给 $n$ 个字符串。字符串由 <code>A</code>，<code>G</code>，<code>U</code>，<code>C</code> 组成（保证每个字符串都包含四种字母）。$m$ 组查询。每次给两个字符串 $p$，$q$，求有多少个字符串存在前缀 $p$，后缀 $q$。</p>\n</blockquote>\n<p>首先，前缀，后缀，字符串。容易想到 Trie。对 $n$ 个字符串，我们用两个 Trie，一个放前缀，一个放后缀（将原串 <code>reverse</code> 即可）。</p>\n<p>考虑查询。先简化，若只给前缀。那么找到 $p$ 对应的结点，其子树内存在的字符串个数即是答案。回到原问题，就是那些字符串同时存在在两个子树内。那么，我们可以使用 dfn 序转化成求二维数点。</p>\n"},{"title":"ARC140B 题解","cover":"https://lucky-cloud09.github.io/img/b2.jpg","date":"2023-10-01T16:00:00.000Z","_content":"\n## 分析\n自然，我们可以想到利用贪心去解题。\n\n我们可以证明，$\\texttt{ARC}$ 左右两边 $\\texttt{A}$ 和 $\\texttt{C}$ 个数多的比少的变为 $\\texttt{R}$ 贡献能更多，第奇数次操作比第偶数次能使操作次数更多。\n\n于是，我们可以得出这样的一个算法：\n\n1. 若为奇数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最多的取出，将 $\\texttt{AC}$ 的个数减一。\n1. 若为偶数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最少的取出，将其删除。\n\n## Code\n\n为了实现以上操作，我们采用 `multiset` 实现。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 2e5 + 100;\nint n, x;\nmultiset<int> arc;\nstring s;\n\nint main() {\n\tcin >> n;\n\tcin >> s;\n\tx = 2;\n\tfor (int i = 1; i < s.size() - 1; i++) {//从一开始，避免数组越界\n\t\tif (s[i] == 'R') {//以 R 为中心，统计 A 与 C 的个数\n\t\t\tint k = 0, l = i - 1, r = i + 1;\n\t\t\twhile (l >= 0 && r < s.size() && s[l] == 'A' && s[r] == 'C') {\n\t\t\t\tk++;\n\t\t\t\tl--, r++;//向两边扩展\n\t\t\t}\n\t\t\tif (k)//如果有 A 与 C\n\t\t\tarc.insert(k);\n\t\t}\n\t}\n\tint c = 0;\n\twhile (arc.size()) {//只要不为空，那么我们还可以操作\n\t\tc++;\n\t\tif (c % x == 0) {\n\t\t\tarc.erase(arc.begin());//删除最小的，保个数多的，使答案最多\n\t\t}\n\t\telse {\n\t\t\tauto it = arc.end();\n\t\t\tit--;\n\t\t\tint y = *it;\n\t\t\tarc.erase(it);//取出最大的\n\t\t\ty--;\n\t\t\tif (y)  arc.insert(y);//若还能操作，就把他插回去\n\t\t}\n\t}\n\tcout << c << \"\\n\";\n\treturn 0;\n}\n```\n","source":"_posts/ARC140B.md","raw":"---\ntitle: ARC140B 题解\ncover: https://lucky-cloud09.github.io/img/b2.jpg\ncategories: 题解\ndate: 2023/10/2\n---\n\n## 分析\n自然，我们可以想到利用贪心去解题。\n\n我们可以证明，$\\texttt{ARC}$ 左右两边 $\\texttt{A}$ 和 $\\texttt{C}$ 个数多的比少的变为 $\\texttt{R}$ 贡献能更多，第奇数次操作比第偶数次能使操作次数更多。\n\n于是，我们可以得出这样的一个算法：\n\n1. 若为奇数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最多的取出，将 $\\texttt{AC}$ 的个数减一。\n1. 若为偶数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最少的取出，将其删除。\n\n## Code\n\n为了实现以上操作，我们采用 `multiset` 实现。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 2e5 + 100;\nint n, x;\nmultiset<int> arc;\nstring s;\n\nint main() {\n\tcin >> n;\n\tcin >> s;\n\tx = 2;\n\tfor (int i = 1; i < s.size() - 1; i++) {//从一开始，避免数组越界\n\t\tif (s[i] == 'R') {//以 R 为中心，统计 A 与 C 的个数\n\t\t\tint k = 0, l = i - 1, r = i + 1;\n\t\t\twhile (l >= 0 && r < s.size() && s[l] == 'A' && s[r] == 'C') {\n\t\t\t\tk++;\n\t\t\t\tl--, r++;//向两边扩展\n\t\t\t}\n\t\t\tif (k)//如果有 A 与 C\n\t\t\tarc.insert(k);\n\t\t}\n\t}\n\tint c = 0;\n\twhile (arc.size()) {//只要不为空，那么我们还可以操作\n\t\tc++;\n\t\tif (c % x == 0) {\n\t\t\tarc.erase(arc.begin());//删除最小的，保个数多的，使答案最多\n\t\t}\n\t\telse {\n\t\t\tauto it = arc.end();\n\t\t\tit--;\n\t\t\tint y = *it;\n\t\t\tarc.erase(it);//取出最大的\n\t\t\ty--;\n\t\t\tif (y)  arc.insert(y);//若还能操作，就把他插回去\n\t\t}\n\t}\n\tcout << c << \"\\n\";\n\treturn 0;\n}\n```\n","slug":"ARC140B","published":1,"updated":"2024-09-06T12:41:41.637Z","_id":"cm0cfoqfs0007358kfm4qezps","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>自然，我们可以想到利用贪心去解题。</p>\n<p>我们可以证明，$\\texttt{ARC}$ 左右两边 $\\texttt{A}$ 和 $\\texttt{C}$ 个数多的比少的变为 $\\texttt{R}$ 贡献能更多，第奇数次操作比第偶数次能使操作次数更多。</p>\n<p>于是，我们可以得出这样的一个算法：</p>\n<ol>\n<li>若为奇数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最多的取出，将 $\\texttt{AC}$ 的个数减一。</li>\n<li>若为偶数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最少的取出，将其删除。</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>为了实现以上操作，我们采用 <code>multiset</code> 实现。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">2e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">multiset&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; arc;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string s;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; s;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i++) {</span><span style=\"color: #6A9955\">//从一开始，避免数组越界</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i] == </span><span style=\"color: #CE9178\">&#39;R&#39;</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//以 R 为中心，统计 A 与 C 的个数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, l = i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r = i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (l &gt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; r &lt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &amp;&amp; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[l] == </span><span style=\"color: #CE9178\">&#39;A&#39;</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[r] == </span><span style=\"color: #CE9178\">&#39;C&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tk++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tl--, r++;</span><span style=\"color: #6A9955\">//向两边扩展</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (k)</span><span style=\"color: #6A9955\">//如果有 A 与 C</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">insert</span><span style=\"color: #D4D4D4\">(k);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> c = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) {</span><span style=\"color: #6A9955\">//只要不为空，那么我们还可以操作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c % x == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">erase</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">());</span><span style=\"color: #6A9955\">//删除最小的，保个数多的，使答案最多</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> it = </span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tit--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y = *it;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">erase</span><span style=\"color: #D4D4D4\">(it);</span><span style=\"color: #6A9955\">//取出最大的</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\ty--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (y)  </span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">insert</span><span style=\"color: #D4D4D4\">(y);</span><span style=\"color: #6A9955\">//若还能操作，就把他插回去</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; c &lt;&lt; </span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n","excerpt":"","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>自然，我们可以想到利用贪心去解题。</p>\n<p>我们可以证明，$\\texttt{ARC}$ 左右两边 $\\texttt{A}$ 和 $\\texttt{C}$ 个数多的比少的变为 $\\texttt{R}$ 贡献能更多，第奇数次操作比第偶数次能使操作次数更多。</p>\n<p>于是，我们可以得出这样的一个算法：</p>\n<ol>\n<li>若为奇数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最多的取出，将 $\\texttt{AC}$ 的个数减一。</li>\n<li>若为偶数次操作那我们将现有的 $\\texttt{ARC}$ 中左右两边 $\\texttt{A}$ 与 $\\texttt{C}$ 最少的取出，将其删除。</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>为了实现以上操作，我们采用 <code>multiset</code> 实现。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">2e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">multiset&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; arc;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string s;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; s;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tx = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i++) {</span><span style=\"color: #6A9955\">//从一开始，避免数组越界</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i] == </span><span style=\"color: #CE9178\">&#39;R&#39;</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//以 R 为中心，统计 A 与 C 的个数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, l = i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r = i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (l &gt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; r &lt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &amp;&amp; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[l] == </span><span style=\"color: #CE9178\">&#39;A&#39;</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[r] == </span><span style=\"color: #CE9178\">&#39;C&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tk++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tl--, r++;</span><span style=\"color: #6A9955\">//向两边扩展</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (k)</span><span style=\"color: #6A9955\">//如果有 A 与 C</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">insert</span><span style=\"color: #D4D4D4\">(k);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> c = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) {</span><span style=\"color: #6A9955\">//只要不为空，那么我们还可以操作</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c % x == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">erase</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">begin</span><span style=\"color: #D4D4D4\">());</span><span style=\"color: #6A9955\">//删除最小的，保个数多的，使答案最多</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #569CD6\">auto</span><span style=\"color: #D4D4D4\"> it = </span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">end</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tit--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> y = *it;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">erase</span><span style=\"color: #D4D4D4\">(it);</span><span style=\"color: #6A9955\">//取出最大的</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\ty--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (y)  </span><span style=\"color: #9CDCFE\">arc</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">insert</span><span style=\"color: #D4D4D4\">(y);</span><span style=\"color: #6A9955\">//若还能操作，就把他插回去</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; c &lt;&lt; </span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n"},{"title":"AT_abc310_d","cover":"https://lucky-cloud09.github.io/img/b6.jpg","date":"2023-10-01T16:00:00.000Z","_content":"\n\n一道比较简单的爆搜题。~~虽然在考场上没写出来。~~\n## 分析\n我们可以直接枚举每个人加入哪个团队（如果团队中没有与他相斥的人）。然后答案加一就可以了。\n\n为了是答案更优，我们可以小小地剪一剪枝。\n\n1. 如果剩下的不能满足每一组都有人，就新建一个组，不考虑加入新组。\n1. 如果当前组数与要求组数相同就不新建小组了。\n\n但其实，这题的难点是在判重，我们可以用状压~~应该是吧~~去做。也就是每一个人加入的小组转为一个整数。但是，一定要注意，要边建小组边考虑加入目前建了那些组。\n\n因为状态会爆数组所以用 `map` 标记即可。\n\n\n\n## Code\n马蜂不好，不喜勿喷。\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define vint vector<int>\n#define ull unsigned ll\nusing namespace std;\n\nint n, t, m, ans, mp[20][20];\nvint v[20];\nmap<ll, int> mps;\n\nvoid dfs(int x, int tm, ll num) {//x 传的是当前第几个人，tm 是目前有几个队伍，因为与队伍号无关，所以有多少组建多少组，num 是状态。\n\tif (x == n + 1 && tm == t && !mps[num]) {//处理边界，团队数要符合条件。\n\t\tans++;\n\t\tmps[num] = 1;//标记状态。\n//\t\tcout << num << \"\\n\";\n\t\treturn;\n\t}\n\telse if(x == n + 1) {\n\t\treturn;\n\t}\n\tif (t - tm < n - x + 1 && tm != 0) {//小剪枝\n\t\tfor (int i = 1; i <= tm; i++) {\n\t\t\tif (!mp[i][x]) {//如果里面没有与他相斥的人\n\t\t\t\tfor (int j = 0; j < v[x].size(); j++) mp[i][v[x][j]]++;//标记其他人不能进。注意：一定是++，不能是等于一，否则，可能其他标记了同样的人后面删除标记，就可能会使相斥的人在一个组。\n\t\t\t\tnum = num * 10 + i - 1;//状压\n\t\t\t\tdfs(x + 1, tm, num);\n\t\t\t\tfor (int j = 0; j < v[x].size(); j++) mp[i][v[x][j]]--;//删除标记。\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\t}\n\t}\n\tif (tm == t) return;//如果队够了就不新建了\n\t++tm;\n\tfor (int i = 0; i < v[x].size(); i++)\n\t\tmp[tm][v[x][i]]++;\n\tnum = num * 10 + tm - 1;//状压\n\tdfs(x + 1, tm, num);\n\tfor (int i = 0; i < v[x].size(); i++)\n\t\tmp[tm][v[x][i]]--;\n\tnum /= 10;\n}\n\nint main() {\n\tcin >> n >> t >> m;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tv[x].push_back(y);//标记相斥的人。\n\t\tv[y].push_back(x);//同上\n\t}\n\tdfs(1, 0, 0);\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n","source":"_posts/AT_abc310_d.md","raw":"---\ntitle: AT_abc310_d\ncover: https://lucky-cloud09.github.io/img/b6.jpg\ncategories: 题解\ndate: 2023/10/2\n---\n\n\n一道比较简单的爆搜题。~~虽然在考场上没写出来。~~\n## 分析\n我们可以直接枚举每个人加入哪个团队（如果团队中没有与他相斥的人）。然后答案加一就可以了。\n\n为了是答案更优，我们可以小小地剪一剪枝。\n\n1. 如果剩下的不能满足每一组都有人，就新建一个组，不考虑加入新组。\n1. 如果当前组数与要求组数相同就不新建小组了。\n\n但其实，这题的难点是在判重，我们可以用状压~~应该是吧~~去做。也就是每一个人加入的小组转为一个整数。但是，一定要注意，要边建小组边考虑加入目前建了那些组。\n\n因为状态会爆数组所以用 `map` 标记即可。\n\n\n\n## Code\n马蜂不好，不喜勿喷。\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define vint vector<int>\n#define ull unsigned ll\nusing namespace std;\n\nint n, t, m, ans, mp[20][20];\nvint v[20];\nmap<ll, int> mps;\n\nvoid dfs(int x, int tm, ll num) {//x 传的是当前第几个人，tm 是目前有几个队伍，因为与队伍号无关，所以有多少组建多少组，num 是状态。\n\tif (x == n + 1 && tm == t && !mps[num]) {//处理边界，团队数要符合条件。\n\t\tans++;\n\t\tmps[num] = 1;//标记状态。\n//\t\tcout << num << \"\\n\";\n\t\treturn;\n\t}\n\telse if(x == n + 1) {\n\t\treturn;\n\t}\n\tif (t - tm < n - x + 1 && tm != 0) {//小剪枝\n\t\tfor (int i = 1; i <= tm; i++) {\n\t\t\tif (!mp[i][x]) {//如果里面没有与他相斥的人\n\t\t\t\tfor (int j = 0; j < v[x].size(); j++) mp[i][v[x][j]]++;//标记其他人不能进。注意：一定是++，不能是等于一，否则，可能其他标记了同样的人后面删除标记，就可能会使相斥的人在一个组。\n\t\t\t\tnum = num * 10 + i - 1;//状压\n\t\t\t\tdfs(x + 1, tm, num);\n\t\t\t\tfor (int j = 0; j < v[x].size(); j++) mp[i][v[x][j]]--;//删除标记。\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\t}\n\t}\n\tif (tm == t) return;//如果队够了就不新建了\n\t++tm;\n\tfor (int i = 0; i < v[x].size(); i++)\n\t\tmp[tm][v[x][i]]++;\n\tnum = num * 10 + tm - 1;//状压\n\tdfs(x + 1, tm, num);\n\tfor (int i = 0; i < v[x].size(); i++)\n\t\tmp[tm][v[x][i]]--;\n\tnum /= 10;\n}\n\nint main() {\n\tcin >> n >> t >> m;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tv[x].push_back(y);//标记相斥的人。\n\t\tv[y].push_back(x);//同上\n\t}\n\tdfs(1, 0, 0);\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n","slug":"AT_abc310_d","published":1,"updated":"2024-09-06T12:41:44.785Z","_id":"cm0cfoqft0009358k4qy04y0m","comments":1,"layout":"post","photos":[],"content":"<p>一道比较简单的爆搜题。<del>虽然在考场上没写出来。</del></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们可以直接枚举每个人加入哪个团队（如果团队中没有与他相斥的人）。然后答案加一就可以了。</p>\n<p>为了是答案更优，我们可以小小地剪一剪枝。</p>\n<ol>\n<li>如果剩下的不能满足每一组都有人，就新建一个组，不考虑加入新组。</li>\n<li>如果当前组数与要求组数相同就不新建小组了。</li>\n</ol>\n<p>但其实，这题的难点是在判重，我们可以用状压<del>应该是吧</del>去做。也就是每一个人加入的小组转为一个整数。但是，一定要注意，要边建小组边考虑加入目前建了那些组。</p>\n<p>因为状态会爆数组所以用 <code>map</code> 标记即可。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>马蜂不好，不喜勿喷。<br><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ll long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> vint vector&lt;int&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ull unsigned ll</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, t, m, ans, </span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vint </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">map&lt;ll, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; mps;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tm</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">ll</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//x 传的是当前第几个人，tm 是目前有几个队伍，因为与队伍号无关，所以有多少组建多少组，num 是状态。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x == n + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &amp;&amp; tm == t &amp;&amp; !</span><span style=\"color: #9CDCFE\">mps</span><span style=\"color: #D4D4D4\">[num]) {</span><span style=\"color: #6A9955\">//处理边界，团队数要符合条件。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tans++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">mps</span><span style=\"color: #D4D4D4\">[num] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//标记状态。</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\t\tcout &lt;&lt; num &lt;&lt; &quot;\\n&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(x == n + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (t - tm &lt; n - x + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &amp;&amp; tm != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//小剪枝</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= tm; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[i][x]) {</span><span style=\"color: #6A9955\">//如果里面没有与他相斥的人</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); j++) </span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[i][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][j]]++;</span><span style=\"color: #6A9955\">//标记其他人不能进。注意：一定是++，不能是等于一，否则，可能其他标记了同样的人后面删除标记，就可能会使相斥的人在一个组。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnum = num * </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\"> + i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//状压</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(x + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, tm, num);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); j++) </span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[i][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][j]]--;</span><span style=\"color: #6A9955\">//删除标记。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnum /= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (tm == t) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//如果队够了就不新建了</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t++tm;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[tm][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][i]]++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tnum = num * </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\"> + tm - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//状压</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(x + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, tm, num);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[tm][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][i]]--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tnum /= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; t &gt;&gt; m;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x, y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcin &gt;&gt; x &gt;&gt; y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(y);</span><span style=\"color: #6A9955\">//标记相斥的人。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[y].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(x);</span><span style=\"color: #6A9955\">//同上</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure></p>\n","excerpt":"","more":"<p>一道比较简单的爆搜题。<del>虽然在考场上没写出来。</del></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们可以直接枚举每个人加入哪个团队（如果团队中没有与他相斥的人）。然后答案加一就可以了。</p>\n<p>为了是答案更优，我们可以小小地剪一剪枝。</p>\n<ol>\n<li>如果剩下的不能满足每一组都有人，就新建一个组，不考虑加入新组。</li>\n<li>如果当前组数与要求组数相同就不新建小组了。</li>\n</ol>\n<p>但其实，这题的难点是在判重，我们可以用状压<del>应该是吧</del>去做。也就是每一个人加入的小组转为一个整数。但是，一定要注意，要边建小组边考虑加入目前建了那些组。</p>\n<p>因为状态会爆数组所以用 <code>map</code> 标记即可。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>马蜂不好，不喜勿喷。<br><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ll long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> vint vector&lt;int&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ull unsigned ll</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, t, m, ans, </span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vint </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">map&lt;ll, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; mps;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tm</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">ll</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">num</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//x 传的是当前第几个人，tm 是目前有几个队伍，因为与队伍号无关，所以有多少组建多少组，num 是状态。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x == n + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &amp;&amp; tm == t &amp;&amp; !</span><span style=\"color: #9CDCFE\">mps</span><span style=\"color: #D4D4D4\">[num]) {</span><span style=\"color: #6A9955\">//处理边界，团队数要符合条件。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tans++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">mps</span><span style=\"color: #D4D4D4\">[num] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//标记状态。</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\t\tcout &lt;&lt; num &lt;&lt; &quot;\\n&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\">(x == n + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (t - tm &lt; n - x + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &amp;&amp; tm != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//小剪枝</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= tm; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[i][x]) {</span><span style=\"color: #6A9955\">//如果里面没有与他相斥的人</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); j++) </span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[i][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][j]]++;</span><span style=\"color: #6A9955\">//标记其他人不能进。注意：一定是++，不能是等于一，否则，可能其他标记了同样的人后面删除标记，就可能会使相斥的人在一个组。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnum = num * </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\"> + i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//状压</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(x + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, tm, num);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); j++) </span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[i][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][j]]--;</span><span style=\"color: #6A9955\">//删除标记。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnum /= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (tm == t) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//如果队够了就不新建了</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t++tm;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[tm][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][i]]++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tnum = num * </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\"> + tm - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//状压</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(x + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, tm, num);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">(); i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">mp</span><span style=\"color: #D4D4D4\">[tm][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x][i]]--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tnum /= </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; t &gt;&gt; m;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x, y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcin &gt;&gt; x &gt;&gt; y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(y);</span><span style=\"color: #6A9955\">//标记相斥的人。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[y].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(x);</span><span style=\"color: #6A9955\">//同上</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure></p>\n"},{"title":"AT_abc339_e","cover":"https://lucky-cloud09.github.io/img/b3.jpg","date":"2023-10-01T16:00:00.000Z","_content":"\n\n传送门。\n\n## 题意\n给你一个长度为 $N$ 的序列 $A = (A_1, A_2, \\ldots, A_N)$。\n\n求长度为 $A$ 的子序列的最大长度，使得任意两个相邻项之间的绝对差最多为 $D$。\n\n## 分析\n\n设 $f[i]$ 为以 $A$ 中值为 $i$ 为结尾的子序列的最大长度。则有：\n\n$$f[i] = \\max(f[j]) + 1$$\n\n其中 $i - d \\le j \\le i + d$。\n\n代码很容易出来：\n\n```cpp\nfor (int i = 1; i <= n; ++i) {\n\tint x = 0;\n\tfor (int j = max(a[i] - d, 1); j <= min(a[i] + d, mx); ++j) x = min(f[j] + 1, x);\n\tf[a[i]] = x;\n}\n```\n$mx$ 为 $A$ 中的最大值。\n\n复杂度 $O(n^2)$。我们不能接受。\n\n其中这一段：\n\n```cpp\nfor (int j = max(a[i] - d, 1); j <= min(a[i] + d, mx); ++j) x = min(f[j] + 1, x);\n```\n\n相当于在找一个区间内的 $f$ 最大值。\n\n但是，考虑到 $f[i]$ 会变化。我们使用线段树板子维护这个最大值。\n\n时间复杂度：$O(n\\log n)$\n\n## 代码\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define ls (p << 1)\n#define rs ((p << 1) + 1)\nusing namespace std;\n\nconst int N = 5e5 + 5;\nint n, d, f[N], a[N];\nstruct tree {\n\tint l, r;\n\tint mx;\n} tr[N * 4];\n\nvoid pushup(int p) {\n\ttr[p].mx = max(tr[ls].mx, tr[rs].mx);\n}\n\nvoid build(int l, int r, int p) {\n\ttr[p].l = l, tr[p].r = r, tr[p].mx = 0;\n\tif (l == r) { return ; }\n\tint mid = (l + r) >> 1;\n\tbuild(l, mid, ls);\n\tbuild(mid + 1, r, rs);\n}\n\nvoid change(int x, int p) {\n\tint l = tr[p].l, r = tr[p].r;\n\tif (l == r) {\n\t\ttr[p].mx = f[x];\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (x <= mid) change(x, ls);\n\telse change(x, rs);\n\tpushup(p);\n}\n\nint que(int L, int R, int p) {\n\tint l = tr[p].l, r = tr[p].r;\n\tif (L <= l && r <= R) return tr[p].mx;\n\tint mid = (l + r) >> 1;\n\tint res = -1e9;\n\tif (L <= mid) res = max(res, que(L, R, ls));\n\tif (R > mid) res = max(res, que(L, R, rs));\n\treturn res;\n}\n\nsigned main() {\n\tcin >> n >> d;\n\tint mx = 0;\n\tfor (int i = 1; i <= n; ++i) cin >> a[i], mx = max(mx, a[i]);\n\tbuild(1, mx, 1);\n\tint ans = -1e9;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint x = a[i];\n\t\tf[x] = que(max(1ll, x - d), min(mx, x + d), 1) + 1;\n\t\tchange(x, 1);\n\t\tans = max(ans, f[x]);\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```","source":"_posts/AT_abc339_e.md","raw":"---\ntitle: AT_abc339_e\ncover: https://lucky-cloud09.github.io/img/b3.jpg\ncategories: 题解\ndate: 2023/10/2\n---\n\n\n传送门。\n\n## 题意\n给你一个长度为 $N$ 的序列 $A = (A_1, A_2, \\ldots, A_N)$。\n\n求长度为 $A$ 的子序列的最大长度，使得任意两个相邻项之间的绝对差最多为 $D$。\n\n## 分析\n\n设 $f[i]$ 为以 $A$ 中值为 $i$ 为结尾的子序列的最大长度。则有：\n\n$$f[i] = \\max(f[j]) + 1$$\n\n其中 $i - d \\le j \\le i + d$。\n\n代码很容易出来：\n\n```cpp\nfor (int i = 1; i <= n; ++i) {\n\tint x = 0;\n\tfor (int j = max(a[i] - d, 1); j <= min(a[i] + d, mx); ++j) x = min(f[j] + 1, x);\n\tf[a[i]] = x;\n}\n```\n$mx$ 为 $A$ 中的最大值。\n\n复杂度 $O(n^2)$。我们不能接受。\n\n其中这一段：\n\n```cpp\nfor (int j = max(a[i] - d, 1); j <= min(a[i] + d, mx); ++j) x = min(f[j] + 1, x);\n```\n\n相当于在找一个区间内的 $f$ 最大值。\n\n但是，考虑到 $f[i]$ 会变化。我们使用线段树板子维护这个最大值。\n\n时间复杂度：$O(n\\log n)$\n\n## 代码\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define ls (p << 1)\n#define rs ((p << 1) + 1)\nusing namespace std;\n\nconst int N = 5e5 + 5;\nint n, d, f[N], a[N];\nstruct tree {\n\tint l, r;\n\tint mx;\n} tr[N * 4];\n\nvoid pushup(int p) {\n\ttr[p].mx = max(tr[ls].mx, tr[rs].mx);\n}\n\nvoid build(int l, int r, int p) {\n\ttr[p].l = l, tr[p].r = r, tr[p].mx = 0;\n\tif (l == r) { return ; }\n\tint mid = (l + r) >> 1;\n\tbuild(l, mid, ls);\n\tbuild(mid + 1, r, rs);\n}\n\nvoid change(int x, int p) {\n\tint l = tr[p].l, r = tr[p].r;\n\tif (l == r) {\n\t\ttr[p].mx = f[x];\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (x <= mid) change(x, ls);\n\telse change(x, rs);\n\tpushup(p);\n}\n\nint que(int L, int R, int p) {\n\tint l = tr[p].l, r = tr[p].r;\n\tif (L <= l && r <= R) return tr[p].mx;\n\tint mid = (l + r) >> 1;\n\tint res = -1e9;\n\tif (L <= mid) res = max(res, que(L, R, ls));\n\tif (R > mid) res = max(res, que(L, R, rs));\n\treturn res;\n}\n\nsigned main() {\n\tcin >> n >> d;\n\tint mx = 0;\n\tfor (int i = 1; i <= n; ++i) cin >> a[i], mx = max(mx, a[i]);\n\tbuild(1, mx, 1);\n\tint ans = -1e9;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint x = a[i];\n\t\tf[x] = que(max(1ll, x - d), min(mx, x + d), 1) + 1;\n\t\tchange(x, 1);\n\t\tans = max(ans, f[x]);\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```","slug":"AT_abc339_e","published":1,"updated":"2024-09-06T12:41:47.341Z","_id":"cm0cfoqfu000a358k7y6dgqpw","comments":1,"layout":"post","photos":[],"content":"<p>传送门。</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给你一个长度为 $N$ 的序列 $A = (A_1, A_2, \\ldots, A_N)$。</p>\n<p>求长度为 $A$ 的子序列的最大长度，使得任意两个相邻项之间的绝对差最多为 $D$。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>设 $f[i]$ 为以 $A$ 中值为 $i$ 为结尾的子序列的最大长度。则有：</p>\n<script type=\"math/tex; mode=display\">f[i] = \\max(f[j]) + 1</script><p>其中 $i - d \\le j \\le i + d$。</p>\n<p>代码很容易出来：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] - d, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">); j &lt;= </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] + d, mx); ++j) x = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]] = x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>$mx$ 为 $A$ 中的最大值。</p>\n<p>复杂度 $O(n^2)$。我们不能接受。</p>\n<p>其中这一段：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] - d, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">); j &lt;= </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] + d, mx); ++j) x = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, x);</span></span></code></pre></div></div></figure>\n<p>相当于在找一个区间内的 $f$ 最大值。</p>\n<p>但是，考虑到 $f[i]$ 会变化。我们使用线段树板子维护这个最大值。</p>\n<p>时间复杂度：$O(n\\log n)$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> int long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ls (</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #569CD6\"> &lt;&lt; 1)</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> rs ((p &lt;&lt; 1) + 1)</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">5e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, d, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">tree</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l, r;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mx;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[N * </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pushup</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[ls].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[rs].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\"> = l, </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\"> = r, </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (l == r) { </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ; }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(l, mid, ls);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(mid + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r, rs);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, r = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (l == r) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x &lt;= mid) </span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(x, ls);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(x, rs);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">pushup</span><span style=\"color: #D4D4D4\">(p);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">L</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">R</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, r = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (L &lt;= l &amp;&amp; r &lt;= R) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = -</span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (L &lt;= mid) res = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(res, </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(L, R, ls));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (R &gt; mid) res = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(res, </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(L, R, rs));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">signed</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; d;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mx = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i], mx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(mx, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, mx, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = -</span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x = </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1ll</span><span style=\"color: #D4D4D4\">, x - d), </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(mx, x + d), </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(x, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[x]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>","excerpt":"","more":"<p>传送门。</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给你一个长度为 $N$ 的序列 $A = (A_1, A_2, \\ldots, A_N)$。</p>\n<p>求长度为 $A$ 的子序列的最大长度，使得任意两个相邻项之间的绝对差最多为 $D$。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>设 $f[i]$ 为以 $A$ 中值为 $i$ 为结尾的子序列的最大长度。则有：</p>\n<script type=\"math/tex; mode=display\">f[i] = \\max(f[j]) + 1</script><p>其中 $i - d \\le j \\le i + d$。</p>\n<p>代码很容易出来：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] - d, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">); j &lt;= </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] + d, mx); ++j) x = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]] = x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>$mx$ 为 $A$ 中的最大值。</p>\n<p>复杂度 $O(n^2)$。我们不能接受。</p>\n<p>其中这一段：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] - d, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">); j &lt;= </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] + d, mx); ++j) x = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, x);</span></span></code></pre></div></div></figure>\n<p>相当于在找一个区间内的 $f$ 最大值。</p>\n<p>但是，考虑到 $f[i]$ 会变化。我们使用线段树板子维护这个最大值。</p>\n<p>时间复杂度：$O(n\\log n)$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> int long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ls (</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #569CD6\"> &lt;&lt; 1)</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> rs ((p &lt;&lt; 1) + 1)</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">5e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, d, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">tree</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l, r;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mx;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[N * </span><span style=\"color: #B5CEA8\">4</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">pushup</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[ls].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[rs].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\"> = l, </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\"> = r, </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (l == r) { </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ; }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(l, mid, ls);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(mid + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, r, rs);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, r = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (l == r) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[x];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> ;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x &lt;= mid) </span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(x, ls);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(x, rs);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">pushup</span><span style=\"color: #D4D4D4\">(p);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">L</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">R</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> l = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">l</span><span style=\"color: #D4D4D4\">, r = </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">r</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (L &lt;= l &amp;&amp; r &lt;= R) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">tr</span><span style=\"color: #D4D4D4\">[p].</span><span style=\"color: #9CDCFE\">mx</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mid = (l + r) &gt;&gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = -</span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (L &lt;= mid) res = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(res, </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(L, R, ls));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (R &gt; mid) res = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(res, </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(L, R, rs));</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">signed</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; d;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> mx = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i], mx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(mx, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">build</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, mx, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = -</span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x = </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #DCDCAA\">que</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1ll</span><span style=\"color: #D4D4D4\">, x - d), </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(mx, x + d), </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">change</span><span style=\"color: #D4D4D4\">(x, </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[x]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>"},{"title":"题解：AT_arc174_a [ARC174A] A Multiply","cover":"https://lucky-cloud09.github.io/img/b1.jpg","date":"2023-10-01T16:00:00.000Z","_content":"\n\n[题传](https://www.luogu.com.cn/problem/AT_arc174_a)。\n\n先要将 $C$ 分类。\n\n1. $C > 0$，为了使答案更大，要乘上一个最大的区间和。\n1. $C \\le 0$，为了使答案更大，选择乘上一个最小的区间和，因为此时我们可以贪心地想，如果区间和越小，乘上一个负数或 $0$ 后，答案减少得越小，甚至乘上负数，还会使答案增大，所以也可以用负负得正来解释。\n\n当然我们也可以不进行操作。\n\n要求区间和，我们选择前缀和即可。\n\n因为前缀和求区间 $l \\sim r$ 的和是 $sum_r - sum_{l - 1}$。要求区间和的最值，我们固定 $sum_r$ 就可以求 $sum_{l - 1}$ 的最值，我们遍历一遍并动态维护一下区间和的最值即可。\n\n注意 $i \\sim i + 1$ 我们可以视为不选区间与 $C$ 相乘。\n\n给一下代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\ninline int read() {\n\tint res = 0, f = 1; char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tres = (res << 1) + (res << 3) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn f == 1 ? res : -res;\n}\n\nint n, c, a[(int)3e5 + 5], sum[(int)3e5 + 5];\n\nsigned main() {\n\tn = read(), c = read();\n\tfor (int i = 1; i <= n; ++i) \n\t\ta[i] = read(), sum[i] = sum[i - 1] + a[i];\n\tif (c > 0) {\n\t\tint ans = -1e18, mi = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tmi = min(sum[i], mi);//求 sum[i-1] 的最值，下同。\n\t\t\tans = max(ans, sum[i] - mi);//求和的最值，下同。\n\t\t}\n\t\tcout << sum[n] - ans + c * ans;//计算答案下同。\n\t}\n\telse {\n\t\tint ans = 1e18, mx = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tmx = max(sum[i], mx);\n\t\t\tans = min(ans, sum[i] - mx);\n\t\t}\n\t\tcout << sum[n] - ans + c * ans;\n\t}\n\treturn 0;\n}\n\n```","source":"_posts/AT_arc174_a.md","raw":"---\ntitle: 题解：AT_arc174_a [ARC174A] A Multiply\ncover: https://lucky-cloud09.github.io/img/b1.jpg\ncategories: 题解\ndate: 2023/10/2\n---\n\n\n[题传](https://www.luogu.com.cn/problem/AT_arc174_a)。\n\n先要将 $C$ 分类。\n\n1. $C > 0$，为了使答案更大，要乘上一个最大的区间和。\n1. $C \\le 0$，为了使答案更大，选择乘上一个最小的区间和，因为此时我们可以贪心地想，如果区间和越小，乘上一个负数或 $0$ 后，答案减少得越小，甚至乘上负数，还会使答案增大，所以也可以用负负得正来解释。\n\n当然我们也可以不进行操作。\n\n要求区间和，我们选择前缀和即可。\n\n因为前缀和求区间 $l \\sim r$ 的和是 $sum_r - sum_{l - 1}$。要求区间和的最值，我们固定 $sum_r$ 就可以求 $sum_{l - 1}$ 的最值，我们遍历一遍并动态维护一下区间和的最值即可。\n\n注意 $i \\sim i + 1$ 我们可以视为不选区间与 $C$ 相乘。\n\n给一下代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\ninline int read() {\n\tint res = 0, f = 1; char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tres = (res << 1) + (res << 3) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn f == 1 ? res : -res;\n}\n\nint n, c, a[(int)3e5 + 5], sum[(int)3e5 + 5];\n\nsigned main() {\n\tn = read(), c = read();\n\tfor (int i = 1; i <= n; ++i) \n\t\ta[i] = read(), sum[i] = sum[i - 1] + a[i];\n\tif (c > 0) {\n\t\tint ans = -1e18, mi = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tmi = min(sum[i], mi);//求 sum[i-1] 的最值，下同。\n\t\t\tans = max(ans, sum[i] - mi);//求和的最值，下同。\n\t\t}\n\t\tcout << sum[n] - ans + c * ans;//计算答案下同。\n\t}\n\telse {\n\t\tint ans = 1e18, mx = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tmx = max(sum[i], mx);\n\t\t\tans = min(ans, sum[i] - mx);\n\t\t}\n\t\tcout << sum[n] - ans + c * ans;\n\t}\n\treturn 0;\n}\n\n```","slug":"AT_arc174_a","published":1,"updated":"2024-09-06T12:41:30.037Z","_id":"cm0cfoqfw000d358k6rnj348t","comments":1,"layout":"post","photos":[],"content":"<p><a href=\"https://www.luogu.com.cn/problem/AT_arc174_a\">题传</a>。</p>\n<p>先要将 $C$ 分类。</p>\n<ol>\n<li>$C &gt; 0$，为了使答案更大，要乘上一个最大的区间和。</li>\n<li>$C \\le 0$，为了使答案更大，选择乘上一个最小的区间和，因为此时我们可以贪心地想，如果区间和越小，乘上一个负数或 $0$ 后，答案减少得越小，甚至乘上负数，还会使答案增大，所以也可以用负负得正来解释。</li>\n</ol>\n<p>当然我们也可以不进行操作。</p>\n<p>要求区间和，我们选择前缀和即可。</p>\n<p>因为前缀和求区间 $l \\sim r$ 的和是 $sum_r - sum_{l - 1}$。要求区间和的最值，我们固定 $sum_r$ 就可以求 $sum_{l - 1}$ 的最值，我们遍历一遍并动态维护一下区间和的最值即可。</p>\n<p>注意 $i \\sim i + 1$ 我们可以视为不选区间与 $C$ 相乘。</p>\n<p>给一下代码：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> int long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, f = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> c = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt; </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\"> || c &lt; </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c == </span><span style=\"color: #CE9178\">&#39;-&#39;</span><span style=\"color: #D4D4D4\">) f = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt;= </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\"> &amp;&amp; c &lt;= </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres = (res &lt;&lt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) + (res &lt;&lt; </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) + (c ^ </span><span style=\"color: #B5CEA8\">48</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> f == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> ? res : -res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, c, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #B5CEA8\">3e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #B5CEA8\">3e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">signed</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tn = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(), c = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(), </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] + </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = -</span><span style=\"color: #B5CEA8\">1e18</span><span style=\"color: #D4D4D4\">, mi = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tmi = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i], mi);</span><span style=\"color: #6A9955\">//求 sum[i-1] 的最值，下同。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i] - mi);</span><span style=\"color: #6A9955\">//求和的最值，下同。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[n] - ans + c * ans;</span><span style=\"color: #6A9955\">//计算答案下同。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = </span><span style=\"color: #B5CEA8\">1e18</span><span style=\"color: #D4D4D4\">, mx = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tmx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i], mx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i] - mx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[n] - ans + c * ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>","excerpt":"","more":"<p><a href=\"https://www.luogu.com.cn/problem/AT_arc174_a\">题传</a>。</p>\n<p>先要将 $C$ 分类。</p>\n<ol>\n<li>$C &gt; 0$，为了使答案更大，要乘上一个最大的区间和。</li>\n<li>$C \\le 0$，为了使答案更大，选择乘上一个最小的区间和，因为此时我们可以贪心地想，如果区间和越小，乘上一个负数或 $0$ 后，答案减少得越小，甚至乘上负数，还会使答案增大，所以也可以用负负得正来解释。</li>\n</ol>\n<p>当然我们也可以不进行操作。</p>\n<p>要求区间和，我们选择前缀和即可。</p>\n<p>因为前缀和求区间 $l \\sim r$ 的和是 $sum_r - sum_{l - 1}$。要求区间和的最值，我们固定 $sum_r$ 就可以求 $sum_{l - 1}$ 的最值，我们遍历一遍并动态维护一下区间和的最值即可。</p>\n<p>注意 $i \\sim i + 1$ 我们可以视为不选区间与 $C$ 相乘。</p>\n<p>给一下代码：</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> int long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, f = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> c = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt; </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\"> || c &lt; </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c == </span><span style=\"color: #CE9178\">&#39;-&#39;</span><span style=\"color: #D4D4D4\">) f = -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (c &gt;= </span><span style=\"color: #CE9178\">&#39;0&#39;</span><span style=\"color: #D4D4D4\"> &amp;&amp; c &lt;= </span><span style=\"color: #CE9178\">&#39;9&#39;</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tres = (res &lt;&lt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) + (res &lt;&lt; </span><span style=\"color: #B5CEA8\">3</span><span style=\"color: #D4D4D4\">) + (c ^ </span><span style=\"color: #B5CEA8\">48</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tc = </span><span style=\"color: #DCDCAA\">getchar</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> f == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> ? res : -res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, c, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #B5CEA8\">3e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #B5CEA8\">3e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">signed</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tn = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(), c = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #DCDCAA\">read</span><span style=\"color: #D4D4D4\">(), </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] + </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (c &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = -</span><span style=\"color: #B5CEA8\">1e18</span><span style=\"color: #D4D4D4\">, mi = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tmi = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i], mi);</span><span style=\"color: #6A9955\">//求 sum[i-1] 的最值，下同。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i] - mi);</span><span style=\"color: #6A9955\">//求和的最值，下同。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[n] - ans + c * ans;</span><span style=\"color: #6A9955\">//计算答案下同。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = </span><span style=\"color: #B5CEA8\">1e18</span><span style=\"color: #D4D4D4\">, mx = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; ++i) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tmx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i], mx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[i] - mx);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #9CDCFE\">sum</span><span style=\"color: #D4D4D4\">[n] - ans + c * ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>"},{"title":"CF1851D","cover":"https://lucky-cloud09.github.io/img/b5.jpg","_content":"\n\n貌似我与大家后面的判断不太一样？\n\n### 分析\n\n由于前缀和的定义，我们可以知道他们的差分便是原数组，下面的差分数组，是题目给出的前缀和的差分。\n \n于是，我们可以用个桶将 $1 \\sim N$ 出现的数存起来。\n\n随后判断每个数是否出现过，若没出现过，使计数器加一。\n\n这里我们假设输出 `YES`。因为前缀和少了一个数，那么我们得到的差分数组则会比原数组少一个元素。如果 $cnt = 2$，则差分数组相较于原数组会有一个不同的元素，而这一个元素便是原数组在差分数组中，没有出现的两个元素的和。如果 $cnt = 1$，那么一定是前缀和的最后一个数加上差分数组缺少的那一个数等于 $1 \\sim N$ 之和。\n\n这个时候我们分三种情况：\n\n1. 如果 $cnt > 2$，我们根据定义可以得出是不可行的，直接输出 `NO`。\n2. 如果 $cnt = 2$，我们则需判断前缀和数组中最后一个元素是否是 $1 \\sim N$ 的和，若相等则输出 `YES`，否则 `NO`。\n3. 如果 $cnt = 1$，我们则判断前缀和的最后一个数加上差分数组缺少的那一个数是否等于 $1 \\sim N$ 之和。\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define vint vector<int>\n#define ull unsigned ll \nusing namespace std;\n \nconst int N = 4e5 + 5;\nll t, n, c[N], pre, now;\n \nint main() {\n\tios::sync_with_stdio(0);\n    cin >> t;\n    while (t--) {\n        pre = 0;\n        cin >> n;\n        // ll sum = 0;\n        memset(c, 0, sizeof c); \n        for (int i = 1; i < n; i++) {\n            cin >> now;\n            if (now - pre <= 4e5) c[now - pre]++;//标记数已经出现过\n            pre = now;\n        }\n        int cnt = 0, x[N] = {0};//x 数组保存差分数组缺少的数\n        for (int i = 1; i <= n; i++) {\n            if (!c[i]) {\n                cnt++;\n                x[cnt] = i;\n            }\n        }\n        if (cnt > 2) puts(\"NO\");\n        else if (cnt == 1) {\n            if (x[1] + now == (1 + n) * n / 2) puts(\"YES\");\n            else puts(\"NO\");\n        }\n        else {\n            if (now != (1 + n) * n / 2) {\n                puts(\"NO\");\n                continue;\n            }\n            else {\n                puts(\"YES\");\n            }\n        }\n        \n    }\n    return -1;\n}\n```","source":"_posts/CF1851D.md","raw":"---\ntitle: CF1851D\ncover: https://lucky-cloud09.github.io/img/b5.jpg\ncategories: 题解\n---\n\n\n貌似我与大家后面的判断不太一样？\n\n### 分析\n\n由于前缀和的定义，我们可以知道他们的差分便是原数组，下面的差分数组，是题目给出的前缀和的差分。\n \n于是，我们可以用个桶将 $1 \\sim N$ 出现的数存起来。\n\n随后判断每个数是否出现过，若没出现过，使计数器加一。\n\n这里我们假设输出 `YES`。因为前缀和少了一个数，那么我们得到的差分数组则会比原数组少一个元素。如果 $cnt = 2$，则差分数组相较于原数组会有一个不同的元素，而这一个元素便是原数组在差分数组中，没有出现的两个元素的和。如果 $cnt = 1$，那么一定是前缀和的最后一个数加上差分数组缺少的那一个数等于 $1 \\sim N$ 之和。\n\n这个时候我们分三种情况：\n\n1. 如果 $cnt > 2$，我们根据定义可以得出是不可行的，直接输出 `NO`。\n2. 如果 $cnt = 2$，我们则需判断前缀和数组中最后一个元素是否是 $1 \\sim N$ 的和，若相等则输出 `YES`，否则 `NO`。\n3. 如果 $cnt = 1$，我们则判断前缀和的最后一个数加上差分数组缺少的那一个数是否等于 $1 \\sim N$ 之和。\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define vint vector<int>\n#define ull unsigned ll \nusing namespace std;\n \nconst int N = 4e5 + 5;\nll t, n, c[N], pre, now;\n \nint main() {\n\tios::sync_with_stdio(0);\n    cin >> t;\n    while (t--) {\n        pre = 0;\n        cin >> n;\n        // ll sum = 0;\n        memset(c, 0, sizeof c); \n        for (int i = 1; i < n; i++) {\n            cin >> now;\n            if (now - pre <= 4e5) c[now - pre]++;//标记数已经出现过\n            pre = now;\n        }\n        int cnt = 0, x[N] = {0};//x 数组保存差分数组缺少的数\n        for (int i = 1; i <= n; i++) {\n            if (!c[i]) {\n                cnt++;\n                x[cnt] = i;\n            }\n        }\n        if (cnt > 2) puts(\"NO\");\n        else if (cnt == 1) {\n            if (x[1] + now == (1 + n) * n / 2) puts(\"YES\");\n            else puts(\"NO\");\n        }\n        else {\n            if (now != (1 + n) * n / 2) {\n                puts(\"NO\");\n                continue;\n            }\n            else {\n                puts(\"YES\");\n            }\n        }\n        \n    }\n    return -1;\n}\n```","slug":"CF1851D","published":1,"date":"2024-08-27T12:53:47.165Z","updated":"2024-08-27T13:08:21.561Z","_id":"cm0cfoqfx000f358kglxc531g","comments":1,"layout":"post","photos":[],"content":"<p>貌似我与大家后面的判断不太一样？</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>由于前缀和的定义，我们可以知道他们的差分便是原数组，下面的差分数组，是题目给出的前缀和的差分。</p>\n<p>于是，我们可以用个桶将 $1 \\sim N$ 出现的数存起来。</p>\n<p>随后判断每个数是否出现过，若没出现过，使计数器加一。</p>\n<p>这里我们假设输出 <code>YES</code>。因为前缀和少了一个数，那么我们得到的差分数组则会比原数组少一个元素。如果 $cnt = 2$，则差分数组相较于原数组会有一个不同的元素，而这一个元素便是原数组在差分数组中，没有出现的两个元素的和。如果 $cnt = 1$，那么一定是前缀和的最后一个数加上差分数组缺少的那一个数等于 $1 \\sim N$ 之和。</p>\n<p>这个时候我们分三种情况：</p>\n<ol>\n<li>如果 $cnt &gt; 2$，我们根据定义可以得出是不可行的，直接输出 <code>NO</code>。</li>\n<li>如果 $cnt = 2$，我们则需判断前缀和数组中最后一个元素是否是 $1 \\sim N$ 的和，若相等则输出 <code>YES</code>，否则 <code>NO</code>。</li>\n<li>如果 $cnt = 1$，我们则判断前缀和的最后一个数加上差分数组缺少的那一个数是否等于 $1 \\sim N$ 之和。</li>\n</ol>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ll long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> vint vector&lt;int&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ull unsigned ll </span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">4e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">ll t, n, </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[N], pre, now;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (t--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        pre = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">        // ll sum = 0;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(c, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof c); </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; now;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (now - pre &lt;= </span><span style=\"color: #B5CEA8\">4e5</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[now - pre]++;</span><span style=\"color: #6A9955\">//标记数已经出现过</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            pre = now;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> cnt = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">[N] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">//x 数组保存差分数组缺少的数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cnt++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">[cnt] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (cnt &gt; </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;NO&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (cnt == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] + now == (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + n) * n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;YES&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;NO&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (now != (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + n) * n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;NO&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;YES&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>","excerpt":"","more":"<p>貌似我与大家后面的判断不太一样？</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>由于前缀和的定义，我们可以知道他们的差分便是原数组，下面的差分数组，是题目给出的前缀和的差分。</p>\n<p>于是，我们可以用个桶将 $1 \\sim N$ 出现的数存起来。</p>\n<p>随后判断每个数是否出现过，若没出现过，使计数器加一。</p>\n<p>这里我们假设输出 <code>YES</code>。因为前缀和少了一个数，那么我们得到的差分数组则会比原数组少一个元素。如果 $cnt = 2$，则差分数组相较于原数组会有一个不同的元素，而这一个元素便是原数组在差分数组中，没有出现的两个元素的和。如果 $cnt = 1$，那么一定是前缀和的最后一个数加上差分数组缺少的那一个数等于 $1 \\sim N$ 之和。</p>\n<p>这个时候我们分三种情况：</p>\n<ol>\n<li>如果 $cnt &gt; 2$，我们根据定义可以得出是不可行的，直接输出 <code>NO</code>。</li>\n<li>如果 $cnt = 2$，我们则需判断前缀和数组中最后一个元素是否是 $1 \\sim N$ 的和，若相等则输出 <code>YES</code>，否则 <code>NO</code>。</li>\n<li>如果 $cnt = 1$，我们则判断前缀和的最后一个数加上差分数组缺少的那一个数是否等于 $1 \\sim N$ 之和。</li>\n</ol>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ll long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> vint vector&lt;int&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ull unsigned ll </span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">4e5</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">ll t, n, </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[N], pre, now;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (t--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        pre = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">        // ll sum = 0;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(c, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof c); </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; now;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (now - pre &lt;= </span><span style=\"color: #B5CEA8\">4e5</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[now - pre]++;</span><span style=\"color: #6A9955\">//标记数已经出现过</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            pre = now;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> cnt = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">[N] = {</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">};</span><span style=\"color: #6A9955\">//x 数组保存差分数组缺少的数</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                cnt++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">[cnt] = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (cnt &gt; </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;NO&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (cnt == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] + now == (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + n) * n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;YES&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;NO&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (now != (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + n) * n / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;NO&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #DCDCAA\">puts</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&quot;YES&quot;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> -</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>"},{"title":"CF1875D 题解","cover":"https://lucky-cloud09.github.io/img/b4.jpg","_content":"\n很简单的题。~~虽然没在考场上做出来~~\n\n## 分析\n\n我们经过思考，容易得出以下结论：\n\n1. 如果当前 $mex = x$，则下一个删的数一定小于 $x$。\n1. 如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。\n\n我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。\n\n则有：\n\n$$f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])$$\n\n其中 $j > i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。\n\n因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。\n\n设没删任何数的 $mex = first$。\n\n根据定义，初始化 $f[first] = 0$。\n\n根据上述结论，与定义，答案即为 $f[0]$。\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ull unsigned ll \nusing namespace std;\n\nconst int N = 5e3 + 5;\nint t, x, p;\nll c[N], f[N];\nll pre, now, n;\n \nint main() {\n    ios::sync_with_stdio(0);\n    cin >> t;\n    while (t--) {\n        cin >> n;\n        ll mx = 0;\n        memset(c, 0, sizeof c);\n        memset(f, 0x3f, sizeof f);\n        for (int i = 1; i <= n; i++) {\n            ll x;\n            cin >> x;\n            if (x <= 5001) c[x]++, mx = max(mx, x);//因为至多 5000 个数，但数可能大于 5000。\n        }\n        for (int i = 0; i <= mx + 1; i++) {//找到没删任何数时的 mex。\n            if (!c[i]) {\n                p = i;\n                break;\n            }\n        }\n        f[p] = 0;\n        for (int i = p; i >= 0; i--) {\n            for (int j = i - 1; j >= 0; j--) {\n                f[j] = min(f[i] + (c[j] - 1) * i + j, f[j]);\n            }\n        }\n        cout << f[0] << '\\n';\n    }\n    return 0;\n} \n```\n","source":"_posts/CF1875D.md","raw":"---\ntitle: CF1875D 题解\ncover: https://lucky-cloud09.github.io/img/b4.jpg\ncategories: 题解\n---\n\n很简单的题。~~虽然没在考场上做出来~~\n\n## 分析\n\n我们经过思考，容易得出以下结论：\n\n1. 如果当前 $mex = x$，则下一个删的数一定小于 $x$。\n1. 如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。\n\n我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。\n\n则有：\n\n$$f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])$$\n\n其中 $j > i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。\n\n因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。\n\n设没删任何数的 $mex = first$。\n\n根据定义，初始化 $f[first] = 0$。\n\n根据上述结论，与定义，答案即为 $f[0]$。\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ull unsigned ll \nusing namespace std;\n\nconst int N = 5e3 + 5;\nint t, x, p;\nll c[N], f[N];\nll pre, now, n;\n \nint main() {\n    ios::sync_with_stdio(0);\n    cin >> t;\n    while (t--) {\n        cin >> n;\n        ll mx = 0;\n        memset(c, 0, sizeof c);\n        memset(f, 0x3f, sizeof f);\n        for (int i = 1; i <= n; i++) {\n            ll x;\n            cin >> x;\n            if (x <= 5001) c[x]++, mx = max(mx, x);//因为至多 5000 个数，但数可能大于 5000。\n        }\n        for (int i = 0; i <= mx + 1; i++) {//找到没删任何数时的 mex。\n            if (!c[i]) {\n                p = i;\n                break;\n            }\n        }\n        f[p] = 0;\n        for (int i = p; i >= 0; i--) {\n            for (int j = i - 1; j >= 0; j--) {\n                f[j] = min(f[i] + (c[j] - 1) * i + j, f[j]);\n            }\n        }\n        cout << f[0] << '\\n';\n    }\n    return 0;\n} \n```\n","slug":"CF1875D","published":1,"date":"2024-08-27T12:53:47.165Z","updated":"2024-08-27T13:08:24.425Z","_id":"cm0cfoqfy000i358kgw5c4ebi","comments":1,"layout":"post","photos":[],"content":"<p>很简单的题。<del>虽然没在考场上做出来</del></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们经过思考，容易得出以下结论：</p>\n<ol>\n<li>如果当前 $mex = x$，则下一个删的数一定小于 $x$。</li>\n<li>如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。</li>\n</ol>\n<p>我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。</p>\n<p>则有：</p>\n<script type=\"math/tex; mode=display\">f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])</script><p>其中 $j &gt; i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。</p>\n<p>因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。</p>\n<p>设没删任何数的 $mex = first$。</p>\n<p>根据定义，初始化 $f[first] = 0$。</p>\n<p>根据上述结论，与定义，答案即为 $f[0]$。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ll long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ull unsigned ll </span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">5e3</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t, x, p;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">ll </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">ll pre, now, n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (t--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ll mx = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(c, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof c);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(f, </span><span style=\"color: #B5CEA8\">0x3f</span><span style=\"color: #D4D4D4\">, sizeof f);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ll x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x &lt;= </span><span style=\"color: #B5CEA8\">5001</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[x]++, mx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(mx, x);</span><span style=\"color: #6A9955\">//因为至多 5000 个数，但数可能大于 5000。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= mx + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i++) {</span><span style=\"color: #6A9955\">//找到没删任何数时的 mex。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                p = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[p] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = p; i &gt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &gt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[i] + (</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[j] - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) * i + j, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n","excerpt":"","more":"<p>很简单的题。<del>虽然没在考场上做出来</del></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们经过思考，容易得出以下结论：</p>\n<ol>\n<li>如果当前 $mex = x$，则下一个删的数一定小于 $x$。</li>\n<li>如果 $mex = 0$，那么我们就可以不往下算了，因为它们对答案的贡献为 $0$。</li>\n</ol>\n<p>我们设 $f[i]$ 表示当 $mex = i$ 时，$m$ 的值。</p>\n<p>则有：</p>\n<script type=\"math/tex; mode=display\">f[i] = \\min(f[j] + (c[i] - 1) \\times j + i, f[i])</script><p>其中 $j &gt; i$，$c[i]$ 表示 $i$ 在 $a$ 中的个数。</p>\n<p>因为，我们要使 $mex = i$，就必须将 $i$ 这个数删去，并且 $0 \\sim i-1$ 都还存在于 $a$ 中。我们会删 $c[i]$ 次，但 $c[i] - 1$ 次，$m$ 会加上上一个 $mex$ 的值。 第 $c[i]$ 次则会加上 $i$，也就是新的 $mex$。</p>\n<p>设没删任何数的 $mex = first$。</p>\n<p>根据定义，初始化 $f[first] = 0$。</p>\n<p>根据上述结论，与定义，答案即为 $f[0]$。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ll long long</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">#define</span><span style=\"color: #569CD6\"> ull unsigned ll </span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">5e3</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> t, x, p;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">ll </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">ll pre, now, n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; t;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (t--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        ll mx = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(c, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof c);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(f, </span><span style=\"color: #B5CEA8\">0x3f</span><span style=\"color: #D4D4D4\">, sizeof f);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ll x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            cin &gt;&gt; x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x &lt;= </span><span style=\"color: #B5CEA8\">5001</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[x]++, mx = </span><span style=\"color: #DCDCAA\">max</span><span style=\"color: #D4D4D4\">(mx, x);</span><span style=\"color: #6A9955\">//因为至多 5000 个数，但数可能大于 5000。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= mx + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i++) {</span><span style=\"color: #6A9955\">//找到没删任何数时的 mex。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                p = i;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[p] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = p; i &gt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = i - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &gt;= </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">                </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[i] + (</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[j] - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) * i + j, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        cout &lt;&lt; </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n"},{"title":"CF467B Fedor and New Game","cover":"https://lucky-cloud09.github.io/img/b1.jpg","date":"2023-10-01T16:00:00.000Z","_content":"\n## 前言\n\n[传送门](https://www.luogu.com.cn/problem/CF467B)\n\n本题思维难度：橙。\n\n本题代码难度：橙或红。\n\n综合难度：橙。\n\n本人代码码量位居第二，但是呢，我的空格多，所以，还不来看一下？\n\n## 题意\n\n根据题目，若两人一人有 $j$，一人没 $j$，则异或后，第 $j$ 位为 $1$。\n\n那么，题目转化为：已知有 $m + 1$ 个数，求出满足 $a_i$ 异或 $a_{m + 1}$ 结果的 $1$ 的个数小于等于 $k$ 这样的 $i$ 的个数。其中 $1 \\le i < m + 1$。\n\n## 分析\n\n题意转化的差不多了。简单模拟即可。\n\n我们并不需要使用 `std::bitset`。\n\n这里，我们引入一个函数 `__builtin_popcount()`，可以计算一个**整数**二进制下有多少个 $1$。\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 5005;\nint n, m, k, a[N], ans;\n\nint main() {\n\tcin >> n >> m >> k;\n\tm++;\n\tfor (int i = 1; i <= m; i++) cin >> a[i];\n\tfor (int i = 1; i < m; i++) \n\t\tif (__builtin_popcount(a[i] ^ a[m]) <= k)\n\t\t\tans++;\n\tcout << ans;\n\treturn 0;\n}\n```\n","source":"_posts/CF467B.md","raw":"---\ntitle: CF467B Fedor and New Game\ncover: https://lucky-cloud09.github.io/img/b1.jpg\ncategories: 题解\ndate: 2023/10/2\n---\n\n## 前言\n\n[传送门](https://www.luogu.com.cn/problem/CF467B)\n\n本题思维难度：橙。\n\n本题代码难度：橙或红。\n\n综合难度：橙。\n\n本人代码码量位居第二，但是呢，我的空格多，所以，还不来看一下？\n\n## 题意\n\n根据题目，若两人一人有 $j$，一人没 $j$，则异或后，第 $j$ 位为 $1$。\n\n那么，题目转化为：已知有 $m + 1$ 个数，求出满足 $a_i$ 异或 $a_{m + 1}$ 结果的 $1$ 的个数小于等于 $k$ 这样的 $i$ 的个数。其中 $1 \\le i < m + 1$。\n\n## 分析\n\n题意转化的差不多了。简单模拟即可。\n\n我们并不需要使用 `std::bitset`。\n\n这里，我们引入一个函数 `__builtin_popcount()`，可以计算一个**整数**二进制下有多少个 $1$。\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 5005;\nint n, m, k, a[N], ans;\n\nint main() {\n\tcin >> n >> m >> k;\n\tm++;\n\tfor (int i = 1; i <= m; i++) cin >> a[i];\n\tfor (int i = 1; i < m; i++) \n\t\tif (__builtin_popcount(a[i] ^ a[m]) <= k)\n\t\t\tans++;\n\tcout << ans;\n\treturn 0;\n}\n```\n","slug":"CF467B","published":1,"updated":"2024-09-06T12:41:03.461Z","_id":"cm0cfoqfz000j358k2rabgszw","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"https://www.luogu.com.cn/problem/CF467B\">传送门</a></p>\n<p>本题思维难度：橙。</p>\n<p>本题代码难度：橙或红。</p>\n<p>综合难度：橙。</p>\n<p>本人代码码量位居第二，但是呢，我的空格多，所以，还不来看一下？</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>根据题目，若两人一人有 $j$，一人没 $j$，则异或后，第 $j$ 位为 $1$。</p>\n<p>那么，题目转化为：已知有 $m + 1$ 个数，求出满足 $a_i$ 异或 $a_{m + 1}$ 结果的 $1$ 的个数小于等于 $k$ 这样的 $i$ 的个数。其中 $1 \\le i &lt; m + 1$。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题意转化的差不多了。简单模拟即可。</p>\n<p>我们并不需要使用 <code>std::bitset</code>。</p>\n<p>这里，我们引入一个函数 <code>__builtin_popcount()</code>，可以计算一个<strong>整数</strong>二进制下有多少个 $1$。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">5005</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, m, k, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N], ans;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tm++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; m; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__builtin_popcount</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] ^ </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[m]) &lt;= k)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"https://www.luogu.com.cn/problem/CF467B\">传送门</a></p>\n<p>本题思维难度：橙。</p>\n<p>本题代码难度：橙或红。</p>\n<p>综合难度：橙。</p>\n<p>本人代码码量位居第二，但是呢，我的空格多，所以，还不来看一下？</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>根据题目，若两人一人有 $j$，一人没 $j$，则异或后，第 $j$ 位为 $1$。</p>\n<p>那么，题目转化为：已知有 $m + 1$ 个数，求出满足 $a_i$ 异或 $a_{m + 1}$ 结果的 $1$ 的个数小于等于 $k$ 这样的 $i$ 的个数。其中 $1 \\le i &lt; m + 1$。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题意转化的差不多了。简单模拟即可。</p>\n<p>我们并不需要使用 <code>std::bitset</code>。</p>\n<p>这里，我们引入一个函数 <code>__builtin_popcount()</code>，可以计算一个<strong>整数</strong>二进制下有多少个 $1$。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">5005</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, m, k, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N], ans;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tm++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= m; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; m; i++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__builtin_popcount</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i] ^ </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[m]) &lt;= k)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n"},{"title":"CF755F 题解","cover":"https://lucky-cloud09.github.io/img/b3.jpg","date":"2023-10-01T16:00:00.000Z","_content":"\n\n## 前言\n\n随机跳题跳来的。本来以为很简单，结果花了我这个蒟蒻三个多小时。果然还是太蒻了呀。~~还有题目中的拖拉机是什么呀？~~\n\n于是，题解记之。\n\n## 题意\n\n[传送门](https://www.luogu.com.cn/problem/CF755F)\n\n## 分析\n\n我们容易发现，若把每个人当做一个点，那么给人送礼物，则是向这个人连一条边。\n\n看不懂？直接上图！\n\n![图片走丢力](https://lucky-cloud09.github.io/img/8s1av0ww.png)\n\n上图表示的是：\n\n```\n5 2\n3 4 1 5 2\n```\n这一组数据。当然有向或无向都对这题没有影响。\n\n根据观察，容易得出，这个图是由若干个环组成的，并且，环的个数也就是连通块的个数。\n\n那么，我们便可以处理出环的个数，与他所包含的点的个数，也就是人的个数。\n\n```cpp\ninline int dfs(int x) {//处理出环的中有多少个点。\n    v[x] = 1;\n    if (v[p[x]]) return 1;\n    return dfs(p[x]) + 1;\n}\n```\n\n```cpp\nfor (int i = 1; i <= n; i++)//处理有多少个环（连通块）\n        if (!v[i]) cnt[++len] = dfs(i);\n```\n\n### 最大值\n\n最大值相对于最小值会简单一点。\n\n我们想一想很容易得出，若是有一个人没有礼物，**那么他要给的对象与他自己都没有礼物**。为避免思维僵化，请读者自行证明。\n\n那么，我们便可以分奇数环与偶数换来讨论。设环中点的数量为 $x$。\n\n1. 偶数个。那么就可以分成 $\\frac{k}{2}$ 组，使每一组任意一个人没带，则他要给的对象与他自己都没有礼物。\n1. 奇数个。那么就可以分成 $\\lfloor \\frac{k}{2} \\rfloor$ 组与多出来的一个人。\n\n若 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$，那么，答案即为 $k \\times 2$。否则我们就将 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$ 加上，然后再在奇数环中找多出来的一个数，直至加到大于 $k$ 或 人数等于 $n$ 时停止。\n\n### 最小值\n\n刚开始，我也觉得这是贪心，直至我 WA 了不知道多少次，想通了，这是个 DP ！！！\n\n在这里，给组对于贪心的 hack。\n\n输入：\n```\n10 7\n9 6 2 8 1 3 10 4 5 7\n```\n输出：\n```\n7 10\n```\n如下图。\n\n![图片走掉力](https://lucky-cloud09.github.io/img/ahvmr3tu.png)\n\n容易的，我们可以想出，尽量使一整个环内的人不带礼物。\n\n略微证明一下：\n\n设有一个环内都是没带礼物的人，人数为 $x$，另一个环都带了礼物，剩下的环保持不变，且人数大于一。那么这两个环内一共就有 $x$ 人没有礼物，但是当这个环有了一个人带了礼物，因为总共没带礼物的人数相同，那么两个环分别就有 $x - 1$ 与 $1$ 个人没带礼物，根据最大值那里的推论，总共就有 $x + 2$ 个人没有礼物。\n\n那么，也就是说，我们需要使这 $len$ 个环中，抽出几个环，若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物，若不等于有 $k + 1$ 人。请读者自行思考为什么。~~但是我还是会说的~~。\n\n根据上述内容可以得出若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物。\n\n若要使有 $k + 1$ 个人没有礼物，则使没有礼物的人都不得到礼物。但是，我们肯定会多出来一个人不能给没有礼物的人礼物，则有一个带了礼物的人没有送来的礼物。\n\n~~有点绕，自行理解一下，当然，看不懂，是我的问题。~~\n\n显然就考虑背包 DP。\n\n```cpp\nfor (int i = 1; i <= len; i++)\n        for (int j = k; j >= cnt[i]; j--)\n            f[j] |= f[j - cnt[i]];\n```\n$f[i]$ 表示能不能用若干个环组合出 $i$ 个人没带礼物。\n\n时间复杂度 $O(n \\times m)$。肯定会爆，考虑优化。\n\n我们可以知道大多数的环中的人的数量是相同的。那么这题就转化成了多重背包，我们就可以用二进制优化。\n\n```cpp\ninline void fen(int x, int v) {二进制优化\n    for (int i = 1; x > 0; i <<= 1) {\n        int j = min(i, x);\n        a[++l] = j * v;\n        x -= j;\n    }\n}\n```\n\n时间复杂度就降下来了。可以过。\n\n## Code\n~~我代码写得太差了，建议大家参考其他题解的代码。~~\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \nconst int N = 1e6 + 5;\nint n, p[N], cnt[N], len, k, ans;\nint c[N], l, a[N], mx, f[N * 10];//f 开 1e7 是因为二进制拆分会产生 nlogn 个数。但到不了极限。\nbool v[N];\n \ninline int dfs(int x) {//处理出环的中有多少个点。\n    v[x] = 1;\n    if (v[p[x]]) return 1;\n    return dfs(p[x]) + 1;\n}\n\ninline void fen(int x, int v) {二进制优化\n    for (int i = 1; x > 0; i <<= 1) {\n        int j = min(i, x);\n        a[++l] = j * v;\n        x -= j;\n    }\n}\n \nint main() {\n    ios::sync_with_stdio(0);\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) cin >> p[i];\n    for (int i = 1; i <= n; i++)//处理有多少个环（连通块）\n        if (!v[i]) cnt[++len] = dfs(i), c[cnt[len]]++;\n    sort(cnt + 1, cnt + 1 + len);//最大值需要\n    for (int i = 1; i <= n; i++) if (c[i]) fen(c[i], i);\n    f[0] = 1;\n    for (int i = 1; i <= l; i++)\n        for (int j = k; j >= a[i]; j--)\n            f[j] |= f[j - a[i]];\n    int kk = k;\n    if (!f[k]) cout << k + 1 << ' ';\n    else cout << k << ' ';//最小值\n    ans = 0;\n    for (int i = len; i > 0; i--) {\n        if (cnt[i] <= kk * 2) {\n            if (cnt[i] & 1) ans += cnt[i] - 1, kk -= cnt[i] / 2, cnt[i] = 1;\n            else ans += cnt[i], kk -= cnt[i] / 2, cnt[i] = 0;\n        }\n        else {//排序的原因，这样就可以提前 break。\n            ans += kk * 2;\n            kk = 0;\n            break;\n        }\n        if (!kk) break;\n    }\n    for (int i = 1; i <= len; i++) {//处理奇数环\n        if (!kk) {\n            break;\n        }\n        else {\n            kk -= cnt[i];\n            ans += cnt[i];\n        }\n    }\n    cout << min(ans, n);\n    return 0;\n}\n```\n## 后记\n~~本蒟蒻写过的最长的一篇题解吧。~~\n\n在本人退役前或有空会来解答问题。","source":"_posts/CF755F.md","raw":"---\ntitle: CF755F 题解\ncategories: 题解\ncover: https://lucky-cloud09.github.io/img/b3.jpg\ndate: 2023/10/2\n---\n\n\n## 前言\n\n随机跳题跳来的。本来以为很简单，结果花了我这个蒟蒻三个多小时。果然还是太蒻了呀。~~还有题目中的拖拉机是什么呀？~~\n\n于是，题解记之。\n\n## 题意\n\n[传送门](https://www.luogu.com.cn/problem/CF755F)\n\n## 分析\n\n我们容易发现，若把每个人当做一个点，那么给人送礼物，则是向这个人连一条边。\n\n看不懂？直接上图！\n\n![图片走丢力](https://lucky-cloud09.github.io/img/8s1av0ww.png)\n\n上图表示的是：\n\n```\n5 2\n3 4 1 5 2\n```\n这一组数据。当然有向或无向都对这题没有影响。\n\n根据观察，容易得出，这个图是由若干个环组成的，并且，环的个数也就是连通块的个数。\n\n那么，我们便可以处理出环的个数，与他所包含的点的个数，也就是人的个数。\n\n```cpp\ninline int dfs(int x) {//处理出环的中有多少个点。\n    v[x] = 1;\n    if (v[p[x]]) return 1;\n    return dfs(p[x]) + 1;\n}\n```\n\n```cpp\nfor (int i = 1; i <= n; i++)//处理有多少个环（连通块）\n        if (!v[i]) cnt[++len] = dfs(i);\n```\n\n### 最大值\n\n最大值相对于最小值会简单一点。\n\n我们想一想很容易得出，若是有一个人没有礼物，**那么他要给的对象与他自己都没有礼物**。为避免思维僵化，请读者自行证明。\n\n那么，我们便可以分奇数环与偶数换来讨论。设环中点的数量为 $x$。\n\n1. 偶数个。那么就可以分成 $\\frac{k}{2}$ 组，使每一组任意一个人没带，则他要给的对象与他自己都没有礼物。\n1. 奇数个。那么就可以分成 $\\lfloor \\frac{k}{2} \\rfloor$ 组与多出来的一个人。\n\n若 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$，那么，答案即为 $k \\times 2$。否则我们就将 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$ 加上，然后再在奇数环中找多出来的一个数，直至加到大于 $k$ 或 人数等于 $n$ 时停止。\n\n### 最小值\n\n刚开始，我也觉得这是贪心，直至我 WA 了不知道多少次，想通了，这是个 DP ！！！\n\n在这里，给组对于贪心的 hack。\n\n输入：\n```\n10 7\n9 6 2 8 1 3 10 4 5 7\n```\n输出：\n```\n7 10\n```\n如下图。\n\n![图片走掉力](https://lucky-cloud09.github.io/img/ahvmr3tu.png)\n\n容易的，我们可以想出，尽量使一整个环内的人不带礼物。\n\n略微证明一下：\n\n设有一个环内都是没带礼物的人，人数为 $x$，另一个环都带了礼物，剩下的环保持不变，且人数大于一。那么这两个环内一共就有 $x$ 人没有礼物，但是当这个环有了一个人带了礼物，因为总共没带礼物的人数相同，那么两个环分别就有 $x - 1$ 与 $1$ 个人没带礼物，根据最大值那里的推论，总共就有 $x + 2$ 个人没有礼物。\n\n那么，也就是说，我们需要使这 $len$ 个环中，抽出几个环，若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物，若不等于有 $k + 1$ 人。请读者自行思考为什么。~~但是我还是会说的~~。\n\n根据上述内容可以得出若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物。\n\n若要使有 $k + 1$ 个人没有礼物，则使没有礼物的人都不得到礼物。但是，我们肯定会多出来一个人不能给没有礼物的人礼物，则有一个带了礼物的人没有送来的礼物。\n\n~~有点绕，自行理解一下，当然，看不懂，是我的问题。~~\n\n显然就考虑背包 DP。\n\n```cpp\nfor (int i = 1; i <= len; i++)\n        for (int j = k; j >= cnt[i]; j--)\n            f[j] |= f[j - cnt[i]];\n```\n$f[i]$ 表示能不能用若干个环组合出 $i$ 个人没带礼物。\n\n时间复杂度 $O(n \\times m)$。肯定会爆，考虑优化。\n\n我们可以知道大多数的环中的人的数量是相同的。那么这题就转化成了多重背包，我们就可以用二进制优化。\n\n```cpp\ninline void fen(int x, int v) {二进制优化\n    for (int i = 1; x > 0; i <<= 1) {\n        int j = min(i, x);\n        a[++l] = j * v;\n        x -= j;\n    }\n}\n```\n\n时间复杂度就降下来了。可以过。\n\n## Code\n~~我代码写得太差了，建议大家参考其他题解的代码。~~\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \nconst int N = 1e6 + 5;\nint n, p[N], cnt[N], len, k, ans;\nint c[N], l, a[N], mx, f[N * 10];//f 开 1e7 是因为二进制拆分会产生 nlogn 个数。但到不了极限。\nbool v[N];\n \ninline int dfs(int x) {//处理出环的中有多少个点。\n    v[x] = 1;\n    if (v[p[x]]) return 1;\n    return dfs(p[x]) + 1;\n}\n\ninline void fen(int x, int v) {二进制优化\n    for (int i = 1; x > 0; i <<= 1) {\n        int j = min(i, x);\n        a[++l] = j * v;\n        x -= j;\n    }\n}\n \nint main() {\n    ios::sync_with_stdio(0);\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) cin >> p[i];\n    for (int i = 1; i <= n; i++)//处理有多少个环（连通块）\n        if (!v[i]) cnt[++len] = dfs(i), c[cnt[len]]++;\n    sort(cnt + 1, cnt + 1 + len);//最大值需要\n    for (int i = 1; i <= n; i++) if (c[i]) fen(c[i], i);\n    f[0] = 1;\n    for (int i = 1; i <= l; i++)\n        for (int j = k; j >= a[i]; j--)\n            f[j] |= f[j - a[i]];\n    int kk = k;\n    if (!f[k]) cout << k + 1 << ' ';\n    else cout << k << ' ';//最小值\n    ans = 0;\n    for (int i = len; i > 0; i--) {\n        if (cnt[i] <= kk * 2) {\n            if (cnt[i] & 1) ans += cnt[i] - 1, kk -= cnt[i] / 2, cnt[i] = 1;\n            else ans += cnt[i], kk -= cnt[i] / 2, cnt[i] = 0;\n        }\n        else {//排序的原因，这样就可以提前 break。\n            ans += kk * 2;\n            kk = 0;\n            break;\n        }\n        if (!kk) break;\n    }\n    for (int i = 1; i <= len; i++) {//处理奇数环\n        if (!kk) {\n            break;\n        }\n        else {\n            kk -= cnt[i];\n            ans += cnt[i];\n        }\n    }\n    cout << min(ans, n);\n    return 0;\n}\n```\n## 后记\n~~本蒟蒻写过的最长的一篇题解吧。~~\n\n在本人退役前或有空会来解答问题。","slug":"CF755F","published":1,"updated":"2024-09-06T12:40:58.965Z","_id":"cm0cfoqg0000m358k6uz67gvr","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随机跳题跳来的。本来以为很简单，结果花了我这个蒟蒻三个多小时。果然还是太蒻了呀。<del>还有题目中的拖拉机是什么呀？</del></p>\n<p>于是，题解记之。</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p><a href=\"https://www.luogu.com.cn/problem/CF755F\">传送门</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们容易发现，若把每个人当做一个点，那么给人送礼物，则是向这个人连一条边。</p>\n<p>看不懂？直接上图！</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://lucky-cloud09.github.io/img/8s1av0ww.png\" alt=\"图片走丢力\" data-caption=\"图片走丢力\" loading=\"lazy\"></p>\n<p>上图表示的是：</p>\n<figure class=\"shiki\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">5 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 4 1 5 2</span></span></code></pre></div></div></figure>\n<p>这一组数据。当然有向或无向都对这题没有影响。</p>\n<p>根据观察，容易得出，这个图是由若干个环组成的，并且，环的个数也就是连通块的个数。</p>\n<p>那么，我们便可以处理出环的个数，与他所包含的点的个数，也就是人的个数。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//处理出环的中有多少个点。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]]) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++)</span><span style=\"color: #6A9955\">//处理有多少个环（连通块）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[++len] = </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i);</span></span></code></pre></div></div></figure>\n<h3 id=\"最大值\"><a href=\"#最大值\" class=\"headerlink\" title=\"最大值\"></a>最大值</h3><p>最大值相对于最小值会简单一点。</p>\n<p>我们想一想很容易得出，若是有一个人没有礼物，<strong>那么他要给的对象与他自己都没有礼物</strong>。为避免思维僵化，请读者自行证明。</p>\n<p>那么，我们便可以分奇数环与偶数换来讨论。设环中点的数量为 $x$。</p>\n<ol>\n<li>偶数个。那么就可以分成 $\\frac{k}{2}$ 组，使每一组任意一个人没带，则他要给的对象与他自己都没有礼物。</li>\n<li>奇数个。那么就可以分成 $\\lfloor \\frac{k}{2} \\rfloor$ 组与多出来的一个人。</li>\n</ol>\n<p>若 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$，那么，答案即为 $k \\times 2$。否则我们就将 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$ 加上，然后再在奇数环中找多出来的一个数，直至加到大于 $k$ 或 人数等于 $n$ 时停止。</p>\n<h3 id=\"最小值\"><a href=\"#最小值\" class=\"headerlink\" title=\"最小值\"></a>最小值</h3><p>刚开始，我也觉得这是贪心，直至我 WA 了不知道多少次，想通了，这是个 DP ！！！</p>\n<p>在这里，给组对于贪心的 hack。</p>\n<p>输入：<br><figure class=\"shiki\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">10 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">9 6 2 8 1 3 10 4 5 7</span></span></code></pre></div></div></figure><br>输出：<br><figure class=\"shiki\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">7 10</span></span></code></pre></div></div></figure><br>如下图。</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://lucky-cloud09.github.io/img/ahvmr3tu.png\" alt=\"图片走掉力\" data-caption=\"图片走掉力\" loading=\"lazy\"></p>\n<p>容易的，我们可以想出，尽量使一整个环内的人不带礼物。</p>\n<p>略微证明一下：</p>\n<p>设有一个环内都是没带礼物的人，人数为 $x$，另一个环都带了礼物，剩下的环保持不变，且人数大于一。那么这两个环内一共就有 $x$ 人没有礼物，但是当这个环有了一个人带了礼物，因为总共没带礼物的人数相同，那么两个环分别就有 $x - 1$ 与 $1$ 个人没带礼物，根据最大值那里的推论，总共就有 $x + 2$ 个人没有礼物。</p>\n<p>那么，也就是说，我们需要使这 $len$ 个环中，抽出几个环，若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物，若不等于有 $k + 1$ 人。请读者自行思考为什么。<del>但是我还是会说的</del>。</p>\n<p>根据上述内容可以得出若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物。</p>\n<p>若要使有 $k + 1$ 个人没有礼物，则使没有礼物的人都不得到礼物。但是，我们肯定会多出来一个人不能给没有礼物的人礼物，则有一个带了礼物的人没有送来的礼物。</p>\n<p><del>有点绕，自行理解一下，当然，看不懂，是我的问题。</del></p>\n<p>显然就考虑背包 DP。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= len; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = k; j &gt;= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i]; j--)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] |= </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j - </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i]];</span></span></code></pre></div></div></figure>\n<p>$f[i]$ 表示能不能用若干个环组合出 $i$ 个人没带礼物。</p>\n<p>时间复杂度 $O(n \\times m)$。肯定会爆，考虑优化。</p>\n<p>我们可以知道大多数的环中的人的数量是相同的。那么这题就转化成了多重背包，我们就可以用二进制优化。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">) {二进制优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; x &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;&lt;= </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[++l] = j * v;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        x -= j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>时间复杂度就降下来了。可以过。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><del>我代码写得太差了，建议大家参考其他题解的代码。</del><br><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">1e6</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[N], len, k, ans;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[N], l, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N], mx, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[N * </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//f 开 1e7 是因为二进制拆分会产生 nlogn 个数。但到不了极限。</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//处理出环的中有多少个点。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]]) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">) {二进制优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; x &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;&lt;= </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[++l] = j * v;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        x -= j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++)</span><span style=\"color: #6A9955\">//处理有多少个环（连通块）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[++len] = </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i), </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[len]]++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(cnt + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, cnt + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + len);</span><span style=\"color: #6A9955\">//最大值需要</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #DCDCAA\">fen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i], i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= l; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = k; j &gt;= </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]; j--)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] |= </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j - </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> kk = k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[k]) cout &lt;&lt; k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39; &#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> cout &lt;&lt; k &lt;&lt; </span><span style=\"color: #CE9178\">&#39; &#39;</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//最小值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ans = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = len; i &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] &lt;= kk * </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] &amp; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) ans += </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, kk -= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> ans += </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i], kk -= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span><span style=\"color: #6A9955\">//排序的原因，这样就可以提前 break。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ans += kk * </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            kk = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!kk) </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= len; i++) {</span><span style=\"color: #6A9955\">//处理奇数环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!kk) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            kk -= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ans += </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cout &lt;&lt; </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, n);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p><del>本蒟蒻写过的最长的一篇题解吧。</del></p>\n<p>在本人退役前或有空会来解答问题。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随机跳题跳来的。本来以为很简单，结果花了我这个蒟蒻三个多小时。果然还是太蒻了呀。<del>还有题目中的拖拉机是什么呀？</del></p>\n<p>于是，题解记之。</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p><a href=\"https://www.luogu.com.cn/problem/CF755F\">传送门</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们容易发现，若把每个人当做一个点，那么给人送礼物，则是向这个人连一条边。</p>\n<p>看不懂？直接上图！</p>\n<p><img src=\"https://lucky-cloud09.github.io/img/8s1av0ww.png\" alt=\"图片走丢力\"></p>\n<p>上图表示的是：</p>\n<figure class=\"shiki\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">5 2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">3 4 1 5 2</span></span></code></pre></div></div></figure>\n<p>这一组数据。当然有向或无向都对这题没有影响。</p>\n<p>根据观察，容易得出，这个图是由若干个环组成的，并且，环的个数也就是连通块的个数。</p>\n<p>那么，我们便可以处理出环的个数，与他所包含的点的个数，也就是人的个数。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//处理出环的中有多少个点。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]]) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++)</span><span style=\"color: #6A9955\">//处理有多少个环（连通块）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[++len] = </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i);</span></span></code></pre></div></div></figure>\n<h3 id=\"最大值\"><a href=\"#最大值\" class=\"headerlink\" title=\"最大值\"></a>最大值</h3><p>最大值相对于最小值会简单一点。</p>\n<p>我们想一想很容易得出，若是有一个人没有礼物，<strong>那么他要给的对象与他自己都没有礼物</strong>。为避免思维僵化，请读者自行证明。</p>\n<p>那么，我们便可以分奇数环与偶数换来讨论。设环中点的数量为 $x$。</p>\n<ol>\n<li>偶数个。那么就可以分成 $\\frac{k}{2}$ 组，使每一组任意一个人没带，则他要给的对象与他自己都没有礼物。</li>\n<li>奇数个。那么就可以分成 $\\lfloor \\frac{k}{2} \\rfloor$ 组与多出来的一个人。</li>\n</ol>\n<p>若 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$，那么，答案即为 $k \\times 2$。否则我们就将 $\\sum \\lfloor \\frac{c[i]}{2} \\rfloor \\ge k$ 加上，然后再在奇数环中找多出来的一个数，直至加到大于 $k$ 或 人数等于 $n$ 时停止。</p>\n<h3 id=\"最小值\"><a href=\"#最小值\" class=\"headerlink\" title=\"最小值\"></a>最小值</h3><p>刚开始，我也觉得这是贪心，直至我 WA 了不知道多少次，想通了，这是个 DP ！！！</p>\n<p>在这里，给组对于贪心的 hack。</p>\n<p>输入：<br><figure class=\"shiki\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">10 7</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">9 6 2 8 1 3 10 4 5 7</span></span></code></pre></div></div></figure><br>输出：<br><figure class=\"shiki\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">7 10</span></span></code></pre></div></div></figure><br>如下图。</p>\n<p><img src=\"https://lucky-cloud09.github.io/img/ahvmr3tu.png\" alt=\"图片走掉力\"></p>\n<p>容易的，我们可以想出，尽量使一整个环内的人不带礼物。</p>\n<p>略微证明一下：</p>\n<p>设有一个环内都是没带礼物的人，人数为 $x$，另一个环都带了礼物，剩下的环保持不变，且人数大于一。那么这两个环内一共就有 $x$ 人没有礼物，但是当这个环有了一个人带了礼物，因为总共没带礼物的人数相同，那么两个环分别就有 $x - 1$ 与 $1$ 个人没带礼物，根据最大值那里的推论，总共就有 $x + 2$ 个人没有礼物。</p>\n<p>那么，也就是说，我们需要使这 $len$ 个环中，抽出几个环，若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物，若不等于有 $k + 1$ 人。请读者自行思考为什么。<del>但是我还是会说的</del>。</p>\n<p>根据上述内容可以得出若他们人数总值等于 $k$，那么肯定是最少有 $k$ 个人没有礼物。</p>\n<p>若要使有 $k + 1$ 个人没有礼物，则使没有礼物的人都不得到礼物。但是，我们肯定会多出来一个人不能给没有礼物的人礼物，则有一个带了礼物的人没有送来的礼物。</p>\n<p><del>有点绕，自行理解一下，当然，看不懂，是我的问题。</del></p>\n<p>显然就考虑背包 DP。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= len; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = k; j &gt;= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i]; j--)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] |= </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j - </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i]];</span></span></code></pre></div></div></figure>\n<p>$f[i]$ 表示能不能用若干个环组合出 $i$ 个人没带礼物。</p>\n<p>时间复杂度 $O(n \\times m)$。肯定会爆，考虑优化。</p>\n<p>我们可以知道大多数的环中的人的数量是相同的。那么这题就转化成了多重背包，我们就可以用二进制优化。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">) {二进制优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; x &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;&lt;= </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[++l] = j * v;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        x -= j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>时间复杂度就降下来了。可以过。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><del>我代码写得太差了，建议大家参考其他题解的代码。</del><br><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">1e6</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[N], len, k, ans;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[N], l, </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N], mx, </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[N * </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">];</span><span style=\"color: #6A9955\">//f 开 1e7 是因为二进制拆分会产生 nlogn 个数。但到不了极限。</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #6A9955\">//处理出环的中有多少个点。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]]) </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[x]) + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">inline</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">fen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">) {二进制优化</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; x &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;&lt;= </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[++l] = j * v;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        x -= j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> </span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cin &gt;&gt; n &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">p</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++)</span><span style=\"color: #6A9955\">//处理有多少个环（连通块）</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[++len] = </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i), </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[len]]++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(cnt + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, cnt + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> + len);</span><span style=\"color: #6A9955\">//最大值需要</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #DCDCAA\">fen</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i], i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= l; i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = k; j &gt;= </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]; j--)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j] |= </span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[j - </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i]];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> kk = k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">f</span><span style=\"color: #D4D4D4\">[k]) cout &lt;&lt; k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39; &#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> cout &lt;&lt; k &lt;&lt; </span><span style=\"color: #CE9178\">&#39; &#39;</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//最小值</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ans = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = len; i &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i--) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] &lt;= kk * </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] &amp; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) ans += </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, kk -= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> ans += </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i], kk -= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] / </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span><span style=\"color: #6A9955\">//排序的原因，这样就可以提前 break。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ans += kk * </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            kk = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!kk) </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= len; i++) {</span><span style=\"color: #6A9955\">//处理奇数环</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!kk) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            </span><span style=\"color: #C586C0\">break</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        </span><span style=\"color: #C586C0\">else</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            kk -= </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">            ans += </span><span style=\"color: #9CDCFE\">cnt</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">        }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    cout &lt;&lt; </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, n);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p><del>本蒟蒻写过的最长的一篇题解吧。</del></p>\n<p>在本人退役前或有空会来解答问题。</p>\n"},{"title":"P6491 [COCI2010-2011#6] ABECEDA","cover":"https://lucky-cloud09.github.io/img/b5.jpg","date":"2023-10-01T16:00:00.000Z","_content":"## 前言\n\n思维难度：绿。\n\n代码难度：绿/蓝。\n\n综合：绿/蓝。\n\n带来两种做法。主要是预处理的部分不同，所以就来水一篇。\n\n[传送门](https://www.luogu.com.cn/problem/P6491)。\n\n[前置芝士](https://oi-wiki.org/graph/topo/)。\n\n## 分析\n\n我们很容易想到通过输入去确定大概的大小。具体地，对于两字符串，若前 $i - 1$ 位相同，那么我们要么通过第 $i$ 位确定大小，要么第 $i$ 位相同去比较后面。但我们有多个字符串，容易想到，用 `vector` 存前 $i - 1$ 位相同的 $s[j][i]$。然后根据先后顺序去大致确定粗略的大小。\n\n```cpp\n\tfor (int i = 0; i < len; i++) {\n\t\tstring now = \"\";\n\t\tif (v.size()) v.clear();\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j].size() < i + 1) continue;//若这一个字符串的大小小于当前枚举的位数，则跳过。\n\t\t\tv2[s[j][i] - 'a'] = 1;//记录在输入中出现过的字母。\n\t\t\tstring sub = \"\";\n\t\t\tfor (int k = 0; k < i; k++) sub = sub + s[j][k];\n\t\t\tif (sub != now) {//若前 i - 1 位不同，就进行处理。\n\t\t\t\tnow = sub;\n\t\t\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。\n\t\t\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;//确定大致的大小关系。当然，也有其他写法\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\tv.push_back(s[j][i]);//存下当前位，与后面的字母比较\n\t\t}\n\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //最后可能有余下的，也要处理。\n\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;\n\t}\n```\n\n然后若合法，我们这样可以将字典序大的连字典序小连成一个有向无环图，如样例一。\n\n![图片走丢了](https://lucky-cloud09.github.io/img/yptw2sdw.png)\n\n若不合法，就如样例二，会有个环。\n\n![图片走丢了](https://lucky-cloud09.github.io/img/55o9hioj.png)\n\n而如果说有多种情况，图是不连通的。\n\n那么，我们就有两种方法去做。\n\n### 利用 DFS\n\n很容易，若图跑着跑着又回到了起点，那么一定又环，当然，我们**不走重复的路**，而且我们不用一次走完。然后，我们在走的时候，又可以将途经的点都给做标记，说明这个点小于起点，最终跑到出度为 $0$ 的点。\n\n```cpp\nvoid dfs(int now, int x) {\n\tv1[x] = 1;//标记点到过了。\n\tif (x != now) b[now][x] = 1;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (b[i][now]) {\n\t\t\tif (i == x) {//到了起点，说明有环。\n\t\t\t\tcout << '!' << '\\n';\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tif (!v1[i]) dfs(i, x);\n\t\t}\n\t}\n}\n```\n\n然后我们去找每一个字母字典序大于多少个字母，然后记录下来，最后将记录下来的数组排序。若一个字母字典序大于多少个字母的个数已经有过了，那么就一定不能确定。代码如下。\n\n```cpp\n\tfor (int i = 0; i < 26; i++) {\n\t\tint res = 0;\n\t\tmemset(v1, 0, sizeof v1);\n\t\tdfs(i, i);\n\t\tfor (int j = 0; j < 26; j++) \n\t\t\tif (b[j][i]) res++;\n\t\tif (v2[i]) a[i].x = ++res;\n\t\ta[i].y = char(i + 'a');\n\t\tif (v3[res] && res != 0) {\n\t\t\tcout << '?' << '\\n';\n\t\t\treturn 0;\n\t\t}\n\t\tv3[res] = 1;\n\t}\n\tsort(a, a + 26, cmp);\n\tfor (int i = 0; i < 26; i++) if (a[i].x != 0) cout << a[i].y;\n```\n\n### 利用拓扑排序\n\n思想很简单。通过他去判环。若队列任意一刻，点的个数大于了 $1$，就有可能答案不确定，若有环，则一定有点的入度没减为零。\n\n大佬讲的挺多，可以看一下他们的。我主要讲法一。\n\n## 代码\n\n### 法一\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110;\nint n, len, d[N];\nstring s[N];\nvector<char> v;\nbool b[30][30], v1[N], v2[N], v3[N];\nstruct node {\n\tint x;\n\tchar y;\n} a[N];\nbool cmp(node x, node y) {return x.x < y.x; }\nvoid dfs(int now, int x) {\n\tv1[x] = 1;\n\tif (x != now) b[now][x] = 1;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (b[i][now]) {\n\t\t\tif (i == x) {\n\t\t\t\tcout << '!' << '\\n';\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tif (!v1[i]) dfs(i, x);\n\t\t}\n\t}\n}\n\nint main() {\n    // ios::sync_with_stdio(0);\n    cin.tie(0), cout.tie(0);\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) cin >> s[i];\n\tlen = 10;\n\tfor (int i = 0; i < len; i++) {\n\t\tstring now = \"\";\n\t\tif (v.size()) v.clear();\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j].size() < i + 1) continue;//若这一个字符串的大小小于当前枚举的位数，则跳过。\n\t\t\tv2[s[j][i] - 'a'] = 1;//记录在输入中出现过的字母。\n\t\t\tstring sub = \"\";\n\t\t\tfor (int k = 0; k < i; k++) sub = sub + s[j][k];\n\t\t\tif (sub != now) {//若前 i - 1 位不同，就进行处理。\n\t\t\t\tnow = sub;\n\t\t\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。\n\t\t\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;//确定大致的大小关系。当然，也有其他写法\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\tv.push_back(s[j][i]);//存下当前位，与后面的字母比较\n\t\t}\n\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //最后可能有余下的，也要处理。\n\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;\n\t}\n\tfor (int i = 0; i < 26; i++) {\n\t\tint res = 0;\n\t\tmemset(v1, 0, sizeof v1);\n\t\tdfs(i, i);\n\t\tfor (int j = 0; j < 26; j++) \n\t\t\tif (b[j][i]) res++;\n\t\tif (v2[i]) a[i].x = ++res;\n\t\ta[i].y = char(i + 'a');\n\t\tif (v3[res] && res != 0) {\n\t\t\tcout << '?' << '\\n';\n\t\t\treturn 0;\n\t\t}\n\t\tv3[res] = 1;\n\t}\n\tsort(a, a + 26, cmp);\n\tfor (int i = 0; i < 26; i++) if (a[i].x != 0) cout << a[i].y;\n\treturn 0;\n}\n```\n\n### 法二\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110;\nint n, len, d[N];\nstring s[N];\nvector<char> v;\nvector<int> g[N], ans;\n\nint main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) cin >> s[i];\n\tlen = 10;\n\tfor (int i = 0; i < len; i++) {\n\t\tstring now = \"\";\n\t\tif (v.size()) v.clear();\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j].size() < i + 1) continue;\n\t\t\tstring sub = \"\";\n\t\t\tfor (int k = 0; k < i; k++) sub = sub + s[j][k];\n\t\t\tif (sub != now) {\n\t\t\t\tnow = sub;\n\t\t\t\tfor (int k = 0; k < (int)v.size() - 1; k++) \n\t\t\t\t\tif (v[k] != v[k + 1]) g[(int)v[k] - 'a'].push_back((int)v[k + 1] - (int)'a'), d[v[k + 1] - 'a']++;\n                    //这代码换种写法\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\tv.push_back(s[j][i]);\n\t\t}\n\t\tfor (int k = 0; k < (int)v.size() - 1; k++) \n\t\t\tif (v[k] != v[k + 1]) g[v[k] - 'a'].push_back(v[k + 1] - 'a'), d[v[k + 1] - 'a']++;\n\t}\n\tqueue<int> q;//拓扑\n\tint f = 0;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (!d[i] && g[i].size()) q.push(i);\n\t}\n\twhile (q.size()) {\n\t\tif (q.size() > 1) f = 1;\n\t\tint now = q.front();\n\t\tq.pop();\n\t\tans.push_back(now);\n\t\tfor (int to : g[now]) {\n\t\t\td[to]--;\n\t\t\tif (!d[to]) q.push(to);\n\t\t}\n\t}\n//\tcout << d[9];\n\tfor (int i = 0; i < 26; i++) if (d[i]) f = 2;\n//\tcout << f;\n\tif (!f) for (int i : ans) cout << char(i + 'a');\n\tif (f == 2) cout << '!';\n\tif (f == 1) cout << '?';\n\treturn 0;\n}\n```\n\n## 后记\n\n法一自己想的，法二看了题解。\n\n另外，我想过并查集，但不会，希望有大佬打脸。","source":"_posts/P6491.md","raw":"---\ntitle: P6491 [COCI2010-2011#6] ABECEDA\ncover: https://lucky-cloud09.github.io/img/b5.jpg\ncategories: 题解\ndate: 2023/10/2\n---\n## 前言\n\n思维难度：绿。\n\n代码难度：绿/蓝。\n\n综合：绿/蓝。\n\n带来两种做法。主要是预处理的部分不同，所以就来水一篇。\n\n[传送门](https://www.luogu.com.cn/problem/P6491)。\n\n[前置芝士](https://oi-wiki.org/graph/topo/)。\n\n## 分析\n\n我们很容易想到通过输入去确定大概的大小。具体地，对于两字符串，若前 $i - 1$ 位相同，那么我们要么通过第 $i$ 位确定大小，要么第 $i$ 位相同去比较后面。但我们有多个字符串，容易想到，用 `vector` 存前 $i - 1$ 位相同的 $s[j][i]$。然后根据先后顺序去大致确定粗略的大小。\n\n```cpp\n\tfor (int i = 0; i < len; i++) {\n\t\tstring now = \"\";\n\t\tif (v.size()) v.clear();\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j].size() < i + 1) continue;//若这一个字符串的大小小于当前枚举的位数，则跳过。\n\t\t\tv2[s[j][i] - 'a'] = 1;//记录在输入中出现过的字母。\n\t\t\tstring sub = \"\";\n\t\t\tfor (int k = 0; k < i; k++) sub = sub + s[j][k];\n\t\t\tif (sub != now) {//若前 i - 1 位不同，就进行处理。\n\t\t\t\tnow = sub;\n\t\t\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。\n\t\t\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;//确定大致的大小关系。当然，也有其他写法\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\tv.push_back(s[j][i]);//存下当前位，与后面的字母比较\n\t\t}\n\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //最后可能有余下的，也要处理。\n\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;\n\t}\n```\n\n然后若合法，我们这样可以将字典序大的连字典序小连成一个有向无环图，如样例一。\n\n![图片走丢了](https://lucky-cloud09.github.io/img/yptw2sdw.png)\n\n若不合法，就如样例二，会有个环。\n\n![图片走丢了](https://lucky-cloud09.github.io/img/55o9hioj.png)\n\n而如果说有多种情况，图是不连通的。\n\n那么，我们就有两种方法去做。\n\n### 利用 DFS\n\n很容易，若图跑着跑着又回到了起点，那么一定又环，当然，我们**不走重复的路**，而且我们不用一次走完。然后，我们在走的时候，又可以将途经的点都给做标记，说明这个点小于起点，最终跑到出度为 $0$ 的点。\n\n```cpp\nvoid dfs(int now, int x) {\n\tv1[x] = 1;//标记点到过了。\n\tif (x != now) b[now][x] = 1;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (b[i][now]) {\n\t\t\tif (i == x) {//到了起点，说明有环。\n\t\t\t\tcout << '!' << '\\n';\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tif (!v1[i]) dfs(i, x);\n\t\t}\n\t}\n}\n```\n\n然后我们去找每一个字母字典序大于多少个字母，然后记录下来，最后将记录下来的数组排序。若一个字母字典序大于多少个字母的个数已经有过了，那么就一定不能确定。代码如下。\n\n```cpp\n\tfor (int i = 0; i < 26; i++) {\n\t\tint res = 0;\n\t\tmemset(v1, 0, sizeof v1);\n\t\tdfs(i, i);\n\t\tfor (int j = 0; j < 26; j++) \n\t\t\tif (b[j][i]) res++;\n\t\tif (v2[i]) a[i].x = ++res;\n\t\ta[i].y = char(i + 'a');\n\t\tif (v3[res] && res != 0) {\n\t\t\tcout << '?' << '\\n';\n\t\t\treturn 0;\n\t\t}\n\t\tv3[res] = 1;\n\t}\n\tsort(a, a + 26, cmp);\n\tfor (int i = 0; i < 26; i++) if (a[i].x != 0) cout << a[i].y;\n```\n\n### 利用拓扑排序\n\n思想很简单。通过他去判环。若队列任意一刻，点的个数大于了 $1$，就有可能答案不确定，若有环，则一定有点的入度没减为零。\n\n大佬讲的挺多，可以看一下他们的。我主要讲法一。\n\n## 代码\n\n### 法一\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110;\nint n, len, d[N];\nstring s[N];\nvector<char> v;\nbool b[30][30], v1[N], v2[N], v3[N];\nstruct node {\n\tint x;\n\tchar y;\n} a[N];\nbool cmp(node x, node y) {return x.x < y.x; }\nvoid dfs(int now, int x) {\n\tv1[x] = 1;\n\tif (x != now) b[now][x] = 1;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (b[i][now]) {\n\t\t\tif (i == x) {\n\t\t\t\tcout << '!' << '\\n';\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tif (!v1[i]) dfs(i, x);\n\t\t}\n\t}\n}\n\nint main() {\n    // ios::sync_with_stdio(0);\n    cin.tie(0), cout.tie(0);\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) cin >> s[i];\n\tlen = 10;\n\tfor (int i = 0; i < len; i++) {\n\t\tstring now = \"\";\n\t\tif (v.size()) v.clear();\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j].size() < i + 1) continue;//若这一个字符串的大小小于当前枚举的位数，则跳过。\n\t\t\tv2[s[j][i] - 'a'] = 1;//记录在输入中出现过的字母。\n\t\t\tstring sub = \"\";\n\t\t\tfor (int k = 0; k < i; k++) sub = sub + s[j][k];\n\t\t\tif (sub != now) {//若前 i - 1 位不同，就进行处理。\n\t\t\t\tnow = sub;\n\t\t\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。\n\t\t\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;//确定大致的大小关系。当然，也有其他写法\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\tv.push_back(s[j][i]);//存下当前位，与后面的字母比较\n\t\t}\n\t\tfor (int k = 0; k < (int)v.size() - 1; k++) //最后可能有余下的，也要处理。\n\t\t\tif (v[k] != v[k + 1]) b[v[k] - 'a'][v[k + 1] - 'a'] = 1;\n\t}\n\tfor (int i = 0; i < 26; i++) {\n\t\tint res = 0;\n\t\tmemset(v1, 0, sizeof v1);\n\t\tdfs(i, i);\n\t\tfor (int j = 0; j < 26; j++) \n\t\t\tif (b[j][i]) res++;\n\t\tif (v2[i]) a[i].x = ++res;\n\t\ta[i].y = char(i + 'a');\n\t\tif (v3[res] && res != 0) {\n\t\t\tcout << '?' << '\\n';\n\t\t\treturn 0;\n\t\t}\n\t\tv3[res] = 1;\n\t}\n\tsort(a, a + 26, cmp);\n\tfor (int i = 0; i < 26; i++) if (a[i].x != 0) cout << a[i].y;\n\treturn 0;\n}\n```\n\n### 法二\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 110;\nint n, len, d[N];\nstring s[N];\nvector<char> v;\nvector<int> g[N], ans;\n\nint main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) cin >> s[i];\n\tlen = 10;\n\tfor (int i = 0; i < len; i++) {\n\t\tstring now = \"\";\n\t\tif (v.size()) v.clear();\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (s[j].size() < i + 1) continue;\n\t\t\tstring sub = \"\";\n\t\t\tfor (int k = 0; k < i; k++) sub = sub + s[j][k];\n\t\t\tif (sub != now) {\n\t\t\t\tnow = sub;\n\t\t\t\tfor (int k = 0; k < (int)v.size() - 1; k++) \n\t\t\t\t\tif (v[k] != v[k + 1]) g[(int)v[k] - 'a'].push_back((int)v[k + 1] - (int)'a'), d[v[k + 1] - 'a']++;\n                    //这代码换种写法\n\t\t\t\tv.clear();\n\t\t\t}\n\t\t\tv.push_back(s[j][i]);\n\t\t}\n\t\tfor (int k = 0; k < (int)v.size() - 1; k++) \n\t\t\tif (v[k] != v[k + 1]) g[v[k] - 'a'].push_back(v[k + 1] - 'a'), d[v[k + 1] - 'a']++;\n\t}\n\tqueue<int> q;//拓扑\n\tint f = 0;\n\tfor (int i = 0; i < 26; i++) {\n\t\tif (!d[i] && g[i].size()) q.push(i);\n\t}\n\twhile (q.size()) {\n\t\tif (q.size() > 1) f = 1;\n\t\tint now = q.front();\n\t\tq.pop();\n\t\tans.push_back(now);\n\t\tfor (int to : g[now]) {\n\t\t\td[to]--;\n\t\t\tif (!d[to]) q.push(to);\n\t\t}\n\t}\n//\tcout << d[9];\n\tfor (int i = 0; i < 26; i++) if (d[i]) f = 2;\n//\tcout << f;\n\tif (!f) for (int i : ans) cout << char(i + 'a');\n\tif (f == 2) cout << '!';\n\tif (f == 1) cout << '?';\n\treturn 0;\n}\n```\n\n## 后记\n\n法一自己想的，法二看了题解。\n\n另外，我想过并查集，但不会，希望有大佬打脸。","slug":"P6491","published":1,"updated":"2024-09-06T12:41:17.133Z","_id":"cm0cfoqg1000n358k9x3zdj3l","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>思维难度：绿。</p>\n<p>代码难度：绿/蓝。</p>\n<p>综合：绿/蓝。</p>\n<p>带来两种做法。主要是预处理的部分不同，所以就来水一篇。</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P6491\">传送门</a>。</p>\n<p><a href=\"https://oi-wiki.org/graph/topo/\">前置芝士</a>。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们很容易想到通过输入去确定大概的大小。具体地，对于两字符串，若前 $i - 1$ 位相同，那么我们要么通过第 $i$ 位确定大小，要么第 $i$ 位相同去比较后面。但我们有多个字符串，容易想到，用 <code>vector</code> 存前 $i - 1$ 位相同的 $s[j][i]$。然后根据先后顺序去大致确定粗略的大小。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; len; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tstring now = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &lt; i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//若这一个字符串的大小小于当前枚举的位数，则跳过。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//记录在输入中出现过的字母。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tstring sub = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; i; k++) sub = sub + </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][k];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sub != now) {</span><span style=\"color: #6A9955\">//若前 i - 1 位不同，就进行处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tnow = sub;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//确定大致的大小关系。当然，也有其他写法</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i]);</span><span style=\"color: #6A9955\">//存下当前位，与后面的字母比较</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //最后可能有余下的，也要处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>然后若合法，我们这样可以将字典序大的连字典序小连成一个有向无环图，如样例一。</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://lucky-cloud09.github.io/img/yptw2sdw.png\" alt=\"图片走丢了\" data-caption=\"图片走丢了\" loading=\"lazy\"></p>\n<p>若不合法，就如样例二，会有个环。</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://lucky-cloud09.github.io/img/55o9hioj.png\" alt=\"图片走丢了\" data-caption=\"图片走丢了\" loading=\"lazy\"></p>\n<p>而如果说有多种情况，图是不连通的。</p>\n<p>那么，我们就有两种方法去做。</p>\n<h3 id=\"利用-DFS\"><a href=\"#利用-DFS\" class=\"headerlink\" title=\"利用 DFS\"></a>利用 DFS</h3><p>很容易，若图跑着跑着又回到了起点，那么一定又环，当然，我们<strong>不走重复的路</strong>，而且我们不用一次走完。然后，我们在走的时候，又可以将途经的点都给做标记，说明这个点小于起点，最终跑到出度为 $0$ 的点。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">now</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//标记点到过了。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x != now) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[now][x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i][now]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == x) {</span><span style=\"color: #6A9955\">//到了起点，说明有环。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;!&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>然后我们去找每一个字母字典序大于多少个字母，然后记录下来，最后将记录下来的数组排序。若一个字母字典序大于多少个字母的个数已经有过了，那么就一定不能确定。代码如下。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(v1, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof v1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; j++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[j][i]) res++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> = ++res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] &amp;&amp; res != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;?&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(a, a + </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">, cmp);</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span></code></pre></div></div></figure>\n<h3 id=\"利用拓扑排序\"><a href=\"#利用拓扑排序\" class=\"headerlink\" title=\"利用拓扑排序\"></a>利用拓扑排序</h3><p>思想很简单。通过他去判环。若队列任意一刻，点的个数大于了 $1$，就有可能答案不确定，若有环，则一定有点的入度没减为零。</p>\n<p>大佬讲的挺多，可以看一下他们的。我主要讲法一。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h3><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">110</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, len, </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">&gt; v;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">30</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">30</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">node</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">cmp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> &lt; </span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">; }</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">now</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x != now) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[now][x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i][now]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == x) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;!&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    // ios::sync_with_stdio(0);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">cin</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">tie</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #9CDCFE\">cout</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">tie</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tlen = </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; len; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tstring now = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &lt; i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//若这一个字符串的大小小于当前枚举的位数，则跳过。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//记录在输入中出现过的字母。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tstring sub = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; i; k++) sub = sub + </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][k];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sub != now) {</span><span style=\"color: #6A9955\">//若前 i - 1 位不同，就进行处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnow = sub;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//确定大致的大小关系。当然，也有其他写法</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i]);</span><span style=\"color: #6A9955\">//存下当前位，与后面的字母比较</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //最后可能有余下的，也要处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(v1, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof v1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; j++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[j][i]) res++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> = ++res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] &amp;&amp; res != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;?&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(a, a + </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">, cmp);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h3><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">110</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, len, </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">&gt; v;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[N], ans;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tlen = </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; len; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tstring now = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &lt; i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tstring sub = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; i; k++) sub = sub + </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][k];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sub != now) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnow = sub;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">]++;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">                    //这代码换种写法</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">]++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tqueue&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; q;</span><span style=\"color: #6A9955\">//拓扑</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> f = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[i] &amp;&amp; </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) f = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> now = </span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">front</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">pop</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(now);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> to : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[now]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[to]--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[to]) </span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push</span><span style=\"color: #D4D4D4\">(to);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tcout &lt;&lt; d[9];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[i]) f = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tcout &lt;&lt; f;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!f) </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i : ans) cout &lt;&lt; </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (f == </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;!&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (f == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;?&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>法一自己想的，法二看了题解。</p>\n<p>另外，我想过并查集，但不会，希望有大佬打脸。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>思维难度：绿。</p>\n<p>代码难度：绿/蓝。</p>\n<p>综合：绿/蓝。</p>\n<p>带来两种做法。主要是预处理的部分不同，所以就来水一篇。</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P6491\">传送门</a>。</p>\n<p><a href=\"https://oi-wiki.org/graph/topo/\">前置芝士</a>。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>我们很容易想到通过输入去确定大概的大小。具体地，对于两字符串，若前 $i - 1$ 位相同，那么我们要么通过第 $i$ 位确定大小，要么第 $i$ 位相同去比较后面。但我们有多个字符串，容易想到，用 <code>vector</code> 存前 $i - 1$ 位相同的 $s[j][i]$。然后根据先后顺序去大致确定粗略的大小。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; len; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tstring now = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &lt; i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//若这一个字符串的大小小于当前枚举的位数，则跳过。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//记录在输入中出现过的字母。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tstring sub = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; i; k++) sub = sub + </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][k];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sub != now) {</span><span style=\"color: #6A9955\">//若前 i - 1 位不同，就进行处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tnow = sub;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//确定大致的大小关系。当然，也有其他写法</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i]);</span><span style=\"color: #6A9955\">//存下当前位，与后面的字母比较</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //最后可能有余下的，也要处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>然后若合法，我们这样可以将字典序大的连字典序小连成一个有向无环图，如样例一。</p>\n<p><img src=\"https://lucky-cloud09.github.io/img/yptw2sdw.png\" alt=\"图片走丢了\"></p>\n<p>若不合法，就如样例二，会有个环。</p>\n<p><img src=\"https://lucky-cloud09.github.io/img/55o9hioj.png\" alt=\"图片走丢了\"></p>\n<p>而如果说有多种情况，图是不连通的。</p>\n<p>那么，我们就有两种方法去做。</p>\n<h3 id=\"利用-DFS\"><a href=\"#利用-DFS\" class=\"headerlink\" title=\"利用 DFS\"></a>利用 DFS</h3><p>很容易，若图跑着跑着又回到了起点，那么一定又环，当然，我们<strong>不走重复的路</strong>，而且我们不用一次走完。然后，我们在走的时候，又可以将途经的点都给做标记，说明这个点小于起点，最终跑到出度为 $0$ 的点。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">now</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//标记点到过了。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x != now) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[now][x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i][now]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == x) {</span><span style=\"color: #6A9955\">//到了起点，说明有环。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;!&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<p>然后我们去找每一个字母字典序大于多少个字母，然后记录下来，最后将记录下来的数组排序。若一个字母字典序大于多少个字母的个数已经有过了，那么就一定不能确定。代码如下。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(v1, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof v1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; j++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[j][i]) res++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> = ++res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] &amp;&amp; res != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;?&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(a, a + </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">, cmp);</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span></code></pre></div></div></figure>\n<h3 id=\"利用拓扑排序\"><a href=\"#利用拓扑排序\" class=\"headerlink\" title=\"利用拓扑排序\"></a>利用拓扑排序</h3><p>思想很简单。通过他去判环。若队列任意一刻，点的个数大于了 $1$，就有可能答案不确定，若有环，则一定有点的入度没减为零。</p>\n<p>大佬讲的挺多，可以看一下他们的。我主要讲法一。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h3><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">110</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, len, </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">&gt; v;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">30</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">30</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[N], </span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">struct</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">node</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\"> y;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">} </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">bool</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">cmp</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #4EC9B0\">node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #4EC9B0\">node</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">) {</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> &lt; </span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">; }</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">void</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">now</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (x != now) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[now][x] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[i][now]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i == x) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;!&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #DCDCAA\">exit</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">v1</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, x);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">    // ios::sync_with_stdio(0);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">cin</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">tie</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #9CDCFE\">cout</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">tie</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tlen = </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; len; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tstring now = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &lt; i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//若这一个字符串的大小小于当前枚举的位数，则跳过。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//记录在输入中出现过的字母。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tstring sub = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; i; k++) sub = sub + </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][k];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sub != now) {</span><span style=\"color: #6A9955\">//若前 i - 1 位不同，就进行处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnow = sub;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //注意，一定是 (int)v.size() - 1，而不是 v.size() - 1，具体为什么可自行探究。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span><span style=\"color: #6A9955\">//确定大致的大小关系。当然，也有其他写法</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i]);</span><span style=\"color: #6A9955\">//存下当前位，与后面的字母比较</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++)</span><span style=\"color: #6A9955\"> //最后可能有余下的，也要处理。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> res = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(v1, </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">, sizeof v1);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #DCDCAA\">dfs</span><span style=\"color: #D4D4D4\">(i, i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; j++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">[j][i]) res++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v2</span><span style=\"color: #D4D4D4\">[i]) </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> = ++res;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] &amp;&amp; res != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;?&#39;</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">v3</span><span style=\"color: #D4D4D4\">[res] = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">sort</span><span style=\"color: #D4D4D4\">(a, a + </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">, cmp);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">x</span><span style=\"color: #D4D4D4\"> != </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #9CDCFE\">y</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h3><figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">110</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, len, </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[N];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">&gt; v;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">vector&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[N], ans;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) cin &gt;&gt; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tlen = </span><span style=\"color: #B5CEA8\">10</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; len; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tstring now = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; j &lt;= n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &lt; i + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #C586C0\">continue</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tstring sub = </span><span style=\"color: #CE9178\">&quot;&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; i; k++) sub = sub + </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][k];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (sub != now) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tnow = sub;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">((</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">]++;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">                    //这代码换种写法</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">clear</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j][i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() - </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; k++) </span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] != </span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">].</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">), </span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #9CDCFE\">v</span><span style=\"color: #D4D4D4\">[k + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] - </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">]++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tqueue&lt;</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\">&gt; q;</span><span style=\"color: #6A9955\">//拓扑</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> f = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[i] &amp;&amp; </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[i].</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) </span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push</span><span style=\"color: #D4D4D4\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">size</span><span style=\"color: #D4D4D4\">() &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) f = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> now = </span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">front</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">pop</span><span style=\"color: #D4D4D4\">();</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">ans</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push_back</span><span style=\"color: #D4D4D4\">(now);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> to : </span><span style=\"color: #9CDCFE\">g</span><span style=\"color: #D4D4D4\">[now]) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[to]--;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[to]) </span><span style=\"color: #9CDCFE\">q</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">push</span><span style=\"color: #D4D4D4\">(to);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tcout &lt;&lt; d[9];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; </span><span style=\"color: #B5CEA8\">26</span><span style=\"color: #D4D4D4\">; i++) </span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">d</span><span style=\"color: #D4D4D4\">[i]) f = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">//\tcout &lt;&lt; f;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!f) </span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i : ans) cout &lt;&lt; </span><span style=\"color: #569CD6\">char</span><span style=\"color: #D4D4D4\">(i + </span><span style=\"color: #CE9178\">&#39;a&#39;</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (f == </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;!&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (f == </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">) cout &lt;&lt; </span><span style=\"color: #CE9178\">&#39;?&#39;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>法一自己想的，法二看了题解。</p>\n<p>另外，我想过并查集，但不会，希望有大佬打脸。</p>\n"},{"title":"UVA1328 题解","cover":"https://lucky-cloud09.github.io/img/b6.jpg","date":"1969-12-31T16:00:02.024Z","_content":"\n\n## 前情提要\n本题解重在使大家理解。\n\n本题需要 KMP，相信阅读本篇的大佬都会吧。\n \n没学过也没关系，点[这里](https://blog.csdn.net/starstar1992/article/details/54913261)。这是一篇我喜欢的讲解，不喜勿喷。\n\n## 分析\n看见本题的第一感就是会与 KMP 中的 $next$ 数组有关。\n\n我们通过下面证明可以得出：满足 $i \\bmod len = 0$，且 $S[1 \\sim i-len] = S[len+1 \\sim i]$ 这样的 $len$ 为循环节，其中 $i$ 为 $S$ 字符串中某个前缀的末尾项。\n\n### 证必要性：\n\n不妨我们先设 $len$ 为字符串 $S[1 \\sim i]$ 循环节的长度，我们明显可得：$i \\bmod len = 0$，且 $S[1 \\sim i-len]=S[len+1 \\sim i]$。如：\n\n$S= \\texttt{abcabc}$。则 $len=3$，$i=6$。我们可以发现 $i \\bmod len=0$。$S[1 \\sim i-len]=\\texttt{abc}$。$S[len+1 \\sim i]=\\texttt{abc}$。所以 $S[1 \\sim i-len]=S[len+1 \\sim i]$。\n\n对于 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 其实我们也可以这样理解：因为 $S[1 \\sim i]$ 是由 $k$ 个长度为 $len$ 的循环元组成，$S[1 \\sim i-len]$ 与 $S[len+1 \\sim i]$ 均是由 $k - 1$ 个长度为 $len$ 的循环元组成，那么自然可以得出 $S[1 \\sim i-len] = S[len+1 \\sim i]$。\n\n至于 $i \\bmod len = 0$，我相信不用多讲了吧。\n\n### 证充分性：\n\n这里，我们就可以设 $len$ 能整除 $i$ 且 $S[1 \\sim i-len] = S[len+1 \\sim i]$。自然，我们可以得出**以上两个字符串的长度能整除** $len$。\n\n得出了这个结论我们又可以开始推导：$S[1 \\sim len] = S[len + 1 \\sim 2 \\times len]$，$S[len+1 \\sim 2 \\times len] = S[2 \\times len+1 \\sim 3 \\times len]$，依次类推，我们可以得出结论 $S[1 \\sim i - len]$ 与 $S[len +1 \\sim i]$ 均是由 $k$ 个长度为 $len$，也就是 $S[1 \\sim len]$ 是 $S[1 \\sim i]$ 的循环节。\n\n还是看不懂？\n\n没事看一下图：\n\n![图](https://lucky-cloud09.github.io/img/abpyiz9a.png)\n\n注：图中 $len=2,i=8$。\n\n解释一下。本图中：\n\n$S[1 \\sim len]= \\texttt{ab}$。\n\n$S[len + 1 \\sim 2 \\times len]= \\texttt{ab}$。\n\n$S[2 \\times len+1 \\sim 3 \\times len]= \\texttt{ab}$。\n\n---\n\n好，回到现在，我们已经证了满足能整除 $i$ 且 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 的 $len$ 一定是循环结，那这又和 $next$ 数组有什么关系呢？\n\n你们看，这 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 不就是 $S[1 \\sim next_i] = S[i-next_i+1 \\sim i]$ 吗？\n\n也就是 $i-len=next_i$。\n\n我们要求**长度最小**的循环节，就需要 $i-len$ 越大！这不就巧了？$next_i$ 刚好符合这样的条件。\n\n那么这道题也就解出来了！\n\n## 回顾过程\n1. 求 $next$ 数组。\n1. 判断 $i-next$ 是否能整除 $i$。\n1. 若步骤 2 成立，那么 $len \\gets i-next_i$，否则没有循环节。\n1. 重复 2，3。\n\n\n## 代码\n本人马蜂不好，不喜勿喷。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 100;\nstring s;\nint n, nxt[N], num;//其中的nxt也就是上文的next数组。\n\nint main() {\n\tios::sync_with_stdio(0);\n\twhile (cin >> n && n) {//重复输入\n\t\tcin >> s; s = \" \" + s;//我习惯从1开始遍历\n\t\tnxt[1] = 0;\n\t\tfor (int i = 2, j = 0; i <= n; i++) {\n\t\t\twhile (j > 0 && s[i] != s[j + 1]) j = nxt[j];\n\t\t\tif (s[i] == s[j + 1]) j++;\n\t\t\tnxt[i] = j;\n\t\t}//步骤1：求next数组\n\t\tcout << \"Test case #\" << ++num << \"\\n\";\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (i % (i - nxt[i]) == 0 && i / (i - nxt[i]) > 1)//步骤2\n\t\t\t\tcout << i << \" \" << i / (i - nxt[i]) << endl;//步骤3\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n```\n\n## The End\n> 部分内容来自 lyd 的[算法竞赛进阶指南](https://book.douban.com/subject/30136932/)。图片自绘。","source":"_posts/UVA1328.md","raw":"---\ntitle: UVA1328 题解\ncover: https://lucky-cloud09.github.io/img/b6.jpg\ncategories: 题解\ndate: 2024\n---\n\n\n## 前情提要\n本题解重在使大家理解。\n\n本题需要 KMP，相信阅读本篇的大佬都会吧。\n \n没学过也没关系，点[这里](https://blog.csdn.net/starstar1992/article/details/54913261)。这是一篇我喜欢的讲解，不喜勿喷。\n\n## 分析\n看见本题的第一感就是会与 KMP 中的 $next$ 数组有关。\n\n我们通过下面证明可以得出：满足 $i \\bmod len = 0$，且 $S[1 \\sim i-len] = S[len+1 \\sim i]$ 这样的 $len$ 为循环节，其中 $i$ 为 $S$ 字符串中某个前缀的末尾项。\n\n### 证必要性：\n\n不妨我们先设 $len$ 为字符串 $S[1 \\sim i]$ 循环节的长度，我们明显可得：$i \\bmod len = 0$，且 $S[1 \\sim i-len]=S[len+1 \\sim i]$。如：\n\n$S= \\texttt{abcabc}$。则 $len=3$，$i=6$。我们可以发现 $i \\bmod len=0$。$S[1 \\sim i-len]=\\texttt{abc}$。$S[len+1 \\sim i]=\\texttt{abc}$。所以 $S[1 \\sim i-len]=S[len+1 \\sim i]$。\n\n对于 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 其实我们也可以这样理解：因为 $S[1 \\sim i]$ 是由 $k$ 个长度为 $len$ 的循环元组成，$S[1 \\sim i-len]$ 与 $S[len+1 \\sim i]$ 均是由 $k - 1$ 个长度为 $len$ 的循环元组成，那么自然可以得出 $S[1 \\sim i-len] = S[len+1 \\sim i]$。\n\n至于 $i \\bmod len = 0$，我相信不用多讲了吧。\n\n### 证充分性：\n\n这里，我们就可以设 $len$ 能整除 $i$ 且 $S[1 \\sim i-len] = S[len+1 \\sim i]$。自然，我们可以得出**以上两个字符串的长度能整除** $len$。\n\n得出了这个结论我们又可以开始推导：$S[1 \\sim len] = S[len + 1 \\sim 2 \\times len]$，$S[len+1 \\sim 2 \\times len] = S[2 \\times len+1 \\sim 3 \\times len]$，依次类推，我们可以得出结论 $S[1 \\sim i - len]$ 与 $S[len +1 \\sim i]$ 均是由 $k$ 个长度为 $len$，也就是 $S[1 \\sim len]$ 是 $S[1 \\sim i]$ 的循环节。\n\n还是看不懂？\n\n没事看一下图：\n\n![图](https://lucky-cloud09.github.io/img/abpyiz9a.png)\n\n注：图中 $len=2,i=8$。\n\n解释一下。本图中：\n\n$S[1 \\sim len]= \\texttt{ab}$。\n\n$S[len + 1 \\sim 2 \\times len]= \\texttt{ab}$。\n\n$S[2 \\times len+1 \\sim 3 \\times len]= \\texttt{ab}$。\n\n---\n\n好，回到现在，我们已经证了满足能整除 $i$ 且 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 的 $len$ 一定是循环结，那这又和 $next$ 数组有什么关系呢？\n\n你们看，这 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 不就是 $S[1 \\sim next_i] = S[i-next_i+1 \\sim i]$ 吗？\n\n也就是 $i-len=next_i$。\n\n我们要求**长度最小**的循环节，就需要 $i-len$ 越大！这不就巧了？$next_i$ 刚好符合这样的条件。\n\n那么这道题也就解出来了！\n\n## 回顾过程\n1. 求 $next$ 数组。\n1. 判断 $i-next$ 是否能整除 $i$。\n1. 若步骤 2 成立，那么 $len \\gets i-next_i$，否则没有循环节。\n1. 重复 2，3。\n\n\n## 代码\n本人马蜂不好，不喜勿喷。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 100;\nstring s;\nint n, nxt[N], num;//其中的nxt也就是上文的next数组。\n\nint main() {\n\tios::sync_with_stdio(0);\n\twhile (cin >> n && n) {//重复输入\n\t\tcin >> s; s = \" \" + s;//我习惯从1开始遍历\n\t\tnxt[1] = 0;\n\t\tfor (int i = 2, j = 0; i <= n; i++) {\n\t\t\twhile (j > 0 && s[i] != s[j + 1]) j = nxt[j];\n\t\t\tif (s[i] == s[j + 1]) j++;\n\t\t\tnxt[i] = j;\n\t\t}//步骤1：求next数组\n\t\tcout << \"Test case #\" << ++num << \"\\n\";\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (i % (i - nxt[i]) == 0 && i / (i - nxt[i]) > 1)//步骤2\n\t\t\t\tcout << i << \" \" << i / (i - nxt[i]) << endl;//步骤3\n\t\t}\n\t\tcout << endl;\n\t}\n\treturn 0;\n}\n```\n\n## The End\n> 部分内容来自 lyd 的[算法竞赛进阶指南](https://book.douban.com/subject/30136932/)。图片自绘。","slug":"UVA1328","published":1,"updated":"2024-09-06T12:40:42.941Z","_id":"cm0cfoqg3000q358k6upr2nw5","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>本题解重在使大家理解。</p>\n<p>本题需要 KMP，相信阅读本篇的大佬都会吧。</p>\n<p>没学过也没关系，点<a href=\"https://blog.csdn.net/starstar1992/article/details/54913261\">这里</a>。这是一篇我喜欢的讲解，不喜勿喷。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>看见本题的第一感就是会与 KMP 中的 $next$ 数组有关。</p>\n<p>我们通过下面证明可以得出：满足 $i \\bmod len = 0$，且 $S[1 \\sim i-len] = S[len+1 \\sim i]$ 这样的 $len$ 为循环节，其中 $i$ 为 $S$ 字符串中某个前缀的末尾项。</p>\n<h3 id=\"证必要性：\"><a href=\"#证必要性：\" class=\"headerlink\" title=\"证必要性：\"></a>证必要性：</h3><p>不妨我们先设 $len$ 为字符串 $S[1 \\sim i]$ 循环节的长度，我们明显可得：$i \\bmod len = 0$，且 $S[1 \\sim i-len]=S[len+1 \\sim i]$。如：</p>\n<p>$S= \\texttt{abcabc}$。则 $len=3$，$i=6$。我们可以发现 $i \\bmod len=0$。$S[1 \\sim i-len]=\\texttt{abc}$。$S[len+1 \\sim i]=\\texttt{abc}$。所以 $S[1 \\sim i-len]=S[len+1 \\sim i]$。</p>\n<p>对于 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 其实我们也可以这样理解：因为 $S[1 \\sim i]$ 是由 $k$ 个长度为 $len$ 的循环元组成，$S[1 \\sim i-len]$ 与 $S[len+1 \\sim i]$ 均是由 $k - 1$ 个长度为 $len$ 的循环元组成，那么自然可以得出 $S[1 \\sim i-len] = S[len+1 \\sim i]$。</p>\n<p>至于 $i \\bmod len = 0$，我相信不用多讲了吧。</p>\n<h3 id=\"证充分性：\"><a href=\"#证充分性：\" class=\"headerlink\" title=\"证充分性：\"></a>证充分性：</h3><p>这里，我们就可以设 $len$ 能整除 $i$ 且 $S[1 \\sim i-len] = S[len+1 \\sim i]$。自然，我们可以得出<strong>以上两个字符串的长度能整除</strong> $len$。</p>\n<p>得出了这个结论我们又可以开始推导：$S[1 \\sim len] = S[len + 1 \\sim 2 \\times len]$，$S[len+1 \\sim 2 \\times len] = S[2 \\times len+1 \\sim 3 \\times len]$，依次类推，我们可以得出结论 $S[1 \\sim i - len]$ 与 $S[len +1 \\sim i]$ 均是由 $k$ 个长度为 $len$，也就是 $S[1 \\sim len]$ 是 $S[1 \\sim i]$ 的循环节。</p>\n<p>还是看不懂？</p>\n<p>没事看一下图：</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://lucky-cloud09.github.io/img/abpyiz9a.png\" alt=\"图\" data-caption=\"图\" loading=\"lazy\"></p>\n<p>注：图中 $len=2,i=8$。</p>\n<p>解释一下。本图中：</p>\n<p>$S[1 \\sim len]= \\texttt{ab}$。</p>\n<p>$S[len + 1 \\sim 2 \\times len]= \\texttt{ab}$。</p>\n<p>$S[2 \\times len+1 \\sim 3 \\times len]= \\texttt{ab}$。</p>\n<hr>\n<p>好，回到现在，我们已经证了满足能整除 $i$ 且 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 的 $len$ 一定是循环结，那这又和 $next$ 数组有什么关系呢？</p>\n<p>你们看，这 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 不就是 $S[1 \\sim next_i] = S[i-next_i+1 \\sim i]$ 吗？</p>\n<p>也就是 $i-len=next_i$。</p>\n<p>我们要求<strong>长度最小</strong>的循环节，就需要 $i-len$ 越大！这不就巧了？$next_i$ 刚好符合这样的条件。</p>\n<p>那么这道题也就解出来了！</p>\n<h2 id=\"回顾过程\"><a href=\"#回顾过程\" class=\"headerlink\" title=\"回顾过程\"></a>回顾过程</h2><ol>\n<li>求 $next$ 数组。</li>\n<li>判断 $i-next$ 是否能整除 $i$。</li>\n<li>若步骤 2 成立，那么 $len \\gets i-next_i$，否则没有循环节。</li>\n<li>重复 2，3。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>本人马蜂不好，不喜勿喷。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">1e6</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string s;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[N], num;</span><span style=\"color: #6A9955\">//其中的nxt也就是上文的next数组。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (cin &gt;&gt; n &amp;&amp; n) {</span><span style=\"color: #6A9955\">//重复输入</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcin &gt;&gt; s; s = </span><span style=\"color: #CE9178\">&quot; &quot;</span><span style=\"color: #D4D4D4\"> + s;</span><span style=\"color: #6A9955\">//我习惯从1开始遍历</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">, j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (j &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i] != </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) j = </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i] == </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) j++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i] = j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span><span style=\"color: #6A9955\">//步骤1：求next数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&quot;Test case #&quot;</span><span style=\"color: #D4D4D4\"> &lt;&lt; ++num &lt;&lt; </span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i % (i - </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i]) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; i / (i - </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i]) &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//步骤2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tcout &lt;&lt; i &lt;&lt; </span><span style=\"color: #CE9178\">&quot; &quot;</span><span style=\"color: #D4D4D4\"> &lt;&lt; i / (i - </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i]) &lt;&lt; endl;</span><span style=\"color: #6A9955\">//步骤3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h2 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h2><blockquote>\n<p>部分内容来自 lyd 的<a href=\"https://book.douban.com/subject/30136932/\">算法竞赛进阶指南</a>。图片自绘。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>本题解重在使大家理解。</p>\n<p>本题需要 KMP，相信阅读本篇的大佬都会吧。</p>\n<p>没学过也没关系，点<a href=\"https://blog.csdn.net/starstar1992/article/details/54913261\">这里</a>。这是一篇我喜欢的讲解，不喜勿喷。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>看见本题的第一感就是会与 KMP 中的 $next$ 数组有关。</p>\n<p>我们通过下面证明可以得出：满足 $i \\bmod len = 0$，且 $S[1 \\sim i-len] = S[len+1 \\sim i]$ 这样的 $len$ 为循环节，其中 $i$ 为 $S$ 字符串中某个前缀的末尾项。</p>\n<h3 id=\"证必要性：\"><a href=\"#证必要性：\" class=\"headerlink\" title=\"证必要性：\"></a>证必要性：</h3><p>不妨我们先设 $len$ 为字符串 $S[1 \\sim i]$ 循环节的长度，我们明显可得：$i \\bmod len = 0$，且 $S[1 \\sim i-len]=S[len+1 \\sim i]$。如：</p>\n<p>$S= \\texttt{abcabc}$。则 $len=3$，$i=6$。我们可以发现 $i \\bmod len=0$。$S[1 \\sim i-len]=\\texttt{abc}$。$S[len+1 \\sim i]=\\texttt{abc}$。所以 $S[1 \\sim i-len]=S[len+1 \\sim i]$。</p>\n<p>对于 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 其实我们也可以这样理解：因为 $S[1 \\sim i]$ 是由 $k$ 个长度为 $len$ 的循环元组成，$S[1 \\sim i-len]$ 与 $S[len+1 \\sim i]$ 均是由 $k - 1$ 个长度为 $len$ 的循环元组成，那么自然可以得出 $S[1 \\sim i-len] = S[len+1 \\sim i]$。</p>\n<p>至于 $i \\bmod len = 0$，我相信不用多讲了吧。</p>\n<h3 id=\"证充分性：\"><a href=\"#证充分性：\" class=\"headerlink\" title=\"证充分性：\"></a>证充分性：</h3><p>这里，我们就可以设 $len$ 能整除 $i$ 且 $S[1 \\sim i-len] = S[len+1 \\sim i]$。自然，我们可以得出<strong>以上两个字符串的长度能整除</strong> $len$。</p>\n<p>得出了这个结论我们又可以开始推导：$S[1 \\sim len] = S[len + 1 \\sim 2 \\times len]$，$S[len+1 \\sim 2 \\times len] = S[2 \\times len+1 \\sim 3 \\times len]$，依次类推，我们可以得出结论 $S[1 \\sim i - len]$ 与 $S[len +1 \\sim i]$ 均是由 $k$ 个长度为 $len$，也就是 $S[1 \\sim len]$ 是 $S[1 \\sim i]$ 的循环节。</p>\n<p>还是看不懂？</p>\n<p>没事看一下图：</p>\n<p><img src=\"https://lucky-cloud09.github.io/img/abpyiz9a.png\" alt=\"图\"></p>\n<p>注：图中 $len=2,i=8$。</p>\n<p>解释一下。本图中：</p>\n<p>$S[1 \\sim len]= \\texttt{ab}$。</p>\n<p>$S[len + 1 \\sim 2 \\times len]= \\texttt{ab}$。</p>\n<p>$S[2 \\times len+1 \\sim 3 \\times len]= \\texttt{ab}$。</p>\n<hr>\n<p>好，回到现在，我们已经证了满足能整除 $i$ 且 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 的 $len$ 一定是循环结，那这又和 $next$ 数组有什么关系呢？</p>\n<p>你们看，这 $S[1 \\sim i-len]=S[len+1 \\sim i]$ 不就是 $S[1 \\sim next_i] = S[i-next_i+1 \\sim i]$ 吗？</p>\n<p>也就是 $i-len=next_i$。</p>\n<p>我们要求<strong>长度最小</strong>的循环节，就需要 $i-len$ 越大！这不就巧了？$next_i$ 刚好符合这样的条件。</p>\n<p>那么这道题也就解出来了！</p>\n<h2 id=\"回顾过程\"><a href=\"#回顾过程\" class=\"headerlink\" title=\"回顾过程\"></a>回顾过程</h2><ol>\n<li>求 $next$ 数组。</li>\n<li>判断 $i-next$ 是否能整除 $i$。</li>\n<li>若步骤 2 成立，那么 $len \\gets i-next_i$，否则没有循环节。</li>\n<li>重复 2，3。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>本人马蜂不好，不喜勿喷。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> N = </span><span style=\"color: #B5CEA8\">1e6</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #B5CEA8\">100</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">string s;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[N], num;</span><span style=\"color: #6A9955\">//其中的nxt也就是上文的next数组。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #4EC9B0\">ios</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #DCDCAA\">sync_with_stdio</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (cin &gt;&gt; n &amp;&amp; n) {</span><span style=\"color: #6A9955\">//重复输入</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcin &gt;&gt; s; s = </span><span style=\"color: #CE9178\">&quot; &quot;</span><span style=\"color: #D4D4D4\"> + s;</span><span style=\"color: #6A9955\">//我习惯从1开始遍历</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">, j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">while</span><span style=\"color: #D4D4D4\"> (j &gt; </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i] != </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) j = </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[i] == </span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">[j + </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">]) j++;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i] = j;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span><span style=\"color: #6A9955\">//步骤1：求next数组</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; </span><span style=\"color: #CE9178\">&quot;Test case #&quot;</span><span style=\"color: #D4D4D4\"> &lt;&lt; ++num &lt;&lt; </span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D7BA7D\">\\n</span><span style=\"color: #CE9178\">&quot;</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">; i &lt;= n; i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i % (i - </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i]) == </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\"> &amp;&amp; i / (i - </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i]) &gt; </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">)</span><span style=\"color: #6A9955\">//步骤2</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\tcout &lt;&lt; i &lt;&lt; </span><span style=\"color: #CE9178\">&quot; &quot;</span><span style=\"color: #D4D4D4\"> &lt;&lt; i / (i - </span><span style=\"color: #9CDCFE\">nxt</span><span style=\"color: #D4D4D4\">[i]) &lt;&lt; endl;</span><span style=\"color: #6A9955\">//步骤3</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\tcout &lt;&lt; endl;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h2 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h2><blockquote>\n<p>部分内容来自 lyd 的<a href=\"https://book.douban.com/subject/30136932/\">算法竞赛进阶指南</a>。图片自绘。</p>\n</blockquote>\n"},{"title":"About Me","_content":"\n\n## 基本信息\n\n四川初三 Oier。~~弱死了~~。\n\n性别：男。\n\n生日：2009-12-24。\n\n体重：？（在减了，在减了~~O.o~~）\n\n身高：180？\n\n[洛谷](https://www.luogu.com.cn/user/712506)。\n\n[cnblogs](https://www.cnblogs.com/luckycloud)\n\n不挂 CF，AT。没脸挂。QwQ。\n\n## 成分\n\nCSP-J/S 2023？\n\n依托答辩。\n\nwhk ？\n\n依旧被吊打。qwq。真 FW 啊。\n\n爱看《推子》《鬼灭》《小埋》《小排球》...\n\n爱玩 Mc，王者。\n\n想玩 Ori，正在筹钱。QwQ。\n\n运动：**排球**，乒乓球，羽毛球，篮球。不怎么会打篮球与踢足球。","source":"_posts/about_me.md","raw":"---\ntitle: About Me\ncategories: 生活\n---\n\n\n## 基本信息\n\n四川初三 Oier。~~弱死了~~。\n\n性别：男。\n\n生日：2009-12-24。\n\n体重：？（在减了，在减了~~O.o~~）\n\n身高：180？\n\n[洛谷](https://www.luogu.com.cn/user/712506)。\n\n[cnblogs](https://www.cnblogs.com/luckycloud)\n\n不挂 CF，AT。没脸挂。QwQ。\n\n## 成分\n\nCSP-J/S 2023？\n\n依托答辩。\n\nwhk ？\n\n依旧被吊打。qwq。真 FW 啊。\n\n爱看《推子》《鬼灭》《小埋》《小排球》...\n\n爱玩 Mc，王者。\n\n想玩 Ori，正在筹钱。QwQ。\n\n运动：**排球**，乒乓球，羽毛球，篮球。不怎么会打篮球与踢足球。","slug":"about_me","published":1,"date":"2024-08-27T12:53:47.165Z","updated":"2024-08-27T12:53:47.165Z","comments":1,"layout":"post","photos":[],"_id":"cm0cfoqg3000s358k5eu8c2j9","content":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>四川初三 Oier。<del>弱死了</del>。</p>\n<p>性别：男。</p>\n<p>生日：2009-12-24。</p>\n<p>体重：？（在减了，在减了<del>O.o</del>）</p>\n<p>身高：180？</p>\n<p><a href=\"https://www.luogu.com.cn/user/712506\">洛谷</a>。</p>\n<p><a href=\"https://www.cnblogs.com/luckycloud\">cnblogs</a></p>\n<p>不挂 CF，AT。没脸挂。QwQ。</p>\n<h2 id=\"成分\"><a href=\"#成分\" class=\"headerlink\" title=\"成分\"></a>成分</h2><p>CSP-J/S 2023？</p>\n<p>依托答辩。</p>\n<p>whk ？</p>\n<p>依旧被吊打。qwq。真 FW 啊。</p>\n<p>爱看《推子》《鬼灭》《小埋》《小排球》…</p>\n<p>爱玩 Mc，王者。</p>\n<p>想玩 Ori，正在筹钱。QwQ。</p>\n<p>运动：<strong>排球</strong>，乒乓球，羽毛球，篮球。不怎么会打篮球与踢足球。</p>\n","excerpt":"","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>四川初三 Oier。<del>弱死了</del>。</p>\n<p>性别：男。</p>\n<p>生日：2009-12-24。</p>\n<p>体重：？（在减了，在减了<del>O.o</del>）</p>\n<p>身高：180？</p>\n<p><a href=\"https://www.luogu.com.cn/user/712506\">洛谷</a>。</p>\n<p><a href=\"https://www.cnblogs.com/luckycloud\">cnblogs</a></p>\n<p>不挂 CF，AT。没脸挂。QwQ。</p>\n<h2 id=\"成分\"><a href=\"#成分\" class=\"headerlink\" title=\"成分\"></a>成分</h2><p>CSP-J/S 2023？</p>\n<p>依托答辩。</p>\n<p>whk ？</p>\n<p>依旧被吊打。qwq。真 FW 啊。</p>\n<p>爱看《推子》《鬼灭》《小埋》《小排球》…</p>\n<p>爱玩 Mc，王者。</p>\n<p>想玩 Ori，正在筹钱。QwQ。</p>\n<p>运动：<strong>排球</strong>，乒乓球，羽毛球，篮球。不怎么会打篮球与踢足球。</p>\n"},{"title":"P6883 [COCI2016-2017#3] Kroničan","date":"2023-11-11T16:00:00.000Z","cover":"https://lucky-cloud09.github.io/img/b1.jpg","_content":"\n\n一眼丁真：一道**简单的入门的小清新状压好题**。\n\n## 分析\n\n根据题意，每一个杯子只有有水或没水这两种状态。很容易想到用二进制去表示。有水为 $0$，没水为 $1$。\n\n举个例子，有两个杯子所有杯子都没有水，那么状态为 $11$。\n\n设 $dp[i]$ 表示从初始状态到状态 $i$ 所需的最小代价。\n\n另外我们可以想到一个性质，例如说 $x$ 倒入 $y$ 中，$z$ 再倒往 $y$ 中，$y$ 倒入 $k$ 中与 $x$ 倒入 $y$ 中，$y$ 再倒往 $k$ 中，$z$ 倒往 $y$ 中，$y$ 有再一次倒入 $k$ 中是等价的。也就是倒入一个空杯子中与倒往这个杯子没空的时候可能是一样的。所以对于每一个状态 $i$，若当前有一个水杯没有水并且在上一步有水，则肯定是倒给了当前所有有水的杯子中的其中一个，而不是倒入没水的杯中。就不用算重复的情况了。\n\n那么我们很容易想出转移方程：\n\n$$dp[i] = \\min(dp[i \\oplus (1 << j)] + c[j][k], dp[i])$$\n\n其中 $j$ 表示当前没有水的水杯，$k$ 表示当前有水的水杯，当然 $0 \\le j, k < n$。下标从 $0$ 开始。而 $i \\oplus (1 << j)$ 表示能转移到 $i$ 这个状态的状态。\n\n初始化。\n\n根据题意和定义 $dp[0] = 0$，其余则为正无穷。\n\n答案就是在合法的状态中取最小值。\n\n$0$ 的个数小于等于 $k$ 的状态即为合法。\n\n当然，有一个小地方要注意，从 $x$ 杯倒入 $y$ 杯的价值可能不等于从 $y$ 杯 倒入 $x$ 杯的价值。\n\n时间复杂度 $O(2^n n^2)$。对于这题够用了。\n\n## Code\n\n下面的 `__builtin_popcount(i)` 是求出 $i$ 在二进制下有多少个 $1$。\n\n顺便告诉你，吸个氧就逼近最优解了。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, k, dp[(1 << 20) + 5], c[25][25];\n\nint main() {\n\tcin >> n >> k;\n\tmemset(dp, 0x3f, sizeof dp);\n\tfor (int i = 0; i < n; i++)//下标从 0 开始。\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tcin >> c[i][j];\n\tdp[0] = 0;\n\tfor (int i = 1; i < (1 << n); i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (i & (1 << j))//如果 j 这一杯没水。\n\t\t\t\tfor (int k = 0; k < n; k++)\n\t\t\t\t\tif (!(i & (1 << k)))//找到当前有水的杯子，可能在上一步 j 的水倒入了 $k$。\n\t\t\t\t\t\tdp[i] = min(dp[i], dp[(i - (1 << j))] + c[j][k]);//一定是 c[j][k]\n\t\t}\n\t}\n\tint ans = 1e9;\n\tfor (int i = 0; i < (1 << n); i++)\n\t\tif (__builtin_popcount(i) >= n - k)//也可以写成 n - __builtin_popcount(i) <= k，就是需要 0 的个数小于等于 k，或 1 的个数大于等于 k。\n\t\t\tans = min(ans, dp[i]);\n\tcout << ans;\n\treturn 0;\n}\n```\n\n## 后记\n\nCSP2023 后的第一篇题解~~还是随机跳题来的~~捏。\n\n若蒟蒻有空，会解答评论区的问题的。QwQ。\n\n蒟蒻可能有笔误，欢迎大佬们来纠正。","source":"_posts/lg_P6883.md","raw":"---\ntitle: P6883 [COCI2016-2017#3] Kroničan\ncategories: 题解\ndate: 2023/11/12\ncover: https://lucky-cloud09.github.io/img/b1.jpg\n---\n\n\n一眼丁真：一道**简单的入门的小清新状压好题**。\n\n## 分析\n\n根据题意，每一个杯子只有有水或没水这两种状态。很容易想到用二进制去表示。有水为 $0$，没水为 $1$。\n\n举个例子，有两个杯子所有杯子都没有水，那么状态为 $11$。\n\n设 $dp[i]$ 表示从初始状态到状态 $i$ 所需的最小代价。\n\n另外我们可以想到一个性质，例如说 $x$ 倒入 $y$ 中，$z$ 再倒往 $y$ 中，$y$ 倒入 $k$ 中与 $x$ 倒入 $y$ 中，$y$ 再倒往 $k$ 中，$z$ 倒往 $y$ 中，$y$ 有再一次倒入 $k$ 中是等价的。也就是倒入一个空杯子中与倒往这个杯子没空的时候可能是一样的。所以对于每一个状态 $i$，若当前有一个水杯没有水并且在上一步有水，则肯定是倒给了当前所有有水的杯子中的其中一个，而不是倒入没水的杯中。就不用算重复的情况了。\n\n那么我们很容易想出转移方程：\n\n$$dp[i] = \\min(dp[i \\oplus (1 << j)] + c[j][k], dp[i])$$\n\n其中 $j$ 表示当前没有水的水杯，$k$ 表示当前有水的水杯，当然 $0 \\le j, k < n$。下标从 $0$ 开始。而 $i \\oplus (1 << j)$ 表示能转移到 $i$ 这个状态的状态。\n\n初始化。\n\n根据题意和定义 $dp[0] = 0$，其余则为正无穷。\n\n答案就是在合法的状态中取最小值。\n\n$0$ 的个数小于等于 $k$ 的状态即为合法。\n\n当然，有一个小地方要注意，从 $x$ 杯倒入 $y$ 杯的价值可能不等于从 $y$ 杯 倒入 $x$ 杯的价值。\n\n时间复杂度 $O(2^n n^2)$。对于这题够用了。\n\n## Code\n\n下面的 `__builtin_popcount(i)` 是求出 $i$ 在二进制下有多少个 $1$。\n\n顺便告诉你，吸个氧就逼近最优解了。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, k, dp[(1 << 20) + 5], c[25][25];\n\nint main() {\n\tcin >> n >> k;\n\tmemset(dp, 0x3f, sizeof dp);\n\tfor (int i = 0; i < n; i++)//下标从 0 开始。\n\t\tfor (int j = 0; j < n; j++)\n\t\t\tcin >> c[i][j];\n\tdp[0] = 0;\n\tfor (int i = 1; i < (1 << n); i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (i & (1 << j))//如果 j 这一杯没水。\n\t\t\t\tfor (int k = 0; k < n; k++)\n\t\t\t\t\tif (!(i & (1 << k)))//找到当前有水的杯子，可能在上一步 j 的水倒入了 $k$。\n\t\t\t\t\t\tdp[i] = min(dp[i], dp[(i - (1 << j))] + c[j][k]);//一定是 c[j][k]\n\t\t}\n\t}\n\tint ans = 1e9;\n\tfor (int i = 0; i < (1 << n); i++)\n\t\tif (__builtin_popcount(i) >= n - k)//也可以写成 n - __builtin_popcount(i) <= k，就是需要 0 的个数小于等于 k，或 1 的个数大于等于 k。\n\t\t\tans = min(ans, dp[i]);\n\tcout << ans;\n\treturn 0;\n}\n```\n\n## 后记\n\nCSP2023 后的第一篇题解~~还是随机跳题来的~~捏。\n\n若蒟蒻有空，会解答评论区的问题的。QwQ。\n\n蒟蒻可能有笔误，欢迎大佬们来纠正。","slug":"lg_P6883","published":1,"updated":"2024-08-27T12:53:47.165Z","comments":1,"layout":"post","photos":[],"_id":"cm0cfoqg5000v358keux8270f","content":"<p>一眼丁真：一道<strong>简单的入门的小清新状压好题</strong>。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据题意，每一个杯子只有有水或没水这两种状态。很容易想到用二进制去表示。有水为 $0$，没水为 $1$。</p>\n<p>举个例子，有两个杯子所有杯子都没有水，那么状态为 $11$。</p>\n<p>设 $dp[i]$ 表示从初始状态到状态 $i$ 所需的最小代价。</p>\n<p>另外我们可以想到一个性质，例如说 $x$ 倒入 $y$ 中，$z$ 再倒往 $y$ 中，$y$ 倒入 $k$ 中与 $x$ 倒入 $y$ 中，$y$ 再倒往 $k$ 中，$z$ 倒往 $y$ 中，$y$ 有再一次倒入 $k$ 中是等价的。也就是倒入一个空杯子中与倒往这个杯子没空的时候可能是一样的。所以对于每一个状态 $i$，若当前有一个水杯没有水并且在上一步有水，则肯定是倒给了当前所有有水的杯子中的其中一个，而不是倒入没水的杯中。就不用算重复的情况了。</p>\n<p>那么我们很容易想出转移方程：</p>\n<script type=\"math/tex; mode=display\">dp[i] = \\min(dp[i \\oplus (1 << j)] + c[j][k], dp[i])</script><p>其中 $j$ 表示当前没有水的水杯，$k$ 表示当前有水的水杯，当然 $0 \\le j, k &lt; n$。下标从 $0$ 开始。而 $i \\oplus (1 &lt;&lt; j)$ 表示能转移到 $i$ 这个状态的状态。</p>\n<p>初始化。</p>\n<p>根据题意和定义 $dp[0] = 0$，其余则为正无穷。</p>\n<p>答案就是在合法的状态中取最小值。</p>\n<p>$0$ 的个数小于等于 $k$ 的状态即为合法。</p>\n<p>当然，有一个小地方要注意，从 $x$ 杯倒入 $y$ 杯的价值可能不等于从 $y$ 杯 倒入 $x$ 杯的价值。</p>\n<p>时间复杂度 $O(2^n n^2)$。对于这题够用了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>下面的 <code>__builtin_popcount(i)</code> 是求出 $i$ 在二进制下有多少个 $1$。</p>\n<p>顺便告诉你，吸个氧就逼近最优解了。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, k, </span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">) + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">25</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">25</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(dp, </span><span style=\"color: #B5CEA8\">0x3f</span><span style=\"color: #D4D4D4\">, sizeof dp);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span><span style=\"color: #6A9955\">//下标从 0 开始。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; n; j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tcin &gt;&gt; </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i][j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; n); i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i &amp; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; j))</span><span style=\"color: #6A9955\">//如果 j 这一杯没水。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; n; k++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!(i &amp; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; k)))</span><span style=\"color: #6A9955\">//找到当前有水的杯子，可能在上一步 j 的水倒入了 $k$。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t\t</span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[i], </span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[(i - (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; j))] + </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[j][k]);</span><span style=\"color: #6A9955\">//一定是 c[j][k]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = </span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; n); i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__builtin_popcount</span><span style=\"color: #D4D4D4\">(i) &gt;= n - k)</span><span style=\"color: #6A9955\">//也可以写成 n - __builtin_popcount(i) &lt;= k，就是需要 0 的个数小于等于 k，或 1 的个数大于等于 k。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>CSP2023 后的第一篇题解<del>还是随机跳题来的</del>捏。</p>\n<p>若蒟蒻有空，会解答评论区的问题的。QwQ。</p>\n<p>蒟蒻可能有笔误，欢迎大佬们来纠正。</p>\n","excerpt":"","more":"<p>一眼丁真：一道<strong>简单的入门的小清新状压好题</strong>。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>根据题意，每一个杯子只有有水或没水这两种状态。很容易想到用二进制去表示。有水为 $0$，没水为 $1$。</p>\n<p>举个例子，有两个杯子所有杯子都没有水，那么状态为 $11$。</p>\n<p>设 $dp[i]$ 表示从初始状态到状态 $i$ 所需的最小代价。</p>\n<p>另外我们可以想到一个性质，例如说 $x$ 倒入 $y$ 中，$z$ 再倒往 $y$ 中，$y$ 倒入 $k$ 中与 $x$ 倒入 $y$ 中，$y$ 再倒往 $k$ 中，$z$ 倒往 $y$ 中，$y$ 有再一次倒入 $k$ 中是等价的。也就是倒入一个空杯子中与倒往这个杯子没空的时候可能是一样的。所以对于每一个状态 $i$，若当前有一个水杯没有水并且在上一步有水，则肯定是倒给了当前所有有水的杯子中的其中一个，而不是倒入没水的杯中。就不用算重复的情况了。</p>\n<p>那么我们很容易想出转移方程：</p>\n<script type=\"math/tex; mode=display\">dp[i] = \\min(dp[i \\oplus (1 << j)] + c[j][k], dp[i])</script><p>其中 $j$ 表示当前没有水的水杯，$k$ 表示当前有水的水杯，当然 $0 \\le j, k &lt; n$。下标从 $0$ 开始。而 $i \\oplus (1 &lt;&lt; j)$ 表示能转移到 $i$ 这个状态的状态。</p>\n<p>初始化。</p>\n<p>根据题意和定义 $dp[0] = 0$，其余则为正无穷。</p>\n<p>答案就是在合法的状态中取最小值。</p>\n<p>$0$ 的个数小于等于 $k$ 的状态即为合法。</p>\n<p>当然，有一个小地方要注意，从 $x$ 杯倒入 $y$ 杯的价值可能不等于从 $y$ 杯 倒入 $x$ 杯的价值。</p>\n<p>时间复杂度 $O(2^n n^2)$。对于这题够用了。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>下面的 <code>__builtin_popcount(i)</code> 是求出 $i$ 在二进制下有多少个 $1$。</p>\n<p>顺便告诉你，吸个氧就逼近最优解了。</p>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div><div class=\"code\"><pre class=\"shiki dark-plus\"><code><span class=\"line\"><span style=\"color: #C586C0\">#include</span><span style=\"color: #569CD6\"> </span><span style=\"color: #CE9178\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">using</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">namespace</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">std</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> n, k, </span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; </span><span style=\"color: #B5CEA8\">20</span><span style=\"color: #D4D4D4\">) + </span><span style=\"color: #B5CEA8\">5</span><span style=\"color: #D4D4D4\">], </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">25</span><span style=\"color: #D4D4D4\">][</span><span style=\"color: #B5CEA8\">25</span><span style=\"color: #D4D4D4\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">main</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcin &gt;&gt; n &gt;&gt; k;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #DCDCAA\">memset</span><span style=\"color: #D4D4D4\">(dp, </span><span style=\"color: #B5CEA8\">0x3f</span><span style=\"color: #D4D4D4\">, sizeof dp);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; n; i++)</span><span style=\"color: #6A9955\">//下标从 0 开始。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; n; j++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tcin &gt;&gt; </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[i][j];</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[</span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">] = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">; i &lt; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; n); i++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> j = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; j &lt; n; j++) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (i &amp; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; j))</span><span style=\"color: #6A9955\">//如果 j 这一杯没水。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> k = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; k &lt; n; k++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (!(i &amp; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; k)))</span><span style=\"color: #6A9955\">//找到当前有水的杯子，可能在上一步 j 的水倒入了 $k$。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\t\t\t\t</span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[i] = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[i], </span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[(i - (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; j))] + </span><span style=\"color: #9CDCFE\">c</span><span style=\"color: #D4D4D4\">[j][k]);</span><span style=\"color: #6A9955\">//一定是 c[j][k]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> ans = </span><span style=\"color: #B5CEA8\">1e9</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">for</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #569CD6\">int</span><span style=\"color: #D4D4D4\"> i = </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">; i &lt; (</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\"> &lt;&lt; n); i++)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t</span><span style=\"color: #C586C0\">if</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #DCDCAA\">__builtin_popcount</span><span style=\"color: #D4D4D4\">(i) &gt;= n - k)</span><span style=\"color: #6A9955\">//也可以写成 n - __builtin_popcount(i) &lt;= k，就是需要 0 的个数小于等于 k，或 1 的个数大于等于 k。</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t\t\tans = </span><span style=\"color: #DCDCAA\">min</span><span style=\"color: #D4D4D4\">(ans, </span><span style=\"color: #9CDCFE\">dp</span><span style=\"color: #D4D4D4\">[i]);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\tcout &lt;&lt; ans;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">\t</span><span style=\"color: #C586C0\">return</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span></code></pre></div></div></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>CSP2023 后的第一篇题解<del>还是随机跳题来的</del>捏。</p>\n<p>若蒟蒻有空，会解答评论区的问题的。QwQ。</p>\n<p>蒟蒻可能有笔误，欢迎大佬们来纠正。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm0cfoqfr0006358k26fmem8j","category_id":"cm0cfoqfp0004358k17797ldr","_id":"cm0cfoqfv000b358kebt90clr"},{"post_id":"cm0cfoqfl0001358k9whx24qg","category_id":"cm0cfoqfp0004358k17797ldr","_id":"cm0cfoqfw000e358k3pvv77zi"},{"post_id":"cm0cfoqfn0003358k48i1c9ka","category_id":"cm0cfoqfp0004358k17797ldr","_id":"cm0cfoqfy000h358k9i79e3tw"},{"post_id":"cm0cfoqfq0005358kdqb0hmtr","category_id":"cm0cfoqfp0004358k17797ldr","_id":"cm0cfoqg0000k358kd7zi4dx1"},{"post_id":"cm0cfoqfy000i358kgw5c4ebi","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg2000o358kcq9d8l6c"},{"post_id":"cm0cfoqfs0007358kfm4qezps","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg3000r358k00mfbxk9"},{"post_id":"cm0cfoqfz000j358k2rabgszw","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg4000t358khmrcfhtd"},{"post_id":"cm0cfoqg0000m358k6uz67gvr","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg5000w358k2xupabam"},{"post_id":"cm0cfoqft0009358k4qy04y0m","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg6000x358ka16tap44"},{"post_id":"cm0cfoqg1000n358k9x3zdj3l","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg6000z358k4qlbedlb"},{"post_id":"cm0cfoqg3000q358k6upr2nw5","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg60010358k71oab5qn"},{"post_id":"cm0cfoqfu000a358k7y6dgqpw","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg70012358k0dzobni5"},{"post_id":"cm0cfoqg5000v358keux8270f","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg70013358k83bygvfb"},{"post_id":"cm0cfoqfw000d358k6rnj348t","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg70014358k4x7ja26o"},{"post_id":"cm0cfoqfx000f358kglxc531g","category_id":"cm0cfoqfx000g358k7ft1ff9w","_id":"cm0cfoqg70015358k3o1jchzy"},{"post_id":"cm0cfoqg3000s358k5eu8c2j9","category_id":"cm0cfoqg60011358k94fzfqsc","_id":"cm0cfoqg70016358k2pip9gvp"}],"PostTag":[],"Tag":[]}}